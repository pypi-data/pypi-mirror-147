#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# File: cli/ubtsl.py
#
# Part of ‘UNICORN Binance Trailing Stop Loss’
# Project website: https://www.lucit.tech/unicorn-binance-trailing-stop-loss.html
# Github: https://github.com/LUCIT-Systems-and-Development/unicorn-binance-trailing-stop-loss
# Documentation: https://unicorn-binance-trailing-stop-loss.docs.lucit.tech
# PyPI: https://pypi.org/project/unicorn-binance-trailing-stop-loss
#
#
# Author: LUCIT Systems and Development
#
# Copyright (c) 2022-2022, LUCIT Systems and Development (https://www.lucit.tech) and Oliver Zehentleitner
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish, dis-
# tribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the fol-
# lowing conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-
# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

from unicorn_binance_trailing_stop_loss.manager import BinanceTrailingStopLossManager
from configparser import ConfigParser, ExtendedInterpolation
import argparse
import logging
import os
import sys
import textwrap
import time
from pathlib import Path

"""
    UNICORN Binance Trailing Stop Loss Command Line Interface Documentation
"""

VERSION = "0.1.0"
HOME_PATH = str(Path.home()) + "/"
LOG_FORMAT = "{asctime} [{levelname:8}] {process} {thread} {module}: {message}"

parser = argparse.ArgumentParser(
      prog=f"UNICORN Binance Trailing Stop Loss CLI {VERSION}",
      formatter_class=argparse.RawDescriptionHelpFormatter,
      epilog=textwrap.dedent('''\
         additional information:
             Home: https://github.com/LUCIT-Systems-and-Development/unicorn-binance-trailing-stop-loss
         '''))

parser.add_argument('--apikey',
                    type=str,
                    help="The API key!",
                    required=False)
parser.add_argument('--apisecret',
                    type=str,
                    help="The API secret!",
                    required=False)
parser.add_argument('--exchange',
                    type=str,
                    help="Exchange: binance.com, binance.com-margin, binance.com-isolated_margin, ...",
                    required=False)
parser.add_argument('--keepthreshold',
                    type=str,
                    help="Exchange: binance.com, binance.com-margin, binance.com-isolated_margin, ...",
                    required=False)
parser.add_argument('--limit',
                    type=str,
                    help='Stop/loss limit in integer or percent.',
                    required=False)
parser.add_argument('--logfile',
                    type=str,
                    help='Specify path including filename to the logfile.',
                    required=False)
parser.add_argument('--orderside',
                    type=str,
                    help="Specify whether the trailing stop loss should be in buying or selling mode. (Ex: 'buy' "
                         "or 'sell').",
                    required=False)
parser.add_argument('--ordertype',
                    type=str,
                    help="Use `limit` or `market`.",
                    required=False)
parser.add_argument('--profile',
                    type=str,
                    help='Name of the profile to load from profiles.ini!',
                    required=False)
parser.add_argument('--profilesfile',
                    type=str,
                    help='Specify path including filename to the profiles file. (Ex: `~/profiles.ini`) If not '
                         'available it tries to load a profile.ini from the current working directory.',
                    required=False)
parser.add_argument('--resetstoplossprice',
                    type=str,
                    help='Reset the existing stop_loss_price! Usage: True anything else is False!',
                    required=False)
parser.add_argument('--secretsfile',
                    type=str,
                    help='Specify path including filename to the secrets file. (Ex: `~/secrets.ini`) If not '
                         'available it tries to load a secrets.ini from the current working directory.',
                    required=False)
parser.add_argument('--stoplossprice',
                    type=float,
                    help='Set the starting stop/loss price.',
                    required=False)
parser.add_argument('--symbol',
                    type=str,
                    help='The market symbol as used by Binance.',
                    required=False)
parser.add_argument('--loglevel',
                    type=str,
                    help='Choose a log level (DEBUG, INFO, WARNING, ERROR or CRITICAL). Default is `INFO.',
                    required=False)
options = parser.parse_args()


def callback_error(msg):
    print(f"STOP LOSS ERROR - ENGINE IS SHUTTING DOWN! - {msg}")


def callback_finished(msg):
    print(f"STOP LOSS FINISHED - ENGINE IS SHUTTING DOWN! - {msg}")


if len(sys.argv) <= 1:
    parser.print_help()
    sys.exit(1)

# Log file
if options.logfile is True:
    logfile = options.logfile
else:
    logfile = os.path.basename(__file__) + '.log'

# Log level
if options.loglevel == "DEBUG":
    loglevel = logging.DEBUG
elif options.loglevel == "INFO":
    loglevel = logging.INFO
elif options.loglevel == "WARN" or options.loglevel == "WARNING" :
    loglevel = logging.WARNING
elif options.loglevel == "ERROR":
    loglevel = logging.ERROR
elif options.loglevel == "CRITICAL":
    loglevel = logging.CRITICAL
else:
    loglevel = logging.INFO

# Config logger
logging.basicConfig(level=loglevel,
                    filename=logfile,
                    format=LOG_FORMAT,
                    style="{")
logger = logging.getLogger("unicorn_binance_trailing_stop_loss")

# Load secrets.ini file
if options.secretsfile is not None:
    # Load from cli arg if provided
    config_file = str(options.secretsfile)
else:
    # Load secrets from default filenames
    config_file_lucit = f"{HOME_PATH}.lucit_trading_tools.ini"
    config_file_secrets_cwd = f"ubtsl_secrets.ini"
    config_file_secrets_home = f"{HOME_PATH}ubtsl_secrets.ini"
    if os.path.isfile(config_file_lucit):
        config_file = config_file_lucit
    elif os.path.isfile(config_file_secrets_cwd):
        config_file = config_file_secrets_cwd
    elif os.path.isfile(config_file_secrets_home):
        config_file = config_file_secrets_home
    else:
        logger.critical("If ´ubtsl_secrets.ini´ is not in the home or current working directory or is renamed, then "
                        "the parameter --secretsfile is mandatory! Please use --help for further information!")
        sys.exit(1)
logger.info(f"Loading configuration file `{config_file}`")

config = ConfigParser(interpolation=ExtendedInterpolation())
config.read(config_file)
public_key = config['BINANCE']['api_key']
private_key = config['BINANCE']['api_secret']
send_to_email_address = config['EMAIL']['send_to_email']
send_from_email_address = config['EMAIL']['send_from_email']
send_from_email_password = config['EMAIL']['send_from_password']
send_from_email_server = config['EMAIL']['send_from_server']
send_from_email_port = config['EMAIL']['send_from_port']
telegram_bot_token = config['TELEGRAM']['bot_token']
telegram_send_to = config['TELEGRAM']['send_to']

# Load profiles.ini file
if options.profilesfile is not None:
    # Load from cli arg if provided
    profiles_file = str(options.profilesfile)
else:
    profiles_file_cwd = "ubtsl_profiles.ini"
    profiles_file_home = f"{HOME_PATH}ubtsl_profiles.ini"
    if os.path.isfile(profiles_file_cwd):
        profiles_file = profiles_file_cwd
    elif os.path.isfile(profiles_file_home):
        profiles_file = profiles_file_home
    else:
        logger.critical("If ´ubtsl_profiles.ini´ is not in the home or current working directory or is renamed, then "
                        "the parameter --profilesfile is mandatory! Please use --help for further information!")
        sys.exit(1)
logger.info(f"Loading profiles file {profiles_file}")
profiles = ConfigParser(interpolation=ExtendedInterpolation())
profiles.read(profiles_file)

exchange = ""
keep_threshold = ""
stop_loss_market = ""
stop_loss_limit = ""
stop_loss_order_type = ""
stop_loss_price: float = 0.0
stop_loss_side = ""
reset_stop_loss_price: bool = False

# Load a profile is provided via argparse
if options.profile is not None:
    try:
        exchange = profiles[options.profile]['exchange']
    except KeyError:
        pass
    try:
        keep_threshold = profiles[options.profile]['keep_threshold']
    except KeyError:
        pass
    try:
        reset_stop_loss_price = profiles[options.profile]['reset_stop_loss_price']
    except KeyError:
        pass

    try:
        stop_loss_market = profiles[options.profile]['stop_loss_market']
    except KeyError:
        pass
    try:
        stop_loss_limit = profiles[options.profile]['stop_loss_limit']
    except KeyError:
        pass
    try:
        stop_loss_order_type = profiles[options.profile]['stop_loss_order_type']
    except KeyError:
        pass
    try:
        stop_loss_price = float(profiles[options.profile]['stop_loss_price'])
    except KeyError:
        pass
    try:
        stop_loss_side = profiles[options.profile]['stop_loss_side']
    except KeyError:
        pass

# cli args overwrite profile settings
if options.apikey is not None:
    public_key = options.apikey
if options.apisecret is not None:
    private_key = options.apisecret
if options.exchange is not None:
    exchange = options.exchange
if options.keepthreshold is not None:
    keep_threshold = options.keepthreshold
if options.symbol is not None:
    stop_loss_market = options.symbol
if options.limit is not None:
    stop_loss_limit = options.limit
if options.ordertype is not None:
    stop_loss_order_type = options.ordertype
if options.resetstoplossprice is not None:
    reset_stop_loss_price = options.resetstoplossprice
if options.stoplossprice is not None:
    stop_loss_price = options.stoplossprice
if options.orderside is not None:
    stop_loss_side = options.orderside

if str(reset_stop_loss_price).upper() == "TRUE":
    reset_stop_loss_price = True
else:
    reset_stop_loss_price = False


ubtsl = BinanceTrailingStopLossManager(callback_error=callback_error,
                                       callback_finished=callback_finished,
                                       binance_public_key=public_key,
                                       binance_private_key=private_key,
                                       exchange=exchange,
                                       keep_threshold=keep_threshold,
                                       reset_stop_loss_price=reset_stop_loss_price,
                                       send_to_email_address=send_to_email_address,
                                       send_from_email_address=send_from_email_address,
                                       send_from_email_password=send_from_email_password,
                                       send_from_email_server=send_from_email_server,
                                       send_from_email_port=send_from_email_port,
                                       stop_loss_limit=stop_loss_limit,
                                       stop_loss_market=stop_loss_market,
                                       stop_loss_order_type=stop_loss_order_type,
                                       stop_loss_price=stop_loss_price,
                                       stop_loss_side=stop_loss_side,
                                       telegram_bot_token=telegram_bot_token,
                                       telegram_send_to=telegram_send_to)
ubtsl.start()

try:
    while ubtsl.stop_request is False:
        time.sleep(1)
except KeyboardInterrupt:
    print("\nStopping ... just wait a few seconds!")
    ubtsl.stop()
print(f"Exit main file!")
