"""
    VRt.Packer [PC]

    Veeroute Packer API.  # Description  The service is designed to calculate the placement of goods inside specified packages.  ## Package types  ### Pallet  ![pallet](../images/packer_pallet.svg)  *Mono pallet*  If a pallet is fully equipped with the same product, then such a pallet is called mono-pallet, mono-pallet loading rules:  1. The maximum permissible height of the pallet with the goods laid on it: 1800 mm 1. Maximum permissible weight of the loaded pallet: 650 kg 1. Packages of goods may only be stacked parallel to the pallet walls. 1. It is allowed to rotate packages around the vertical Z axis and only at right angles. 1. To level the height between positions (for placing another pallet on top), empty spaces can be added to the stacking in layers.  *Zoned pallet*  After the formation of mono-pallets, the remaining part of the goods of the same article is placed on the next pallet, which is divided into zones by means of a cardboard partition in such a way that only one article is placed in each zone, the zones have the following restrictions:  1. Zones are rectangular. 1. The ratio between the sides of the zones can be any. 1. One side of any zone is always in contact with the edge of the pallet. 1. Allowable number of zones on a pallet: from 2 to 6. 1. Each zone is filled according to the rules for filling a mono-pallet. 1. The stacking height of all goods does not exceed 50 mm, so that another pallet can be placed on top of such a pallet. 1. It is allowed to form pallets with different stacking heights for different positions (the difference in heights is more than 50 mm), if these are the top pallets in a stack.  ### Mix box  ![mixbox](../images/packer_mixbox.svg)  If the steps above fail to place the item in this way, so that the pallet has the required height or weight, mix boxes are used:  1. Mix boxes can only be placed in one layer. 1. In one mix-box there can be different goods, in this case it is divided by partitions similarly to the pallet (the only difference is that the height of the packed goods is not aligned). 1. Mix boxes can be mixed with items on one pallet. 1. One product can be packed in different mix boxes.  ### Slot  ![slot](../images/packer_slot.svg)  Loaded pallets are stacked on top of each other, the slot is where the stack of pallets is placed. The slot has no physical body - so the dimensions of the `body` of the slot are zero.  ## Coordinate system  ![coordinates](../images/packer_coordinates.svg)  The local coordinate system is used to indicate the location of packages and goods, in which the coordinates of a particular object are indicated relative to the near-left lower corner of the parent object, while:  * Horizontal plane - **X**, **Y** axes * Vertical - **Z** axis  ## Entity relationship diagram  ![erd](../uml/packer.svg)  # noqa: E501

    The version of the OpenAPI document: 4.7.1599
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from vrt_lss_packer.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from vrt_lss_packer.exceptions import ApiAttributeError


def lazy_import():
    from vrt_lss_packer.model.pack_settings import PackSettings
    from vrt_lss_packer.model.package import Package
    from vrt_lss_packer.model.product import Product
    globals()['PackSettings'] = PackSettings
    globals()['Package'] = Package
    globals()['Product'] = Product


class PackTask(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('products',): {
            'max_items': 70001,
            'min_items': 1,
        },
        ('packages',): {
            'max_items': 11,
            'min_items': 1,
        },
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'products': ([Product],),  # noqa: E501
            'packages': ([Package],),  # noqa: E501
            'pack_settings': (PackSettings,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'products': 'products',  # noqa: E501
        'packages': 'packages',  # noqa: E501
        'pack_settings': 'pack_settings',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, products, packages, *args, **kwargs):  # noqa: E501
        """PackTask - a model defined in OpenAPI

        Args:
            products ([Product]): List of products.
            packages ([Package]): List of packages. It is obligatory to have at least one package of each type (SLOT, PALLET, MIXBOX). 

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            pack_settings (PackSettings): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.products = products
        self.packages = packages
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, products, packages, *args, **kwargs):  # noqa: E501
        """PackTask - a model defined in OpenAPI

        Args:
            products ([Product]): List of products.
            packages ([Package]): List of packages. It is obligatory to have at least one package of each type (SLOT, PALLET, MIXBOX). 

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            pack_settings (PackSettings): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.products = products
        self.packages = packages
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
