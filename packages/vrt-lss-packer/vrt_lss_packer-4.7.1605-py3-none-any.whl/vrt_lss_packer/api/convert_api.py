"""
    VRt.Packer [PC]

    Veeroute Packer API.  # Description  The service is designed to calculate the placement of goods inside specified packages.  ## Package types  ### Pallet  ![pallet](../images/packer_pallet.svg)  *Mono pallet*  If a pallet is fully equipped with the same product, then such a pallet is called mono-pallet, mono-pallet loading rules:  1. The maximum permissible height of the pallet with the goods laid on it: 1800 mm 1. Maximum permissible weight of the loaded pallet: 650 kg 1. Packages of goods may only be stacked parallel to the pallet walls. 1. It is allowed to rotate packages around the vertical Z axis and only at right angles. 1. To level the height between positions (for placing another pallet on top), empty spaces can be added to the stacking in layers.  *Zoned pallet*  After the formation of mono-pallets, the remaining part of the goods of the same article is placed on the next pallet, which is divided into zones by means of a cardboard partition in such a way that only one article is placed in each zone, the zones have the following restrictions:  1. Zones are rectangular. 1. The ratio between the sides of the zones can be any. 1. One side of any zone is always in contact with the edge of the pallet. 1. Allowable number of zones on a pallet: from 2 to 6. 1. Each zone is filled according to the rules for filling a mono-pallet. 1. The stacking height of all goods does not exceed 50 mm, so that another pallet can be placed on top of such a pallet. 1. It is allowed to form pallets with different stacking heights for different positions (the difference in heights is more than 50 mm), if these are the top pallets in a stack.  ### Mix box  ![mixbox](../images/packer_mixbox.svg)  If the steps above fail to place the item in this way, so that the pallet has the required height or weight, mix boxes are used:  1. Mix boxes can only be placed in one layer. 1. In one mix-box there can be different goods, in this case it is divided by partitions similarly to the pallet (the only difference is that the height of the packed goods is not aligned). 1. Mix boxes can be mixed with items on one pallet. 1. One product can be packed in different mix boxes.  ### Slot  ![slot](../images/packer_slot.svg)  Loaded pallets are stacked on top of each other, the slot is where the stack of pallets is placed. The slot has no physical body - so the dimensions of the `body` of the slot are zero.  ## Coordinate system  ![coordinates](../images/packer_coordinates.svg)  The local coordinate system is used to indicate the location of packages and goods, in which the coordinates of a particular object are indicated relative to the near-left lower corner of the parent object, while:  * Horizontal plane - **X**, **Y** axes * Vertical - **Z** axis  ## Entity relationship diagram  ![erd](../uml/packer.svg)  

    The version of the OpenAPI document: 4.7.1605
    Contact: servicedesk@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from vrt_lss_packer.api_client import ApiClient, Endpoint as _Endpoint
from vrt_lss_packer.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from vrt_lss_packer.model.inline_response400 import InlineResponse400
from vrt_lss_packer.model.inline_response401 import InlineResponse401
from vrt_lss_packer.model.inline_response402 import InlineResponse402
from vrt_lss_packer.model.inline_response403 import InlineResponse403
from vrt_lss_packer.model.inline_response429 import InlineResponse429
from vrt_lss_packer.model.inline_response500 import InlineResponse500
from vrt_lss_packer.model.render_task import RenderTask


class ConvertApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.run_convert_to_gltf_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/packer/convert/gltf',
                'operation_id': 'run_convert_to_gltf',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'render_task',
                ],
                'required': [
                    'render_task',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'render_task':
                        (RenderTask,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'render_task': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def run_convert_to_gltf(
        self,
        render_task,
        **kwargs
    ):
        """Convert (glTF)  

        Used for render of input and output data to the [glTF](https://en.wikipedia.org/wiki/GlTF) format.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.run_convert_to_gltf(render_task, async_req=True)
        >>> result = thread.get()

        Args:
            render_task (RenderTask): Convert request.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['render_task'] = \
            render_task
        return self.run_convert_to_gltf_endpoint.call_with_http_info(**kwargs)

