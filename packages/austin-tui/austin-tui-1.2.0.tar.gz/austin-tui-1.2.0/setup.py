# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['austin_tui', 'austin_tui.model', 'austin_tui.view', 'austin_tui.widgets']

package_data = \
{'': ['*']}

install_requires = \
['austin-python', 'importlib-resources>=2.0.1,<3.0.0', 'lxml>=4.5.1,<5.0.0']

extras_require = \
{':sys_platform == "win32"': ['windows-curses>=2.1.0,<3.0.0']}

entry_points = \
{'console_scripts': ['austin-tui = austin_tui.__main__:main']}

setup_kwargs = {
    'name': 'austin-tui',
    'version': '1.2.0',
    'description': 'The top-like text-based user interface for Austin',
    'long_description': '<p align="center">\n  <br><img src="art/logo.png" alt="Austin TUI" /><br>\n</p>\n\n<h3 align="center">A Top-like Interface for Austin</h3>\n\n\n<p align="center">\n  <a href="https://github.com/P403n1x87/austin-tui/actions?workflow=Tests">\n    <img src="https://github.com/P403n1x87/austin-tui/workflows/Tests/badge.svg"\n         alt="GitHub Actions: Tests">\n  </a>\n  <br/>\n  <!-- <a href="https://travis-ci.org/P403n1x87/austin-tui">\n    <img src="https://travis-ci.org/P403n1x87/austin-tui.svg?branch=master"\n         alt="Travis CI">\n  </a>\n  <a href="https://codecov.io/gh/P403n1x87/austin-tui">\n    <img src="https://codecov.io/gh/P403n1x87/austin-tui/branch/master/graph/badge.svg"\n         alt="Codecov">\n  </a> -->\n  <a href="https://pypi.org/project/austin-tui/">\n    <img src="https://img.shields.io/pypi/v/austin-tui.svg"\n         alt="PyPI">\n  </a>\n  <a href="https://pypi.org/project/austin-tui/">\n    <img src="https://static.pepy.tech/personalized-badge/austin-tui?period=total&units=international_system&left_color=grey&right_color=blue&left_text=downloads"\n         alt="PyPI Downloads">\n  </a>\n  &nbsp;\n  <a href="https://anaconda.org/conda-forge/austin-tui">\n    <img src="https://anaconda.org/conda-forge/austin-tui/badges/version.svg" />\n  </a>\n  <a href="https://anaconda.org/conda-forge/austin-tui">\n    <img src="https://anaconda.org/conda-forge/austin-tui/badges/downloads.svg" />\n  </a>\n  \n  <br/>\n  \n  <a href="https://github.com/P403n1x87/austin-tui/blob/master/LICENSE.md">\n    <img src="https://img.shields.io/badge/license-GPLv3-ff69b4.svg"\n         alt="LICENSE">\n  </a>\n</p>\n\n<p align="center">\n  <a href="#synopsis"><b>Synopsis</b></a>&nbsp;&bull;\n  <a href="#installation"><b>Installation</b></a>&nbsp;&bull;\n  <a href="#usage"><b>Usage</b></a>&nbsp;&bull;\n  <a href="#compatibility"><b>Compatibility</b></a>&nbsp;&bull;\n  <a href="#contribute"><b>Contribute</b></a>\n</p>\n\n<p align="center">\n  <a\n    href="https://www.buymeacoffee.com/Q9C1Hnm28"\n    target="_blank">\n  <img\n    src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png"\n    alt="Buy Me A Coffee" />\n  </a>\n</p>\n\n# Synopsis\n\nThe Python TUI is a top-like text-based user interface for [Austin], the frame\nstack sampler for CPython. Originally planned as a sample application to\nshowcase [Austin] uses, it\'s been promoted to a full-fledged project thanks to\ngreat popularity.\n\n<p align="center">\n  <img src="art/austin-tui.gif"\n       style="box-shadow: #111 0px 0px 16px;"\n       alt="Austin TUI" />\n</p>\n\nThe header shows you the information of the application that is being profiled,\nlike its PID, the command line used to invoke it, as well as a plot of the\namount of CPU and memory that is being used by it, in a system-monitor style.\n\nTo know more about how the TUI itself was made, have a read through [The Austin\nTUI Way to Resourceful Text-based User Interfaces].\n\n# Installation\n\nAustin TUI can be installed directly from PyPI with\n\n~~~ console\npipx install austin-tui\n~~~\n\n> **NOTE** In order for the TUI to work, the Austin 3 binary needs to be\n> discoverable in the ways documented by the [austin-python] library. Have a\n> look at [Austin installation] instructions to see how you can easily install\n> Austin on your platform.\n\nOn macOS and Linux, Austin TUI and its dependencies (including Austin itself) \ncan be installed via conda with\n\n~~~ console\nconda install -c conda-forge austin-tui\n~~~\n\n# Usage\n\nOnce [Austin] 3 and Austin TUI are installed, you can start using them\nstraight-away. If you want to launch and profile a Python script, say\n`myscript.py`, you can do\n\n~~~ console\naustin-tui python3 myscript.py\n~~~\n\nor, if `myscript.py` is an executable script,\n\n~~~ console\naustin-tui ./myscript.py\n~~~\n\nLike [Austin], the TUI can also attach to a running Python application. To\nanalyse the frame stacks of all the processes of a running WSGI server, for\nexample, get hold of the PID of the parent process and do\n\n~~~ console\nsudo austin-tui -Cp <pid>\n~~~\n\nThe `-C` option will instruct [Austin] to look for child Python processes, and you\nwill be able to navigate through them with the arrow keys.\n\n> The TUI is based on `python-curses`. The version included with the standard\n> Windows installations of Python is broken so it won\'t work out of the box. A\n> solution is to install the the wheel of the port to Windows from\n> [this](https://www.lfd.uci.edu/~gohlke/pythonlibs/#curses) page. Wheel files\n> can be installed directly with `pip`, as described in the\n> [linked](https://pip.pypa.io/en/latest/user_guide/#installing-from-wheels)\n> page.\n\n## Thread navigation\n\nProfiling data is processed on a per-thread basis. The total number of threads\n(across all processes, if sampling child processes) is displayed in the\ntop-right corner of the TUI. To navigate to a different thread, use the\n<kbd>&larr;</kbd> and <kbd>&rarr;</kbd> arrows. The PID and TID of the currently\nselected thread will appear in the middle of the top bar in the TUI.\n\n\n## Full mode\n\nBy default, Austin TUI shows you statistics of the last seen stack for each\nprocess and thread when the UI is refreshed (about every second). This is\nsimilar to what top does with all the running processes on your system.\n\n<p align="center">\n  <img src="art/austin-tui-normal-mode.png"\n       style="box-shadow: #111 0px 0px 16px;"\n       alt="Austin TUI - Default mode" />\n</p>\n\nIf you want to see all the collected statistics, with the frame stacks\nrepresented as a rooted tree, you can press <kbd>F</kbd> to enter the _Full_\nmode. The last seen stack will be highlighted so that you also have that\ninformation available while in this mode.\n\n<p align="center">\n  <img src="art/austin-tui-full-mode.png"\n       style="box-shadow: #111 0px 0px 16px;"\n       alt="Austin TUI - Full mode" />\n</p>\n\nThe information that gets displayed is very dynamic and could become tricky to\ninspect. The current view can be paused by pressing <kbd>P</kbd>. To resume\nrefreshing the view, press <kbd>P</kbd> again. While the view is paused,\nprofiling data is still being captured and processed in the background, so that\nwhen the view is resumed, the latest figures are shown.\n\n\n## Graph mode\n\nA live flame graph visualisation of the current thread statistics can be\ndisplayed by pressing <kbd>G</kbd>. This might help with identifying the largest\nframes at a glance.\n\n<p align="center">\n  <img src="art/austin-tui-flamegraph.gif"\n       style="box-shadow: #111 0px 0px 16px;"\n       alt="Austin TUI - Live flame graph" />\n</p>\n\nTo toggle back to the top view, simply press <kbd>G</kbd> again.\n\n## Save statistics\n\nPeeking at a running Python application is nice but in many cases you would want\nto save the collected data for further offline analysis (for example, you might\nwant to represent it as a flame graph). At any point, whenever you want to dump\nthe collected data to a file, you can press <kbd>S</kbd> and a file with all the\nsamples will be generated for you in the working directory, prefixed with\n`austin_` and followed by a timestamp. The TUI will notify of the successful\noperation on the bottom-right corner.\n\n<p align="center">\n  <img src="art/austin-tui-save.png"\n       style="box-shadow: #111 0px 0px 16px;"\n       alt="Austin TUI - Save notification" />\n</p>\n\nIf you run the Austin TUI inside VS Code, you can benefit from the editor\'s\nterminal features, like using <kbd>Ctrl</kbd>/<kbd>Cmd</kbd>+<kbd>Left-Click</kbd>\nto hop straight into a source file at a given line. You can also leverage the\nTUI\'s save feature to export the collected samples and import them into the\n[Austin VS Code] extension to also get a flame graph representation.\n\n<p align="center">\n  <img src="art/austin-tui-vscode.gif"\n       style="box-shadow: #111 0px 0px 16px;"\n       alt="Austin TUI" />\n</p>\n\n## Threshold\n\nThe statistics reported by the TUI might be overwhelming, especially in full\nmode. To reduce the amout of data that gets displayed, the keys <kbd>+</kbd> and\n<kbd>-</kbd> can be used to increase or lower the `%TOTAL` threshold\n\n<p align="center">\n  <img src="art/austin-tui-threshold.png"\n       style="box-shadow: #111 0px 0px 16px;"\n       alt="Austin TUI - Threshold demonstration" />\n</p>\n\n\n# Compatibility\n\nAustin TUI has been tested with Python 3.7-3.10 and is known to work on\n**Linux**, **macOS** and **Windows**.\n\nSince Austin TUI uses [Austin] to collect samples, the same note applies here:\n\n> Due to the **System Integrity Protection** introduced in **macOS** with El\n> Capitan, Austin cannot profile Python processes that use an executable located\n> in the `/bin` folder, even with `sudo`. Hence, either run the interpreter from\n> a virtual environment or use a Python interpreter that is installed in, e.g.,\n> `/Applications` or via `brew` with the default prefix (`/usr/local`). Even in\n> these cases, though, the use of `sudo` is required.\n\nAs for Linux users, the use of `sudo` can be avoided by granting Austin the\n`cap_sys_ptrace` capability with, e.g.\n\n~~~ console\nsudo setcap cap_sys_ptrace+ep `which austin`\n~~~\n\n# Contribute\n\nIf you like Austin TUI and you find it useful, there are ways for you to\ncontribute.\n\nIf you want to help with the development, then have a look at the open issues\nand have a look at the [contributing guidelines](CONTRIBUTING.md) before you\nopen a pull request.\n\nYou can also contribute to the development of the Austin TUI by becoming a\nsponsor and/or by [buying me a coffee](https://www.buymeacoffee.com/Q9C1Hnm28)\non BMC or by chipping in a few pennies on\n[PayPal.Me](https://www.paypal.me/gtornetta/1).\n\n<p align="center">\n  <a href="https://www.buymeacoffee.com/Q9C1Hnm28"\n     target="_blank">\n  <img src="https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png"\n       alt="Buy Me A Coffee" />\n  </a>\n</p>\n\n\n[Austin]: https://github.com/P403n1x87/austin\n[austin-python]: https://github.com/P403n1x87/austin-python#installation\n[Austin installation]: https://github.com/P403n1x87/austin#installation\n[Austin VS Code]: https://marketplace.visualstudio.com/items?itemName=p403n1x87.austin-vscode\n[The Austin TUI Way to Resourceful Text-based User Interfaces]: https://p403n1x87.github.io/the-austin-tui-way-to-resourceful-text-based-user-interfaces.html\n',
    'author': 'Gabriele N. Tornetta',
    'author_email': 'phoenix1987@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/P403n1x87/austin-tui',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
