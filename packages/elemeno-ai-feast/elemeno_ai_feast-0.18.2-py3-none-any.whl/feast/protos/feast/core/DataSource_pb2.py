# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: feast/core/DataSource.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from feast.protos.feast.core import DataFormat_pb2 as feast_dot_core_dot_DataFormat__pb2
from feast.protos.feast.types import Value_pb2 as feast_dot_types_dot_Value__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1b\x66\x65\x61st/core/DataSource.proto\x12\nfeast.core\x1a\x1b\x66\x65\x61st/core/DataFormat.proto\x1a\x17\x66\x65\x61st/types/Value.proto\"\x86\x0e\n\nDataSource\x12/\n\x04type\x18\x01 \x01(\x0e\x32!.feast.core.DataSource.SourceType\x12?\n\rfield_mapping\x18\x02 \x03(\x0b\x32(.feast.core.DataSource.FieldMappingEntry\x12\x1e\n\x16\x65vent_timestamp_column\x18\x03 \x01(\t\x12\x1d\n\x15\x64\x61te_partition_column\x18\x04 \x01(\t\x12 \n\x18\x63reated_timestamp_column\x18\x05 \x01(\t\x12\x1e\n\x16\x64\x61ta_source_class_type\x18\x11 \x01(\t\x12:\n\x0c\x66ile_options\x18\x0b \x01(\x0b\x32\".feast.core.DataSource.FileOptionsH\x00\x12\x42\n\x10\x62igquery_options\x18\x0c \x01(\x0b\x32&.feast.core.DataSource.BigQueryOptionsH\x00\x12<\n\rkafka_options\x18\r \x01(\x0b\x32#.feast.core.DataSource.KafkaOptionsH\x00\x12@\n\x0fkinesis_options\x18\x0e \x01(\x0b\x32%.feast.core.DataSource.KinesisOptionsH\x00\x12\x42\n\x10redshift_options\x18\x0f \x01(\x0b\x32&.feast.core.DataSource.RedshiftOptionsH\x00\x12I\n\x14request_data_options\x18\x12 \x01(\x0b\x32).feast.core.DataSource.RequestDataOptionsH\x00\x12\x44\n\x0e\x63ustom_options\x18\x10 \x01(\x0b\x32*.feast.core.DataSource.CustomSourceOptionsH\x00\x12\x44\n\x11snowflake_options\x18\x13 \x01(\x0b\x32\'.feast.core.DataSource.SnowflakeOptionsH\x00\x1a\x33\n\x11\x46ieldMappingEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1aj\n\x0b\x46ileOptions\x12+\n\x0b\x66ile_format\x18\x01 \x01(\x0b\x32\x16.feast.core.FileFormat\x12\x10\n\x08\x66ile_url\x18\x02 \x01(\t\x12\x1c\n\x14s3_endpoint_override\x18\x03 \x01(\t\x1a\x33\n\x0f\x42igQueryOptions\x12\x11\n\ttable_ref\x18\x01 \x01(\t\x12\r\n\x05query\x18\x02 \x01(\t\x1aj\n\x0cKafkaOptions\x12\x19\n\x11\x62ootstrap_servers\x18\x01 \x01(\t\x12\r\n\x05topic\x18\x02 \x01(\t\x12\x30\n\x0emessage_format\x18\x03 \x01(\x0b\x32\x18.feast.core.StreamFormat\x1a\x66\n\x0eKinesisOptions\x12\x0e\n\x06region\x18\x01 \x01(\t\x12\x13\n\x0bstream_name\x18\x02 \x01(\t\x12/\n\rrecord_format\x18\x03 \x01(\x0b\x32\x18.feast.core.StreamFormat\x1a?\n\x0fRedshiftOptions\x12\r\n\x05table\x18\x01 \x01(\t\x12\r\n\x05query\x18\x02 \x01(\t\x12\x0e\n\x06schema\x18\x03 \x01(\t\x1aR\n\x10SnowflakeOptions\x12\r\n\x05table\x18\x01 \x01(\t\x12\r\n\x05query\x18\x02 \x01(\t\x12\x0e\n\x06schema\x18\x03 \x01(\t\x12\x10\n\x08\x64\x61tabase\x18\x04 \x01(\t\x1a,\n\x13\x43ustomSourceOptions\x12\x15\n\rconfiguration\x18\x01 \x01(\x0c\x1a\xb5\x01\n\x12RequestDataOptions\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x45\n\x06schema\x18\x02 \x03(\x0b\x32\x35.feast.core.DataSource.RequestDataOptions.SchemaEntry\x1aJ\n\x0bSchemaEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12*\n\x05value\x18\x02 \x01(\x0e\x32\x1b.feast.types.ValueType.Enum:\x02\x38\x01\"\xb3\x01\n\nSourceType\x12\x0b\n\x07INVALID\x10\x00\x12\x0e\n\nBATCH_FILE\x10\x01\x12\x13\n\x0f\x42\x41TCH_SNOWFLAKE\x10\x08\x12\x12\n\x0e\x42\x41TCH_BIGQUERY\x10\x02\x12\x12\n\x0e\x42\x41TCH_REDSHIFT\x10\x05\x12\x10\n\x0cSTREAM_KAFKA\x10\x03\x12\x12\n\x0eSTREAM_KINESIS\x10\x04\x12\x11\n\rCUSTOM_SOURCE\x10\x06\x12\x12\n\x0eREQUEST_SOURCE\x10\x07\x42\t\n\x07optionsJ\x04\x08\x06\x10\x0b\x42X\n\x10\x66\x65\x61st.proto.coreB\x0f\x44\x61taSourceProtoZ3github.com/feast-dev/feast/sdk/go/protos/feast/coreb\x06proto3')



_DATASOURCE = DESCRIPTOR.message_types_by_name['DataSource']
_DATASOURCE_FIELDMAPPINGENTRY = _DATASOURCE.nested_types_by_name['FieldMappingEntry']
_DATASOURCE_FILEOPTIONS = _DATASOURCE.nested_types_by_name['FileOptions']
_DATASOURCE_BIGQUERYOPTIONS = _DATASOURCE.nested_types_by_name['BigQueryOptions']
_DATASOURCE_KAFKAOPTIONS = _DATASOURCE.nested_types_by_name['KafkaOptions']
_DATASOURCE_KINESISOPTIONS = _DATASOURCE.nested_types_by_name['KinesisOptions']
_DATASOURCE_REDSHIFTOPTIONS = _DATASOURCE.nested_types_by_name['RedshiftOptions']
_DATASOURCE_SNOWFLAKEOPTIONS = _DATASOURCE.nested_types_by_name['SnowflakeOptions']
_DATASOURCE_CUSTOMSOURCEOPTIONS = _DATASOURCE.nested_types_by_name['CustomSourceOptions']
_DATASOURCE_REQUESTDATAOPTIONS = _DATASOURCE.nested_types_by_name['RequestDataOptions']
_DATASOURCE_REQUESTDATAOPTIONS_SCHEMAENTRY = _DATASOURCE_REQUESTDATAOPTIONS.nested_types_by_name['SchemaEntry']
_DATASOURCE_SOURCETYPE = _DATASOURCE.enum_types_by_name['SourceType']
DataSource = _reflection.GeneratedProtocolMessageType('DataSource', (_message.Message,), {

  'FieldMappingEntry' : _reflection.GeneratedProtocolMessageType('FieldMappingEntry', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_FIELDMAPPINGENTRY,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.FieldMappingEntry)
    })
  ,

  'FileOptions' : _reflection.GeneratedProtocolMessageType('FileOptions', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_FILEOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.FileOptions)
    })
  ,

  'BigQueryOptions' : _reflection.GeneratedProtocolMessageType('BigQueryOptions', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_BIGQUERYOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.BigQueryOptions)
    })
  ,

  'KafkaOptions' : _reflection.GeneratedProtocolMessageType('KafkaOptions', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_KAFKAOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.KafkaOptions)
    })
  ,

  'KinesisOptions' : _reflection.GeneratedProtocolMessageType('KinesisOptions', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_KINESISOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.KinesisOptions)
    })
  ,

  'RedshiftOptions' : _reflection.GeneratedProtocolMessageType('RedshiftOptions', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_REDSHIFTOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.RedshiftOptions)
    })
  ,

  'SnowflakeOptions' : _reflection.GeneratedProtocolMessageType('SnowflakeOptions', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_SNOWFLAKEOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.SnowflakeOptions)
    })
  ,

  'CustomSourceOptions' : _reflection.GeneratedProtocolMessageType('CustomSourceOptions', (_message.Message,), {
    'DESCRIPTOR' : _DATASOURCE_CUSTOMSOURCEOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.CustomSourceOptions)
    })
  ,

  'RequestDataOptions' : _reflection.GeneratedProtocolMessageType('RequestDataOptions', (_message.Message,), {

    'SchemaEntry' : _reflection.GeneratedProtocolMessageType('SchemaEntry', (_message.Message,), {
      'DESCRIPTOR' : _DATASOURCE_REQUESTDATAOPTIONS_SCHEMAENTRY,
      '__module__' : 'feast.core.DataSource_pb2'
      # @@protoc_insertion_point(class_scope:feast.core.DataSource.RequestDataOptions.SchemaEntry)
      })
    ,
    'DESCRIPTOR' : _DATASOURCE_REQUESTDATAOPTIONS,
    '__module__' : 'feast.core.DataSource_pb2'
    # @@protoc_insertion_point(class_scope:feast.core.DataSource.RequestDataOptions)
    })
  ,
  'DESCRIPTOR' : _DATASOURCE,
  '__module__' : 'feast.core.DataSource_pb2'
  # @@protoc_insertion_point(class_scope:feast.core.DataSource)
  })
_sym_db.RegisterMessage(DataSource)
_sym_db.RegisterMessage(DataSource.FieldMappingEntry)
_sym_db.RegisterMessage(DataSource.FileOptions)
_sym_db.RegisterMessage(DataSource.BigQueryOptions)
_sym_db.RegisterMessage(DataSource.KafkaOptions)
_sym_db.RegisterMessage(DataSource.KinesisOptions)
_sym_db.RegisterMessage(DataSource.RedshiftOptions)
_sym_db.RegisterMessage(DataSource.SnowflakeOptions)
_sym_db.RegisterMessage(DataSource.CustomSourceOptions)
_sym_db.RegisterMessage(DataSource.RequestDataOptions)
_sym_db.RegisterMessage(DataSource.RequestDataOptions.SchemaEntry)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\020feast.proto.coreB\017DataSourceProtoZ3github.com/feast-dev/feast/sdk/go/protos/feast/core'
  _DATASOURCE_FIELDMAPPINGENTRY._options = None
  _DATASOURCE_FIELDMAPPINGENTRY._serialized_options = b'8\001'
  _DATASOURCE_REQUESTDATAOPTIONS_SCHEMAENTRY._options = None
  _DATASOURCE_REQUESTDATAOPTIONS_SCHEMAENTRY._serialized_options = b'8\001'
  _DATASOURCE._serialized_start=98
  _DATASOURCE._serialized_end=1896
  _DATASOURCE_FIELDMAPPINGENTRY._serialized_start=894
  _DATASOURCE_FIELDMAPPINGENTRY._serialized_end=945
  _DATASOURCE_FILEOPTIONS._serialized_start=947
  _DATASOURCE_FILEOPTIONS._serialized_end=1053
  _DATASOURCE_BIGQUERYOPTIONS._serialized_start=1055
  _DATASOURCE_BIGQUERYOPTIONS._serialized_end=1106
  _DATASOURCE_KAFKAOPTIONS._serialized_start=1108
  _DATASOURCE_KAFKAOPTIONS._serialized_end=1214
  _DATASOURCE_KINESISOPTIONS._serialized_start=1216
  _DATASOURCE_KINESISOPTIONS._serialized_end=1318
  _DATASOURCE_REDSHIFTOPTIONS._serialized_start=1320
  _DATASOURCE_REDSHIFTOPTIONS._serialized_end=1383
  _DATASOURCE_SNOWFLAKEOPTIONS._serialized_start=1385
  _DATASOURCE_SNOWFLAKEOPTIONS._serialized_end=1467
  _DATASOURCE_CUSTOMSOURCEOPTIONS._serialized_start=1469
  _DATASOURCE_CUSTOMSOURCEOPTIONS._serialized_end=1513
  _DATASOURCE_REQUESTDATAOPTIONS._serialized_start=1516
  _DATASOURCE_REQUESTDATAOPTIONS._serialized_end=1697
  _DATASOURCE_REQUESTDATAOPTIONS_SCHEMAENTRY._serialized_start=1623
  _DATASOURCE_REQUESTDATAOPTIONS_SCHEMAENTRY._serialized_end=1697
  _DATASOURCE_SOURCETYPE._serialized_start=1700
  _DATASOURCE_SOURCETYPE._serialized_end=1879
# @@protoc_insertion_point(module_scope)
