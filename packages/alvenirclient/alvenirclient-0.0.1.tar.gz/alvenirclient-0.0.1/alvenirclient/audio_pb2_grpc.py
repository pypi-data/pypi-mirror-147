# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import audio_pb2 as audio__pb2


class TranscriptionAPIServiceStub(object):
    """The Speech recognition service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TranscribeAudioStream = channel.stream_unary(
                '/audio.TranscriptionAPIService/TranscribeAudioStream',
                request_serializer=audio__pb2.AudioRequest.SerializeToString,
                response_deserializer=audio__pb2.AudioResponse.FromString,
                )
        self.TranscribeRealTimeAudioStream = channel.stream_stream(
                '/audio.TranscriptionAPIService/TranscribeRealTimeAudioStream',
                request_serializer=audio__pb2.AudioRequest.SerializeToString,
                response_deserializer=audio__pb2.AudioResponse.FromString,
                )


class TranscriptionAPIServiceServicer(object):
    """The Speech recognition service definition.
    """

    def TranscribeAudioStream(self, request_iterator, context):
        """Transcribe audio from client and return a transcription response. (client streaming RPC)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TranscribeRealTimeAudioStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranscriptionAPIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TranscribeAudioStream': grpc.stream_unary_rpc_method_handler(
                    servicer.TranscribeAudioStream,
                    request_deserializer=audio__pb2.AudioRequest.FromString,
                    response_serializer=audio__pb2.AudioResponse.SerializeToString,
            ),
            'TranscribeRealTimeAudioStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TranscribeRealTimeAudioStream,
                    request_deserializer=audio__pb2.AudioRequest.FromString,
                    response_serializer=audio__pb2.AudioResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'audio.TranscriptionAPIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TranscriptionAPIService(object):
    """The Speech recognition service definition.
    """

    @staticmethod
    def TranscribeAudioStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/audio.TranscriptionAPIService/TranscribeAudioStream',
            audio__pb2.AudioRequest.SerializeToString,
            audio__pb2.AudioResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TranscribeRealTimeAudioStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/audio.TranscriptionAPIService/TranscribeRealTimeAudioStream',
            audio__pb2.AudioRequest.SerializeToString,
            audio__pb2.AudioResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
