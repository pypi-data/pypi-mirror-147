"""
Artifacts are simple dataclasses describing single datapoints.
"""

from dataclasses import dataclass
from enum import Enum
from io import BytesIO
from typing import Union

from PIL import Image

from aidkit_client.configuration import get_api_client
from aidkit_client.exceptions import AidkitClientError


class ArtifactType(Enum):
    """
    Possible types of an artifact.
    """

    TEXT = 1
    IMAGE = 2


@dataclass
class Artifact:
    """
    An artifact is a data point stored on an aidkit server, either uploaded by
    the user or generated by aidkit.
    """

    url: str
    type: ArtifactType

    @classmethod
    def from_url(cls, url: str) -> "Artifact":
        """
        Create an artifact from a url, by guessing the type based on the url
        suffix.

        :param url: Url where the artifact resides.
        :return: Instance of an Artifact with the given url.
        :raises AidkitClientError: If the artifact type cannot be inferred from
            the url suffix.
        """
        url_suffix = url.rsplit(".", maxsplit=1)[-1]
        if url_suffix == "txt":
            artifact_type = ArtifactType.TEXT
        elif url_suffix == "png":
            artifact_type = ArtifactType.IMAGE
        else:
            raise AidkitClientError(f"Cannot infer artifact type from url suffix {url_suffix}.")
        return cls(url=url, type=artifact_type)

    async def fetch_artifact(self) -> Union[str, Image.Image]:
        """
        Fetch the artifact from the url.

        :raises AidkitClientError: If the response of the aidkit server is invalid.
        :return: Fetched artifact from the given URL. Depending on whether the
            referenced artifact is a text- or an image artifact, the returned
            object is either a string or a pillow image.
        """
        api_service = get_api_client()
        response = await api_service.get_from_cdn(self.url)
        artifact_file_type = self.url.rsplit(".", maxsplit=1)[-1]
        content = response.body_dict_or_error(f"Could not fetch artifact at url {self.url}")[
            "content"
        ]
        if not isinstance(content, bytes):
            raise AidkitClientError(
                f"Response body-content must be bytes but was type {type(content)}"
            )
        if self.type == ArtifactType.TEXT:
            return content.decode("utf-8")

        if self.type == ArtifactType.IMAGE:
            return Image.open(BytesIO(content))

        raise AidkitClientError(
            f"Unknown artifact type received. "
            f"Valid are 'png' and 'txt' but received '{artifact_file_type}'."
        )
