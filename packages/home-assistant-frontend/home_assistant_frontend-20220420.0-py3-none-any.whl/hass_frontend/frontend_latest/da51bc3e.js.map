{"version":3,"file":"da51bc3e.js","mappings":";;;AA2BA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;;AC2BA;;;AAGA;AACA;;;;AAIA;AAEA;AAGA;;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzCA","sources":["webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-system-navigation.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-navigation-list\";\nimport { CloudStatus } from \"../../../data/cloud\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\n\n@customElement(\"ha-config-system-navigation\")\nclass HaConfigSystemNavigation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ attribute: false }) public cloudStatus?: CloudStatus;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  protected render(): TemplateResult {\n    const pages = configSections.general.map((page) => ({\n      ...page,\n      name: page.translationKey\n        ? this.hass.localize(page.translationKey)\n        : page.name,\n    }));\n\n    return html`\n      <hass-subpage\n        back-path=\"/config\"\n        .header=${this.hass.localize(\"ui.panel.config.dashboard.system.title\")}\n      >\n        <ha-config-section\n          .narrow=${this.narrow}\n          .isWide=${this.isWide}\n          full-width\n        >\n          <ha-card>\n            ${this.narrow\n              ? html`<div class=\"title\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.dashboard.system.title\"\n                  )}\n                </div>`\n              : \"\"}\n            <ha-navigation-list\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .pages=${pages}\n            ></ha-navigation-list>\n          </ha-card>\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          margin-bottom: env(safe-area-inset-bottom);\n        }\n        :host(:not([narrow])) ha-card {\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n\n        ha-config-section {\n          margin: auto;\n          margin-top: -32px;\n          max-width: 600px;\n        }\n\n        ha-card {\n          overflow: hidden;\n        }\n\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n\n        :host([narrow]) ha-card {\n          border-radius: 0;\n          box-shadow: unset;\n        }\n\n        :host([narrow]) ha-config-section {\n          margin-top: -42px;\n        }\n\n        ha-navigation-list {\n          --navigation-list-item-title-font-size: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-system-navigation\": HaConfigSystemNavigation;\n  }\n}\n"],"names":[],"sourceRoot":""}