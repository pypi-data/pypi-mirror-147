import base64,discord
import requests, random, time, string, hashlib,hmac,sys,uuid,json,os,queue,enum,subprocess
from datetime import datetime
from discord import Webhook, RequestsWebhookAdapter
from typing import Dict, List
import calendar
if sys.version_info.major == 3:
    import urllib.parse
IG_SIG_KEY = '4f8732eb9ba7d1c8e8897a75d6474d4eb3f5279137431b2aafb71fafe2abe178'
SIG_KEY_VERSION = '4'
banner = """
 ___    ___ ___      ____    ___   ______ 
|   \  |   |   |    |    \  /   \ |      |
|    \ | _   _ |    |  o  )|     ||      |
|  D  ||  \_/  |    |     ||  O  ||_|  |_|
|     ||   |   |    |  O  ||     |  |  |  
|     ||   |   |    |     ||     |  |  |  
|_____||___|___|    |_____| \___/   |__|  
                                         
     ~~ Made by joshua @crackled on tele~~    

"""
uuids = ['dd50747b-18e5-4058-8b07-a6a9a7531f73', '7f2480df-c17b-4798-90f2-0536de43dd04', '0cc66121-f916-43ff-9240-fe64ffe2152a', '6c938633-9ed5-474e-969d-9765ed206cad', '29b76f00-7aef-4560-8f64-ec48ef89e8c8', 
'c9fd8c42-af06-46c5-ab9d-f0c1bf3fe195', '2e7d7649-f023-49b0-a65d-984ab42cdaa2', 'c774d1e5-7129-431d-9cc1-e99ba4f7b6ae', '509dd480-5e84-46be-8bca-db3ef32c4732', 'cc57ae94-a4cc-4bd2-b823-f6177e2d12cd', '04a3e179-7ba1-41e6-8ee2-5692a8e79aa2', '2971dd02-0b2f-4ed9-a623-979edbaf47b7', '60cfb1a6-7600-4520-8a5a-083d2bc481f5', 'dbfd9076-0ebd-4460-a597-84423e4e7da6', '412aad5f-743d-44c6-96c1-b8db0d970f76', '68c2bc76-60ec-4019-9d0e-20c72bb35fba', '0894c4ed-71d1-4b49-9a0e-462971923907', '32c05003-c8f6-4168-aeb4-24180fdee99c', '58236fcb-8278-4f6b-8434-a79048a13ac0', 'e47c15a6-0391-4b51-9a45-97471a1cc1cd', '12e7574d-75b9-4acd-af7e-b97d748fb2da', '55205742-9c09-4396-b033-b9efa5a29ea5', '74769968-2721-4165-8ac6-6cf9e08cfc00', 'fec6f893-5851-4238-8e57-3ea2e572cb5b', '86c0ee32-c3de-4c03-b11d-01788c59a8df', '820dfb0d-285d-44b2-96bc-006365e37ad1', 'b40bfb9b-c055-4be2-be81-72790edbb1ce', 'b4c781f4-9116-41a3-a906-4506d668ebcc', 'a8e0b98f-299b-4ae6-80d6-287388634995', 'c1a58c0d-5204-4dd4-bd23-f19fed420a76', '90b1c6e6-3d6d-4f13-a5ad-2835b7f6a4e9', 'f75d5435-0947-4251-9f16-01ca8d0f84b1', '06f3885a-faeb-48b6-850c-c72b0a86c924', '8459ea7b-09c1-43a8-9981-3c6b34c12edb', '361eea08-f1db-43b8-84ea-927cbbf595fd', 'c238ee54-7863-457a-b0dd-5b156f57c5f0', 'b28123c1-7923-433e-a010-87c3181b74aa', '783f858e-f686-414b-b76f-c4343e35691b', '21c3da85-d96f-41f4-b933-4cccdad6ffce', '804b6065-02c1-45a0-87d0-df0ed2356957', '5fabf67c-6048-47f1-b3d3-6e8e6cca7f34', 'ccaed570-f143-4892-8db3-a14dd1e32c24', '1b973f7c-b4d5-443e-9979-a42e3c5deb7b', '7e555eae-8bb7-4281-95fa-27b692a99a6f', 'e154f218-0205-4d05-a604-0a0be0d91df2', '4c57552e-20a2-4a31-bf0d-032104116379', 'f9d54456-9abb-4830-a2ef-c15a2dcc21bf', '20183723-5521-454c-bca5-91561df4918f', 'fb6ad35d-f559-4906-84f4-9fbbde6ee122', '9ad7912a-9be4-4ce6-bea2-bd3754851487', 'e53c17fb-7ceb-4938-aa20-4244141f7fd9', '78a0d5bd-c510-4c1d-adfa-1d3cff78dd10', '9271bb1b-5575-48b6-86f8-ca1772d38b78', '8d7ded6c-27ce-45b7-ad8b-3b007d017e9c', '593a8091-e9b1-4130-b04f-1d9715ebe384', '08144998-5d69-4788-ba0f-36a8fefcbc0a', '9bd6bf67-c2d9-46b4-9602-e88877207c4d', '3ed0b382-6171-41ef-8a58-a471f8ef6319', '659b2e82-c82d-4e05-b210-d979b01177b4', '91472258-6559-4651-a55b-4d5b4f1090b6', '8068b2ed-dcd3-453e-bdaa-f35912d1d0a4', '5c2c39dd-7889-47c0-b6e5-8d9dbabfe580', '15c5e6c5-2e31-4ac5-a714-575ffbdf655a', '2bbd54b5-ff9d-43a6-ac34-2a1ee030078a', 'dc71174d-1b02-4d3b-894b-7a78c534a82b', '89ea0ef3-f297-4db4-b113-432ebf25a58d', '633baca7-5c38-4875-a2e4-3a6f878f37b6', '423657fb-d9bf-4888-b19d-1ac7a947062c', '0c9f65a2-3b1b-4e09-a102-dd8519e42f9c', '91ea29d0-39d8-4800-b66a-1145b74e83a7', '20441f11-f6dd-4781-bc86-2f7bc0dd3abc', 'c54aa97c-0b95-45ab-93c6-587541f9f2a0', '907183d4-37b0-4e20-8cf7-fd54acbd1df9', 'bbad7c34-748b-49a0-be46-a6d14a2a88e3', '89451a29-361d-40eb-aea1-ce748e0f9559', 'c30a8729-c837-4906-b3b5-9b6030f424b6', 'bce9bdeb-f3f2-4aa9-b568-845e73fe8e7b', '26929845-2d80-4dd2-9f3d-83a5485b1ac8', '05b4dc03-4a79-49a5-8703-3f8ce14286a6', '8ebee139-dec5-464a-96fe-72f639b410ef', '897e8b2f-553c-4aba-9cc2-0456357337ff', 'eec1cb39-3deb-4139-ab94-2b3122818a48', '04e05f6e-c714-4a63-9230-32ed864ebb6c', 'e69e2bd2-8d95-44a2-9f32-c16690a8cf29', 'bcf72722-116f-43e4-b068-47e9d6548c7d', '2afbdf4f-fabd-4a7a-8d29-4e40555aaf1f', '2a2c4d15-07df-4e7c-9143-0c16f31a8483', '059ae0fc-b57a-458c-92e0-6d1d86b923f2', '6458b735-9cb2-4822-bf4f-83b6c08c77ae', 'cc5489a6-5849-41f0-8eb4-24a37b3881cf', '46750aee-e298-4ba3-90e3-da4cc10622aa', 'ab79ab10-095d-4e1a-bce2-3489ebcf2f4b', '2357bac8-0fc6-40b4-85c4-591984d250f6', 'b55b5329-2370-49e3-816e-169c1e00cc7b', '13201c9d-8d9a-4115-b000-d74ee4c6c1e6', 'fec97003-f8d0-4f83-916d-28cb46df2248', '0d39899e-ffb3-484a-a263-48342dee93f5', 'c0909394-66a1-49b2-9cd2-6d076a2e009d', '6735c15c-e5d9-4b4f-8111-0e08b95007ff', 'bcc6a5d1-9e7e-4c5d-ba34-f25aba94f358', 'fe4bfa04-71b1-4fe3-a2aa-cfd5fa703bb3', 'da27e03b-5814-43a1-9193-cef8958f4a3b', '27646e34-a5b5-40a9-aae8-a80b6317887e', '121d86a6-77aa-4da6-8061-8f3589c159b2', '4d023a3e-b307-4285-b762-9638df295c16', 'a9ca12ea-cbd8-46d8-88e1-aaeec2e1af82', 'aba434f3-ef59-45b2-bc7b-b96d5f4f483d', 'f6cbbdaa-67ad-442a-a6a9-641d3479f998', '62a10f4b-0e99-4fba-879c-011cad984263', '22023536-2ba2-401f-accc-484e97d9b603', '26483052-599c-4a4f-bce0-f2ef45fd0a0a', '1e6e51fe-7f56-4f03-9d2c-a443c7ac5ac7', '38033188-dfb3-4b19-a944-4f931e331cba', 'b0b4a2b1-b9d4-41d4-96f3-60f924acb940', '0374a750-6ed4-4124-8ba8-251390861254', 'b98377bb-0b99-46e0-ab04-1ff28e61350a', 'fab7a2b4-ce83-4829-a2c8-b73c81af9f14', '366fed2f-4afd-4eb0-8949-2e38f85a9ddc', 'a65e1711-17ce-4661-8d2a-7206fce5c253', 'eac2a760-c740-46d1-aed3-9ea677173a9c', 'aba4ddc3-0474-4a13-8bf6-e180c36e5bf5', 'd43f0fa4-c626-4e9f-bc42-4676be634563', 'ff9c64fd-700b-42f1-821a-848e546c3a6d', 'b17361e8-7377-46ba-9fa6-c65386520bd9', '3e5e58da-c74c-49b2-b923-15451369697f', '131c0828-adf9-41fc-951f-7ac9b0c41512', '11c5a7dd-e342-4fbd-97f2-445631f5ea23', '894ae337-00b9-4407-851f-8a2e9fa328a1', '7b776d91-d458-4d15-8e11-6f4e576a5c8f', '4235f8a8-66bd-4595-9d2a-bc188a3590b4', '4eec83f5-0f46-47e1-b1e2-2c4c43b4a0f7', 'c17a1245-5cc3-432d-a2ba-5cd547ec71c6', '98aceaa9-17e4-4d0f-a0a8-7c426d9d421a', '5458c0ae-433a-4b35-8b99-806f8d6e40f8', '51fba40c-3be0-4b9c-a983-54024bd5150c', 'fee45123-8878-4a04-8fcc-973095452fc5', '8e5176cf-976b-4006-874c-0b41aa8d6b7d', '37c77141-a6de-4b97-a2f5-f6250e60b093', 'f2922203-a817-4555-a08c-e83cef79cac8', '70b11836-9cfa-4b1b-ae6a-5eea74dfa5f7', '0c03cf33-9b1c-41b4-be84-540d3b3d872c', 'd6423da4-ee4a-4e8f-b16f-36b95b639caa', 'bfc73643-df1e-4909-a69a-6c600b276049', '93f5cdbf-3c1e-4f31-9d9b-40d66b5d8bed', '7da4350e-cd9e-4b27-abcc-2fe82c4b649a', 'a0f0c18c-02dc-4d77-8c1e-c4098208d78f', '05f5c1b2-311f-4ada-9aae-6f7f05e18484', 'c9626ed2-7d91-4780-9bd3-764b77e106e1', '4c876921-6ea9-4c56-a718-29bd1b3906b6', '46179a73-b38c-4024-bc8c-5065de275f11', '22b9dbba-7dbe-4ad2-874d-9844361f1ea8', '7a9ebe16-bbcf-409f-b934-bf6c006a5260', '6ba7b0c9-2d8a-430e-93a9-3f3672860422', 'f781cae0-136f-4edf-b5d4-b4d4e03d0ca6', 'c86ae4c4-e53a-4112-938f-91e424c2e187', '74668801-fad9-4a9a-96dd-f198fb18fae9', '1b6817be-d2fa-4650-97cb-2193fbb7a7f9', '605ad11d-65fe-42a1-ad1c-cb567efc4c90', '4eb88005-02e0-4294-a655-d0485f6621c5', '7735706d-bf84-44ba-87ac-f18c5efb12d9', '67b63969-8e5b-45b1-a6eb-d08494a88d47', '47747216-75f5-438d-b5c2-191f655d64e3', '859b2133-3c33-41f0-935b-3746ecb9c75e', 'b70b08d6-a8fb-440d-b1a4-d9321dca41b0', 'be05623b-7ed1-429e-a080-3d8b3700ffa6', '11fa1f8b-3066-44a3-b2a2-b1c5fb8ddd48', '9d193fcc-5056-4221-b387-33236c0eb69d', '9af7e947-006d-47b0-b317-8a6a64c06578', '7a04b7be-656e-4b1f-979c-56b17662d583', '0b55beef-83a9-4b4f-b674-a1fda3a0a2ab', '3b93fb9e-e42a-4395-80a8-c8c96e4b6e73', 'ad5c3a86-a138-4acb-9198-d6c2410eb7c1', 'fe3b0cb7-8ccb-49ba-9329-791c4df142de', '3319b472-00ba-4ea8-8658-ccd12697f0e8', '996bc370-dbc7-4aa3-b297-8bb4ddad8400', 'bd766870-4be8-402f-8ccb-5f1a11564950', 'd8399d80-92fa-4fc1-9c68-21e557932c40', '5ef0e059-014a-481b-b6d4-e207259cf651', '8fad69c5-fd15-4a7c-8e0c-b5b8edeb8c2a', 'c6069cfc-68ca-4c73-8076-13426842b14e', '235405e2-54b9-4a74-9400-20afe28ba96e', '94b4046c-c920-41d9-a986-a6e770a4ea7d', '10a4de7b-7bfa-4d36-afdd-aedb4fb18548', '4b9222f1-7256-4f75-b0c2-b2ea988a6e7a', 'cfaee242-d343-47c0-8482-a7e926e1d81c', '8469e46d-4759-40dd-95cc-94763e814986', '8e80f7a2-1e0c-48fb-bc75-7308cb5f0bc2', '132f341b-45a4-4311-a77f-a978e1dcf1fa', '9a249c74-ecab-4a75-99b1-3a53048a6746', '20d17203-ad36-4a97-b584-1c063a37cabb', '7cf373b1-77fa-4567-b4c6-81fca8f8fc95', 'aaf4dd12-bd85-475d-bb61-882943c563c2', '279cae62-abd2-49f9-b24a-d21803bfa1b5', '983c9dc2-8406-4d02-8157-190696a00492', 'c8d3ec9f-74eb-4e77-8b10-7cf654d0104a', '12b01e9e-1197-4819-b478-9adb80a75ed5', '08d1d8fa-2234-4081-8cee-66f9d94db74f', '68e59291-29cd-4f02-8cbb-766d8c3396ba', '92d82420-c36f-49d8-b143-960aa2e9d114', 'e4c9a833-b31f-45ff-aa8f-d15d251d0ee5', 'f371073a-6a89-4f13-b92d-e06fd5a5cf7e', 'a5fb0fdd-4b7a-4870-828a-aaf1af12bdb4', '5da6c297-9723-4f81-af39-35703b869601', '55d814b8-c26d-4447-b42b-e4d88259f866', '33380a9b-637b-460d-abda-66d7a24fe8e5', '9cfc058c-b538-4044-aff6-8bed66b766ad', 
'3cf2ee59-7169-4deb-a9a6-51012e568b66', '0e481d50-fa3c-4c10-b522-661269045e94', '900531a9-205f-4ce0-b357-32e2d4bbdf6d', '5b456de0-7687-4781-93e5-c97830dfb211', 'dd431895-894f-46c1-8e8a-82c15ac61e17', '4953c567-0ead-4260-97bd-adc73c8bfa0f', 'e09a52a9-6e80-4af2-94d5-a71f3187bc9e', 'c288a900-5dc2-42cb-9432-aae10eeb5359', 'ce3a859e-131a-47c5-b160-fdc6aabc430a', 'a7ccd883-5b65-405e-9937-28b234415c1a', 'ff4bcb58-a8c5-4c6f-8b6f-6bcc2879d753', '3360cd26-bd40-4075-9a06-aa36d83bfc24', '2ebde2c5-5b4b-425f-bc66-9955478e9b99', '43d3f5d4-2986-4228-aa56-62907f207c62', 'e4ac85d0-6233-407f-94d6-b49f3e9d8284', 'a7824e9d-b53c-48e2-9f08-76c88d4edbe1', 'fd93c870-16a1-46dd-ac0c-d7cc64a97543', '88572f8d-cba7-4f34-827c-dd5bcb499c7a', '5fad9e1d-abae-4c77-aaeb-a5016499cb24', 'ce28dfd4-3718-4b39-8db4-dbd72284007e', 'b828979c-871f-4a74-88a3-cbbbcaf636fb', '1af6fba9-e785-4fde-9c6d-d5ebcb634f04', '2b134ba0-2d87-4732-b7ea-395306b8de37', '7c5f42e1-2437-47c7-b99c-8cd98e754f38', '5577885a-84c3-4001-a1be-ef3920c9b93e', '0184ba81-40ff-4ede-8e4a-a68aa74f4085', 'a4777485-d985-4db9-9387-479c432efd60', 'c2bee375-b1e5-412b-83a2-5ae4c709228d', '170e1852-7f53-49d5-99af-316d49463a81', '97a5f3ab-2345-4b66-b402-c332f60b30ac', '04280233-ccb3-4ee5-9e88-73b0be42a39e', '949b93a0-5fa0-48fd-8c06-7b6b794fde59', '4a443567-d25b-4891-99b5-dc9f7b9d286b', '0f184f59-df8b-4636-8136-02d5adb44515', '5dcfa881-cb97-4e6f-b347-0d8df60b03cb', '20caabad-a30f-48e6-b44c-f76251f90b95', '466c2671-39b9-4100-b539-acfce959aa46', '0a60c113-d695-41b8-8040-5fe823765677', 'e8c6d82e-5ad0-456e-a3f1-9bec8255beac', 'a75c7a6b-8f82-48ae-9ce0-57677a859930', '4842b718-f5c2-400b-8fc8-54a85d6bd71a', '965309b2-19bd-46ea-8fc6-d68b5fe50a9a', 'ba6a4016-5df6-4878-bb82-6851b8e40573', '6711f82b-72a7-4b67-b2cc-739798f0d08b', '9cda2b9b-be86-441e-9738-2de734fcedde', 'f331c8f9-5163-472d-96e6-e46d23cdcdea', 'd84c19f5-469e-4d9f-88f6-8bbea6c1718c', '5de262e3-2d1f-4655-9d8f-07143aef7b37', '1d593455-b2eb-443e-9b4d-ea7f5f2c1bca', 'e187c219-a0ee-455d-89c8-402221358870', 'a44606c4-f6aa-467b-8591-6a099b8774cd', '92314c51-79e8-499f-be14-e94242f4d47f', 'd3b1955a-6868-4b30-a471-88a698a9e6d0', '0070976b-9141-4c74-abe3-0fe37b00de94', '1a242c82-3096-419f-8361-a2f12fdc93f2', '8545e3d9-883b-4007-9979-5edd74a24eb4', '73f7f4b4-5125-43e3-a99a-fb954b1901ba', 'd9f9e3ea-0e10-489c-9936-9596a649281b', '1b9e5771-d9ce-410f-b5a0-7467e8c9d7b3', '9075690f-43aa-4191-901d-ca64d77efe15', '4e30486b-2cb5-44dd-abb5-b70d4ce0658f', '62171d5d-3af0-406f-935f-9c6af629ecab', '1e126381-d8ef-4544-8752-247d68c5975e', 'ccf6987e-b37d-4e0e-8900-5d31a2949cff', '10eab190-48fe-4004-ab41-e8a88b235c04', '61d99b6f-a2d7-4283-ab6b-953aac39996c', 'e50e02e1-9883-4718-97da-28d8b5d56b29', '79a994d6-c05c-48f7-b517-b0c315686bdf', '4bb54675-973a-44fe-a8d1-8f077235bf09', '3bb392ef-7f94-42d0-97f9-9c763c0b71ab', 'c6df95e9-acb1-4d7f-aba4-eef62d381a94', 'f66e0e39-5a98-4b29-899d-0695a998aa2b', '4e78a81b-b9fe-4ac3-8ae0-fce88e9f5f54', '1cb99ff9-e0ee-4553-ae6f-854d957fa7ba', 'aa2a2c8b-d105-4a53-ac1f-262a87e13960', '1432a289-3e13-4b66-8f41-c7baeba5a7de', 'f896aa7b-1c0e-4b2b-b7c2-aeeffaf6b786', 'f77e3d84-3766-4e76-a986-6cb73906a5c6', '27414a4a-57e3-48a8-9a6d-57c13c8ec44c', '9a0e2874-9211-4381-b4ab-4bfab83a3fb7', 'fa685ff6-c938-455c-8332-7e2c4ca1edb3', '83e79c67-4511-4560-87bf-ed519e3049d5', '1b975650-edeb-4832-a826-0ea4b057b8da', 'd95a3407-39ae-46d7-8f11-cf7bdebc7c6f', '82f8dea4-5a60-4af8-bbdf-afb54261f902', 'b02fed71-d8d6-46ae-9b1a-ef7a75e8ab35', 'c1736816-2aa7-43a4-a31a-c5d0d5516044', '87b4e862-d528-4340-a436-d56ebf6822aa', 'f9fdc066-6820-4b53-b573-3f830faa2b82', 'dbaceb1b-a513-4653-be73-1e018b5bcfe7', '2969d2c9-4356-4fbc-a6b5-62080a6fd54d', '67a36e69-9ab7-439f-87ca-07ad2a37533e', '2f4c67d5-c052-4db8-a3fd-074acca70da5', '1900a54a-9e41-4f85-a917-6079604a1c95', '0e902a53-1be7-4c10-9cf0-e2ee2dc0925f', 'd0f7570d-f9d6-405c-a913-8ecfc9bce727', 'dbeeec79-b244-46d9-8cc5-b0d78d38806c', '027e14ff-15af-4801-89a1-85fbccd2d161', 'd0484c88-2116-4e80-bb98-aeda5bef1c10', 'a1078d9f-aecc-441d-8095-27eb68e6f71a', '4a349c71-7d3a-4015-bd35-09cc8ebd36b8', 'b12c050b-e1de-4094-9aef-13a29fd5f36a', 'f8c57bbf-df83-46d3-9c60-23bb83b68a47', '247d50d7-153a-4123-8402-53488b070c55', 'a8ed0019-4140-4096-b9fa-c54aff835383', '2f742912-157a-4c69-9f69-ad9ce151dcb5', '43c61325-cb6c-4452-87ac-2bf6bb8c1640', '5a4e4227-bb44-47dc-8a5f-08d43d777655', '9c6b2dfd-99d2-470e-9f52-19148fc5e29b', '7927fcb8-1811-49c7-b27f-1a86fdaddb04', 'c70d8f0e-a03b-42be-ad03-3a46a92a1972', '915ff317-22d0-467e-9cd1-e8d4bedbfdbc', '25190e23-6343-4c3e-a6a3-b3fd203f2d5c', '3344b8fb-cf50-4c41-b0de-bfd546afaf04', 'fad41f56-f12b-4dec-b0f1-daee167708c5', '2325f8e9-6448-4977-b849-499711c3e64a', '47896bf7-66c4-4f71-9787-56c5e01fb501', '7d0c3f57-544a-4dfd-9da2-8ed7219a8f96', '653b8e64-e5e3-4dab-8d55-322b4f6fe2a9', 'ef869481-73ff-408e-9f9c-c6fbe93c68a0', 'fec6b06e-ba21-436f-ae8d-8c7fcd0d19aa', 'c2652da0-4599-4d4a-987f-9111e6baf54a', '853d7d2a-15f8-4b8b-b34f-380331c3f260', 'd83e472d-d7ca-4b1a-8b18-3f763ee806f6', '7816b1a0-5c4e-451e-8e36-e1b7d7360006', 'afe81811-bcb7-439c-82c0-a7e2c3f7524b', 'b0365d19-afa0-4903-a92e-dc37a351945f', 'ec0c947e-aae5-44ac-89a7-86c7ac6c34be', '24291c00-a179-4987-afce-04663c39674f', '0128ec50-eb05-4c95-b370-00684cd609ab', 'b6281bdc-58c4-424f-b024-cdb718a1e45d', '267ea48f-be4a-4da2-95fe-ec2b13e0ff68', '77026e47-26be-436c-a82f-06c6272365d7', '2f0eac3f-3549-4058-814e-f8889c6c116d', 'a69c9a91-2e84-47d8-bdc1-b45ce9446cf7', 'e66f9e8b-e7bd-492e-a142-cb859054bfe2', '7a279e46-1b81-4ba9-b9f9-d16d33a72ddd', '01344d99-95e5-4ff7-abf3-35b133cb6b87', '774b9cfa-1a44-4949-aa18-2bf701074cce', 'bbf57ce2-e12f-4453-bb7b-78520f293af9', 'a98c7c9f-af18-4837-9481-9e11cbdf04ae', '0974d72a-067c-4fb2-ae2e-2c58f61b729b', 'db85fa5b-35eb-406b-a9d7-85878c4e3126', '29ca5903-6afe-4801-9609-6399753e765a', '25479923-a5a5-4cd5-8740-d7f5fcbeb700', 'ca3b6999-0cad-4f6b-bf54-e97f069a7a5b', '3a917548-9ae0-47d0-bd02-8ea91dbd0d2e', '376dbcef-2ecf-4570-8923-fd084d188b22', '4b1b5fa9-7dac-4a4c-9edc-e98cd3cfb9b4', '80df45cc-d26a-41ae-9d35-01b29abb65e2', '1dbc42ed-96f0-4b43-ba75-244494944aa2', 'cdaf3bda-7f4d-4319-92a1-4c12a8740d7c', 'c9272021-b168-415b-867f-d294d4ce0e8c', 'b7bf654b-02c5-4e47-a848-4b7b812c9551', 'a1b7f99e-2f4e-4a47-825a-d54103beb2d6', 'ce3b2ddb-1f4e-4290-b011-a5f5d4a4a303', '5d4750a5-edc0-453e-af51-7f1b1911b6b0', '9be06fa5-cac3-4aa0-8208-9ea53febbc3b', '8c1d2ec7-f7e7-4208-ba96-8401fa1c6a5d', 'f5218ce5-f900-47c7-8904-692ae9970391', '8c941b02-7e57-4741-a5fa-4f139a721de8', '48f21d3c-cc65-40cf-a4f7-3976a1814ddf', 'c6407749-1032-4b80-a93d-0f52961a7a04', '9e2f6512-1f5a-4b88-8637-107a0d61ab81', 'f55903d8-7615-4bc9-976a-5069819c54ce', 'c34bba80-5c58-4d13-acda-4472bce6a362', 'ef214fc8-73d8-4476-843e-ffac2c2c89f3', '51d989f4-7673-4af5-af29-22c49fa22f73', 'f83172fe-2c9f-4dc5-a5e2-79cb121b52cc', '727c3cc1-41d6-40af-a040-7cf4f107bdae', '47187149-c2d3-49b6-8545-2ae7b6b29cbe', '9d17412a-ebf7-4f65-8fa8-a075ed5c9620', '844c57b3-09f4-45a5-9ec8-8674ba27d341', '210c62fb-127f-4103-a4cb-4262a23e7892', 'fc52275c-cbb4-40b8-a916-61d2745979d8', '27100976-4bbe-4f39-8c4a-cefa5c1a3632', 'a4eff534-1046-4faf-9c4f-b075d1d449f6', '263466b4-2b2e-4bd4-ba80-dacd128ce864', '9b83a497-9abd-4412-826e-2b8ab2402d4e', 'edeba39e-aaee-46df-8b9b-246efdc56816', 'bca5249d-1eae-4b63-b8a6-a79a2c5de559', 'e38c755d-3867-4161-8ffb-b313d67972f4', '69d0f732-b35e-40c2-8a63-3ae7be760f14', '76bbbbf4-5399-48ba-984b-ea8286b71db4', '46338bff-404a-4059-9f02-9aabf1132e02', 'ef711d87-d681-4df3-9bc4-607398b8b16e', 'a9469562-c2c5-4204-a153-d8eabfce329d', 'f05c6e6b-08dd-49ec-aed3-5561c2ae4cf6', '6bfb474e-7b3e-4243-a055-5caa199fd91d', '1e3f9f94-64ed-495e-8ad7-26e36e2088bd', '3e9c319c-52b6-4079-b77a-ae1e659533f9', 'def99a8a-7946-455f-8ae9-a959393ef42b', '2217eab4-441a-4056-8b2b-b24e0c7d24ca', '724dbb24-db00-44e8-a088-47d5f37489f7', '5a30f469-3eb8-4513-8c6b-de23f556f509', '1302da41-bea5-4413-bb0d-944fbdb9e5aa', 'fde1528c-4d08-4648-801c-215fdc39f91c', '2e16f1c6-cb4e-4294-90a2-52ceb81e60f7', '9ca0b2a0-ebc4-4788-8a4d-9b3ae32f2b6c', 'a341b165-de52-449d-858d-8a41d74dc9d6', '96794604-d32b-4ecb-bc14-5bfb33dd77aa', 
'ef0e306e-8432-493b-ba5b-991da81bf926', 'b7962880-0059-479a-be38-ca551dd76895', 'a0c44ce0-7471-432b-b829-369de9e0ec1e', '104f75f0-5727-4ba2-b577-4e63a03496a9', '9064a346-d5a8-439b-a821-d660dce43257', '3d29669a-cb36-4429-bf4e-edf6f2ecbd07', 'f5a620f1-6e32-4a66-b64f-a20db616d058', '1db598aa-2532-4dd5-959a-05aa329681a0', '7898cbbc-3125-47e2-9fa5-602f40bd1b16', '9cbbc74a-63f0-4131-ac2b-e6a157b0b236', '022fc503-f210-426a-a0b8-e5fe828b0846', 'ba64f60f-15fb-43e6-8e91-d6f2800d23bc', '0e733f2c-df7c-40f1-8bfc-58f9352eefd4', 'a42caf81-0ffb-422a-9c2e-4f4e3538a802', '437ff51a-765c-4df7-9a19-c35828486019', '767bc949-de46-4156-bdca-aea25dafc1b8', 'c146cb4d-f9a5-4fa4-b540-be07dfa71ab3', '41dcdab1-4a61-4489-9970-01804c0f6077', '0e68da3e-c3fd-42e0-be85-323cf9d5548e', '2c30393f-bf4e-4538-bf69-cf182121dfcc', '5bb1c1ff-9b71-4a3a-85cd-0df5727d6fe8', '16c9f623-a856-4c2d-b77b-4114f5586e19', '5831dc1b-d145-4168-a9f8-cd8967e83e0f', 'bce1323a-9702-4468-8ffe-af16fb7fd1fe', 'bccedbdd-8ffc-414a-b1a8-dbcd5dd88b80', '15d3e18d-c7fc-4145-a6e1-58971895c39f', '12698162-a1ba-42c4-9ad3-60b39b520b0c', 'e6b53181-4c1b-4c7c-a58f-75c7dcdcbb75', '6212f163-5c52-4e01-bc6d-f902c1a94d9e', 'bc5e7f39-60c6-46ed-af5d-4bc4ea8e003e', 'c94c15a6-5bb3-4b6f-801a-3b21bc73895d', 'b3fdaf5d-3e2e-4b34-ac9c-3c67071eea6e', '768afbf4-12b0-4046-a104-04a2ed76d0d3', '8c140d98-ad29-46f1-a453-943f6cdb6d6a', '1a144bd0-e01e-4b9e-9a32-957b3b6ded9d', '440a6d7f-ff13-4ef3-b59f-b8b759088acb', '8674748e-935b-47d2-9e23-a9ee3895e24d', 'b6b7a678-a9c8-4622-a9e8-46d853f77380', 'c6753fe0-b9c0-443e-9f83-498675937258', 'f2bc5e09-24fa-44ac-b54a-1e1a685f5066', '4c408b7b-eb94-4faf-8401-c352cbd324f1', '0766f164-9cfc-4d36-ac31-43129215d694', '0b5bba75-1d43-4737-b285-81a609fb994b', 'ce80cdac-a4f6-47ba-abf9-423adb14d9bd', '5f92aaad-40d3-4ed7-9b8b-eec88a357c22', '2f5727c7-0952-4b7d-99b6-9d6c18ec1a0d', '0a6ee65e-3648-4376-be4d-67eded879a42', '0c16b56a-e591-4234-b448-7e41ea80f2f1', 'ffac4db0-82c1-4c97-9d5b-e59b28643780', '8d8b0469-4689-4f3f-b1d9-14d32d346293', '3ff5d2b7-8ead-4be2-acb3-f4e454b4f402', '74862ab5-a8ca-466d-be68-8253bc10d2bd', 'e69c1ddf-1719-4560-9e53-81acd693db42', '413891ce-8f31-48bb-a454-ccd750aa73cd', 'ad2a6585-4fa5-47aa-970f-5aefae8d8a8b', '9b26d369-32b8-4c6e-b507-f2650f01dc0d', '27764f48-6c1d-4448-b6a2-bc566b8fc4c8', 'df8c4610-a7f7-426b-9750-e8bdc3dd6306', 'eba0ee46-3384-45b2-b78e-24d3b71420f4', 'fd739f81-57f5-42b4-b786-c19761dee12d', '672943b4-1d81-464a-84bd-cca61196a092', '4337a64d-7d2a-483e-ac36-6f4a8e2f3baf', 'bf3a1683-a586-435c-8845-23845cb6e9e1', '9c1afc72-5260-4316-990e-a85d776b4125', 'f76476fe-e791-4ac3-a287-12dfcda7761e', 'd43e7e53-aadb-4456-b8fb-8c26995d3e51', 'bb1911ce-c5ba-4a49-9698-e608c210e52e', '27cfb8d9-67c7-4adb-ac5d-d3bb1227a679', 'bc3c71b3-43ee-4a70-a5fc-416818755ed9', 'e7a59486-9e13-42c5-89ee-7544c802c736', 'b45cb2a5-e9f3-45ee-8f25-e0443269e67c', '08eb6121-89e1-4865-89d2-d7bf908cb5b8', 'e8720afc-00aa-4dfe-a611-b9f166698c5c', 'e405ec8c-abd3-4d8d-97d6-22a0f5007c93', '08706554-41a8-465b-9d4e-43013f17f561', '305f62e1-7e63-457e-8254-f0ee5fe9b8cb', '169a2746-93f4-483d-bbcd-78a3554a1858', '63693060-e06a-462f-b9da-89c3aebe60fc', '27c50571-73b5-4c4c-a4c2-ccf0e3a18d99', 'e48c65d9-457a-4157-b70a-665ad8b6c4ee', '4ac60bda-6af3-45ba-bb81-c7230c55d127', '6df75d5a-62d6-479a-bdde-3ed5f93156e4', 'd762d4eb-faa1-4737-8f82-7ebd030ce6ee', '5ec549e6-3836-4ac0-a372-fe794a64d570', 'c45b5a6a-5aa8-4f58-9c70-bc6fc5699711', '7cceaf4f-da77-4338-8bbf-423a825dc4fe', '96c2605b-688d-4d25-bb9f-d95e09824ee1', '8723d8f7-502b-4f3a-935a-c042a09531a1', '4811d65b-abae-4238-b555-10e5eb9b60b2', '08ecb1b3-0cee-4e9b-b94d-4bdaa705d915', 'c4a67ae3-cd47-41ef-a723-8b6f337ee538', '2516ad61-fd96-4cd1-bed3-0b3939ae5bb3', '4272f1ba-6775-4772-9646-a04413a4d00c', '96a47001-f9b0-4e3d-a23a-c6843b6ba235', 'b8ab16b9-a758-4940-b684-40c4495ff3ad', '8967c009-e7ab-4fe1-83cb-0ef63e8ef78d', 'aef7c6d6-ae6d-4771-8037-f5bf2d7b40e9', '432f07f4-4a57-407c-addc-ef32c5e786e5', '1b39cae3-7383-4777-be74-d17c69314f7c', '05f19ccc-aa89-45a0-b74c-db174dd90691', 'fbd611be-46b1-43e8-8c21-994a2275a093', '8c424dff-9412-4e5c-be0d-2113edd30160', 'afcfbce4-3f93-4124-b067-3fa18accbe27', 'dc82f84c-d0e4-41a7-9c0a-ea1c5dd34875', '9838cdc0-86b1-4073-aa96-bb81216b386d', '4d3759b1-3924-485d-9f22-7cf661d696c0', 'dd8ec930-ae21-48b7-aff5-67eba243a58e', 'c4daff9b-0444-4664-9b26-d9d3243a6d65', '8b80a550-d0f5-482d-bf79-30ffccda08bd', '04c8f02e-fe02-4fb8-8c4c-1da5a6bbbfa1', 'a7128914-01a8-4030-bc75-3d0c4c0323db', 'e4806642-96ff-4f90-b561-ab6a2f39ac84', 'f9046612-46d5-4883-b0eb-8d4e17f5c249', '4a537861-f895-4034-aef3-28f5de14d0a4', '40ac217c-936e-4aa3-8e8e-b9c518fd2d8e', 'b335b781-3084-4112-bc6e-cbe8885c7a18', 'ae121987-ca8e-459a-9fc9-914b10715c23', '6711d236-3754-4716-93b0-0dc5071e4c00', 'fc915abb-b87d-454c-a896-d8eca0cf18e7', '0a44764f-c4e6-4046-ae63-cae0c17dca71', '0397cfd6-dc43-419c-8866-b57e774e1252', '05c2b99f-fa39-4ac2-a5c0-6cf6861f9c23', 'cb58436a-2fc5-4829-8686-c6ded4a7187a', '5285c0af-5a5a-4228-b001-3bebbfeb63a0', 'a9ec365e-fe7a-4681-911f-d7c2346acc28', '56000450-ac3a-4510-ab29-3df41c58fa20', '847ea7a0-880c-4f40-aef5-4337a13cb876', '4dbdb3c5-7a73-4804-a6ef-7bcec559a713', 'b528cf94-1aad-44ea-aa98-c2db98e2b1b2', '702cdd56-8fdc-4c59-93fe-8fbadcdbdc8c', 'cdabdb2e-5dae-4304-a3bd-1d47d4df80ca', '469204bf-ea51-4eef-b048-444fda321dda', '8f57bbc0-a9f3-4765-91f6-926ef441f8f5', '760a0959-a7dd-47f3-b619-c349d176e268', '50bed640-6bdd-4c9f-9ebf-3c58bba93893', '3cb361bb-9785-4c30-9b3a-7bdcd4f6a13f', '23227bd6-2ef1-456b-bd76-618b54458480', '8a35ce18-243d-4f46-a1be-82753ca31bbe', '634ce8b2-d016-49c3-a266-f602d227cc1d', '410537f0-7d27-48b5-9d3e-d38659861b91', '7cbb38b1-129a-48f9-9bdf-50550a2bc8c3', '14a5427a-f085-42c4-ada6-02396e794766', '24894844-9624-4918-8606-8054593ae684', 'eb64bae3-48bb-4327-bb10-13056ba53fd6', 'c255d0ae-5404-4b19-bf3b-17353cf3b43d', '3aa7b979-7d3c-492f-9173-00f74e196e06', '164cdef3-f245-48d0-8005-0351a2b1a665', '503e4dce-0e32-41e7-9928-0069b52cbea7', 'cc8226ad-dcf3-4e79-9461-24820fb9e942', '65d25781-8c0a-4669-858c-55d46abc4a96', '1bc2b9e0-0856-44e3-8672-e70da0efa1ec', '57863dc6-af63-4cc7-94c7-660382cd9445', '01f6346b-2e0d-470b-828e-bb983656b83d', 'ee1baa59-ec1c-4081-ac2a-914d28db243a', '0e022b2c-48f8-47b1-b21b-0666a55e2da8', '28fb0e26-d871-4452-a385-74d2bab41e2a', '2401c6e7-84fb-47b1-82aa-dbf7a2417caf', 'bea1dcda-2434-46f4-9509-096b125cc978', '562ba61b-5acb-462a-a807-a11c910482da', '583b2c83-02bb-43f9-91bb-aa241599ef14', 'a5f08a4c-49b5-4ce1-8980-b0d276406d51', 'b3d95828-fbf3-401a-8cab-b41e18e4ce33', '4c01e47e-9d2a-482a-8b14-5bfab3b10b28', 'df481061-2858-469a-843c-6fde45c0a4ef', '166d5ee0-28f0-4091-87ba-ca42748a35d8', '64428941-57ae-4f86-83a5-33fb312b4e4e', '9a63ba47-4e11-484b-8e6e-f86e1ffd4440', '29865c1c-37bf-463b-b69a-aeceb124552f', 'b51c23ce-8783-4e49-a132-8de3cdf91295', '95515e3f-fa72-4696-ba6e-a6c6ab8b215a', '375c40a0-b8cf-43de-905a-ffa3e7e6ac87', 'c9620f63-c9b3-47a1-8ace-9891035a954c', '5d2b7360-f120-44fb-9c9b-815b84a24a0e', '3287e505-7cbb-4852-9eb1-a627719e82a1', '38f5cce7-d716-4c19-bb46-5c91b674ce84', '0abb3145-806f-4c21-b0a4-236435f49ccd', 'f61532a3-2065-4361-832c-850860bcaef4', '9858b895-0795-4ef5-867e-cd4bce97f53d', '8b449303-9b2e-490d-bca0-a2c889cade6b', '72a93228-4dc6-4170-9b36-06a0db194021', 'a19b5229-1c25-4734-9a39-872625c59844', 'edb00ae8-1542-43e5-bf6b-4c33c3bca762', '66e6e6ff-528f-4c47-9696-12a14f90a69a', 'f5a263dd-2242-455b-b342-ceed91ab0413', 'f39c8b61-bd1b-4b87-9b07-22a2ee0984bd', '48aab5ac-4e32-4c71-99d7-7b22f178f950', 'edb50711-971b-4b8d-a5c3-6b569ef4dee2', '83a7b02a-e4f2-48c6-8b44-26606090c16b', '0949e422-297f-457b-9f8f-e3cb10b9f214', '90bc759a-83a4-40be-9add-876c2951c187', 'd8f2f6ce-ea1d-4f3b-8150-8dbd90d663ed', '0c1082f9-b12d-447f-8c5f-4021ed642710', '03147354-f0ba-45e9-a140-abb934cea6b7', 'e2fe94a3-5705-4390-91f1-782e34b13a23', 'f405c571-5339-4dc0-8a18-38759036f23f', 'a8d59207-4d39-481f-9622-c9328841ca65', 'a25823fc-349e-41f7-9f07-0a3a57171e48', 'f823d415-e0be-4428-ae32-b2858f327070', 'a015151d-2a12-4546-bf45-a5539a2c42a6', 'ae4cfe9b-fa78-4876-8d3d-ef71eef9762c', 'b8f61bda-cb58-43fe-8d82-afacfada1b94', 
'6e58eede-6fa0-4a5a-aee4-c96edf6c18c8', '6584db33-ee62-4435-bbcc-f55d4b605e29', 'a7e596e0-3afb-46f4-bb51-217cfc00d0cf', 'd5a310d3-642e-42ec-950e-4804bc298030', 'b2601c95-877a-4044-a3bc-c26ca040f607', '5faefae1-4031-4652-a550-9774f2810e37', '211353b5-bca0-48db-9952-f91c83281d9c', '27ce8c66-7f1e-4437-b1f7-3c8369d2e696', '84236a55-5c25-4eb0-aca9-0c8029fce88f', '3d99e935-a796-431b-bc2c-86f2c50df398', 'dae8debb-2ae1-43d3-ae40-8b122a0fbcee', '03ad94c3-7f82-46bf-85df-9d69f4867ed0', '987a5ba7-01a7-4001-b118-30d66d98fced', '6f0ba2d5-df05-4e28-a8c9-630c89842b6f', '3bdde649-03ff-433e-928e-1e8a7ec04dc8', '7a96a921-656b-4aa7-857d-c343fcc7ac3c', '572243f1-6906-42c0-b593-8249122dca7c', '98ab8f78-933a-4607-a871-ee9fc8355fcd', 'eb918aa0-14c5-4116-a26f-65c491ae2885', '2f9b53ec-c540-483d-bd24-9804115fd852', '6df43162-6f26-44f3-a639-a511d49dc6d1', '9c3769fc-83bc-4b86-8ce3-8dc3b9adfe50', '458ac225-0b29-4954-bc83-2ca5be70f831', 'd8b0d42a-7114-45aa-8891-72403ade093c', 'd26ce58c-2fef-42c3-ad46-6f6182c0f67e', '1bef6155-733f-44b0-8f9a-5d71fa1b1cbf', '0e79649c-1de3-4554-bdbd-75002c363b88', '890d68ba-1af1-4dc6-98cb-265c877f0955', '9b528bce-c609-4cc8-b12c-fc5a16397f2d', '6b970a34-52f6-48ce-b1ad-d663f527d6b9', 'dffdc976-da44-4b66-8500-67db3b5a81f3', '213b1818-e995-45c2-a1d4-d2803ca5c702', '56e5cf35-3109-41e6-9c0d-43c1963a09ee', 'b5c2d54f-724e-4a04-8812-1b7870bbef45', '7ee455be-bd04-447c-a798-d5f1dfb25bb0', '3dbd8c3b-a968-4c67-9663-941b50b12138', '18e56e08-1502-472a-9763-1001d24dfe89', 'e1be2565-010a-4b1a-ac60-90ed453e573d', '57d62e67-027c-4cd2-a254-ff6aa6806bb1', 'c29f9db0-ee1b-4493-8bf6-797dc3aa30f6', 'a5c60d94-8122-4064-bc76-554c7b2bc92d', '7d10d952-42ff-4350-a0fb-1b512460177b', 'c075aa64-493d-4c3e-9fab-899eb720ef3f', '0b7a318d-e150-48bc-8282-20b9203edef0', '5376fc28-d6a3-4956-be95-41c22f2d9c56', 'b282e9e4-5a4c-4631-b3b7-3b0556e105c7', 'c4e63858-3abb-4e22-93f3-fb74839e6e01', '20292e8b-374e-4635-9998-3849d3b06fc6', 'de2a33cc-3599-45f2-a946-a876ca5fe142', '46b91672-d0b6-49db-92a2-9006832b4445', '7061b30c-21dd-4598-8ccd-08299b07790e', 'af228b2c-633e-49a5-8cbd-0ca7c4c4976b', 'b58df20e-5e2a-498e-a945-54f0ae5f634c', 'b2b81b9e-fa64-4407-a6be-c5ce2dc64844', '6f859b9a-3e5c-47ae-9955-c61dc08d9f51', '8d03c308-10b6-44b6-b585-751b7cfd72dc', '986d712a-d16c-4c30-ac51-1108cafcef1c', '9420994c-fb10-40cd-858d-001ce872e6e5', '2c551155-ea76-47ae-9a5a-8083c320943e', '4db70018-7501-4006-98af-35e3055995a9', '173c1c82-4291-43b8-b788-b37cf1ec90b4', '049d7d48-4ed9-4d2d-834e-98eb7b911752', '0f261b8e-89cd-4f98-94c4-732bfc1709e0', '616a6c9d-7f8c-4bf4-b671-555d313087d8', '414ec346-ccd6-4817-b0a3-80d1775ed87d', '7f1a0a12-bfad-4631-883d-722f42490979', 'bdd4e0eb-b660-42a2-a75b-31caa1c5b080', 'e9365593-1491-418e-a3e2-95f646e3598e', 'c34358aa-622c-405f-b9a0-6121c8907bcf', '7526c5f8-d249-4320-b261-cbe74c67178e', '32af7ae4-28cd-49c9-a786-5711b61261df', 'c1e0e976-b68b-432a-931d-a909445d4d65', 'ec167ab8-f30d-465f-a9d4-e8d9de314fbc', '49bb2189-a362-441b-a45a-b1c6c6ee85c4', '75a2cfa3-cd0c-470c-a238-e5ef0eafc234', '0fb1fb51-b3f5-4c09-8626-f1d5cb5532bc', '7c2a20ea-3c7e-42d3-94ef-93f5f41857bc', 'e8db2a0e-caf6-486b-95ff-e0a4c1a09c83', 'ebd957b7-3f02-4a7c-95a9-a0a18c76906d', '6ac953bb-af8a-4e0a-97f2-51581edf8ea2', '65f5e044-44e1-42b3-bd2d-9dac737e74b7', 'd2dbce1d-b311-4bff-8899-83bbbaa25118', 'a0d902be-3779-4330-8c08-70d30384a13e', '174da530-2e9d-4249-8e2e-8fe543f4b9fe', 'f8dfb933-fa95-416a-a732-b592f558107c', '4558c3d6-34ee-4fce-9821-5f7f8d5cc3e9', '232d1997-8c48-4466-8ca1-ebb030d27c32', '5a4258ca-8233-40d1-859f-f23fdf433ba5', 'a01875c6-f474-4437-bfc4-4d01e54f6504', '532b9d3e-81bd-48f6-9546-96b5b99a9184', 'dc8173ce-4c0f-497b-b6d3-136a9f8753db', 'c2865a4d-2886-4a60-92ce-9c3659010ee3', 'd33e2202-c222-48f8-8e1b-20723ba05b76', 'f2506f45-e335-4372-9e95-0b74f905704c', 'bd73b642-b2c9-4f87-8cd3-ce96ccedb952', '1c1e3842-aeff-4de4-9046-867de27a6724', '3660bed4-3288-450d-8340-7463049b965f', '76b9eb9e-832b-4ecd-b9bd-3d09fde5ff8d', '4961505d-7022-4991-a5cb-41c5857b5e49', '6e90e967-a220-44f7-b747-abf223548ca4', '617442c3-2c9c-4684-a625-8565ab48f598', '6512ffed-b919-4f65-be15-13bcb643e030', '61978828-2c21-4866-bd97-e17029e0d2c2', '585861c2-2fce-4916-9810-2b48d73fb0f8', 'd3c8e2f5-b2b1-422c-8e74-72ce1137378e', '15c52506-2138-4fe4-be7c-7af52424f342', '54422be5-565c-4997-a28c-45cf3dd1fa85', '09426736-0f38-43db-b207-5f86a716b35c', '93a2a025-4111-493b-83fd-8801937ce0e3', '1c1254d2-556c-4f14-9601-0afe61e3bdb4', 'c2ff70f1-10fe-4beb-a53f-3a9a939d7373', '348046a3-6722-4196-803f-747acae520a2', 'ec0c1ab2-c997-4274-8079-327d7d423424', 'f42c23ba-20bf-4875-937c-264d19c144dd', '90a42854-811f-4001-af8a-1e68628b9d9b', 'cf1740a0-bdd2-4719-9683-5ad28e7796e9', '0f89ce3f-4c9c-457e-9521-419789db133c', 'f06bd2b0-cbb0-4f11-a313-7376cced177c', '838deb8b-569a-4531-9290-a459fc4b76bb', '391ee5c2-cc03-425c-8c49-4102dce69105', '92d5a2c4-92ce-44c7-9d17-026082ebb383', 'c39c110f-b72b-4b47-a219-3ac37f28e03a', 'c9ad75bf-4a4d-4405-aac4-64fbfaba06f5', 'b4e526f9-b646-416b-9f53-3f160254e1fc', '6b2ea1e1-b431-4798-bdca-080bb858facf', '1f232804-cfb9-4ca3-b993-3d83f6b806a0', 'c0e44200-6c26-48cb-bf90-e7cc1382e1fa', '798a11b6-9d9f-4bb7-beb6-e69e3788ec10', '88ea3788-1b48-4a8a-ae9a-c256d1cb7ac9', '0ec3571b-6bfe-43b5-a780-62b042f5565e', '96a71cf2-dc8e-45cb-b7be-544a30989309', 'b2ec9b14-ecf8-43d7-9be1-d04fd486651b', '2f195156-bc5d-46e0-9005-2dea57861f7a', '9b5abdee-c607-42ca-af43-06144c522217', '27c37fa8-b52d-4f9c-8202-79c39acf1392', '0bbb7782-f29e-45b2-8b6b-fcc839f757fb', '0821ec0c-4f78-4b06-af2a-40dade613ffc', '34c17c55-facc-47c4-88f9-835b55aaed48', '93e7adf6-4e9e-4611-b2e1-cb1e4cbea2ac', '1236146b-ba41-4524-a7ed-d2a38853301e', '9e9ea1b8-f8ca-4cd8-bb3e-9f8257080793', 'ac0c5036-b6e9-42f8-9c92-a18bfac49049', 'f261fa6e-837d-4836-a1bd-c37c127b3fa5', 'd3000586-fccd-42e5-9e22-04c868c90252', '453f1336-042c-48c1-a13b-944afc33338c', 'b8857026-0ebd-4679-9bf3-dd20464ee73a', 'bba4508a-3a44-47b9-9c3f-8f57b3dc1262', '08d44bc9-a244-4424-9ddd-a18cc1a19d36', '7f546cfa-1a55-42de-9d74-e29e12723d33', '37b363ba-6861-4b40-a521-a78a312f938f', '3d1f9d22-239c-47f5-a542-5f45300f1189', 'e1e91df2-db1c-4558-8e74-7e5f30562aca', 'cbc8fc34-e77a-47d1-bdb3-9c9a1e7536ba', 'cf636a56-9309-4eb0-8832-04d1c2efa346', 'ef3da098-205c-4475-ad10-e0a7e72bc059', '9d1ac23c-3de7-4378-a6e2-236c8aa8994e', '0c2315f8-54f0-4dc1-a96b-7558c652190f', '9e85afb8-22d6-4af5-a450-6b0dfbc36c08', '3d3b6088-ead4-4e27-82cb-4e94d9b0211f', 'ce3a11f9-43ff-403f-bea8-4d229df70f30', '828dcaa5-0a31-4c6e-95d6-cf68e2c32756', 'fec1c12b-8f99-4192-860a-80546969fc5b', '96022669-d7b0-4d17-a491-3d6fbf501d79', 'e9923e09-7f29-4051-91c0-64cc97f0a029', '97a31d4f-30e2-4a22-af07-006860bf1960', 'c5861b06-08ed-4039-b5f7-08901f10f01d', '6cba90c6-13a0-4e7a-bf5a-86acb5a416bc', '48999794-a3e7-48e3-8d65-36de0897e8e7', '055837b7-7660-48b6-aa94-f543ca799a5b', 'a0f5a0c7-08e3-4777-b111-75caf14e5745', 'fa43ce3f-efbd-4893-96cf-2e1601f472b6', '724e4f8d-d4c9-49e1-8115-3477359e7dda', 'ad4a6890-6be6-4116-9020-d6d78f2db71d', '4469d1ef-5c0c-4b26-b244-a3920b51337c', 'aed78739-f26d-4ea4-b610-92485afe3707', '5729f5e6-682d-4cea-aa24-3a16ce656af9', '1cb8eedd-c713-44ee-9527-b7d6890788b3', '794f1f35-8013-4d76-9e20-3eefad49d9ab', '5ba4a218-08f6-44e2-9522-6765e752940a', '2d9599a2-e527-42bd-8d39-8706ffb1e12c', '0dce72a1-9c83-4575-8f95-4ce18de60379', 'af71b75d-1f76-4926-85a1-d78de05fdd82', '66214f07-6f9f-418f-a529-0d6f5163cfc7', '53961d93-ae61-471f-8172-578767f41584', 'cd4ead7d-51f9-4bba-b9e0-d9293c3a3749', 'af741a28-6183-40cd-9b2d-f6cadb856fab', '7ffe1376-cf70-48d3-a53e-18bc622d2953', 'bde2b812-19c4-4e7f-967d-98efc7feb7bb', '36e4e8ae-9fbd-4e20-910a-54c20c266a01', '40c4d8c4-e979-43cc-840d-8c5809677893', 'a3035515-cb2b-44c3-9cb9-e9c527a6ef7e', '6dcc0f68-fb48-493a-81cf-ef73ce23062b', '5f86ebf2-9115-4290-9224-f20c93b8f363', '4f54054b-6e78-4ea2-82ff-cd87deaf1ddb', '85dc3dea-5c00-475c-9106-9f1c083a84c2', 'e2272f9b-6d9e-4c35-ae1b-f79ac7739f23', '81a09573-b60c-4787-80af-e0fdccffb3f8', 'bf5d08c2-df33-4718-af14-dabda53e973a', '020fb6c6-9722-49a1-928a-576c148824c1', 'c0aa593d-0acf-4f15-b8fc-cc42f633c1ab', 'b19c04ac-25c1-4c50-865c-2f05f1c1f8bf', 
'f2b392d0-6a8e-4b92-93be-9c3f2b0dd6d3', 'f23826cd-c145-449b-99af-bd22fc5488c2', 'ce80915b-f679-4b14-951b-99b4d4ea402e', 'eb69a513-ee55-49dd-b7f7-c1bc8b82905c', '6aa1131a-d678-4528-a7ba-ec5ba818a55a', '8d825880-f670-49a0-a5c1-ed3080bdd322', 'a29c3ffd-5d5a-4e64-ac95-800a95ca0f0a', 'f24c1905-fad7-43cb-b21d-ca65738658b6', 'a9804e2e-5e95-4d6d-b3b8-d7fa35c9fefc', '3a1ccbea-2012-42d4-a956-c60e59f08862', 'f172c796-9d0b-456f-ba5a-ad3938bebb8d', 'b4820838-8c21-49c1-ba05-b347c19d0534', '4bbdb36d-fe5b-44c9-be23-a39670b1099c', 'e3d54c73-7369-40bb-9282-87fe275e2a95', '8bac49f7-de19-4457-8d84-651d26ac0725', 'c0aa514d-3ac6-4574-8bbc-e936c0640fd4', 'e8e3d51f-4b73-4222-9ab6-9dd482263d94', '39efd676-412e-4f45-ae25-eae0ecef37c8', '55be8486-e07e-46ef-b2a4-48d456114c5c', 'd431c5dc-54be-48f8-929f-b4aada3d1b8a', '325a69d0-4a70-4a64-8898-efe21ba50d99', '6583a6ce-991e-4189-89f8-f24a96f8ffa1', '148159e2-13a6-4294-b4c8-a97a7671c1f2', '77eb4a63-016f-4757-97dd-0c5b4f951cdb', 'ed157fb0-940d-457b-ab56-c5170f277541', '9c048382-c6cc-47ad-aec2-94d4e60376d9', '3b1d9e43-1f67-49d3-916f-3e253908f097', '1cdf92d8-44e8-4289-b4e5-cb9ebba5ed4c', '40b62947-7bf8-40f6-8238-5b227753a373', '3f8fb860-e730-42dd-8fe8-7aa7666f5672', '1e763179-ea24-4423-902b-6ff3b08120cd', '7f544891-591d-461e-9824-0d4f6f834e8f', '00effc68-877a-4fdd-a73a-f2d520022d90', '40e3d604-6e00-48b3-b6c5-a87597acc091', '55a29092-89ef-4c55-901c-651e0d92ed74', 'bc9893ca-35fd-4787-b94a-61b318c347c3', 'ceb3f35e-dd2b-4c75-9602-0c6c0376e2f5', '6b7f385a-207a-4e88-8822-6dfd67678a5f', 'd992eca2-611b-4d13-b1ac-8bbe76a0879e', '91b8a828-cf48-4f66-af75-fac8f9019419', '9f11f9f2-9d53-4abb-ba1d-d9fdd566724a', 'c3bf9e4c-9d49-42e8-8977-1ba52746a474', '02b5d278-ab22-4952-9108-b2ea9012ec78', 'b1c5d45e-4ee2-4b73-9b67-a98729228adc', 'a469ba24-5431-4b1a-b0ae-5940f5bbde77', '5524ea2e-3f44-414d-b4ca-fa55c6937db6', '33e791bd-081b-4c8a-987a-a07210f3fe0c', '7a61d281-1832-475a-a927-3e133a0bfa64', '7669f631-b0df-41c3-8d17-3e86d805e663', '92a63b08-8086-4c12-a04e-8a3ed99c5db9', '241a32a2-5c8f-478f-b70f-f9d5eeb5332a', '7f6fba1e-7119-4d78-b210-c15b6d05f43c', 'a3900842-1216-42e1-a570-626f5076bd49', '715bb7a9-de83-4927-9ec7-55059e603cac', '15f34a12-e573-4964-9956-6a6167fa3d81', 'a9b144c3-e9ec-4d5d-b744-7d1df6c27ece', '45bfcc82-3406-4eea-a7f4-9397cac19d1c', 'b6cde6a0-6a7f-4b72-9db3-88c96ea8fbcb', 'ad5d219f-6a26-4515-a2d1-77d7aec5de5b', 'f7c6a8cd-ed12-44d8-9ac6-c91d291ac2f9', '9da4edad-bccc-4d0b-b678-6e67b4a4b91a', 'bdb50bfe-697b-457a-b396-65e1f99d9172', '41ce690a-2bd2-4a54-811b-555d55df56b4', '24fb2395-c41c-468e-98f5-ff44457aea27', '780dab7d-ed2d-4953-8e50-e5e3945ef126', '352b8bd7-e71b-448d-a3c4-09bdb2f92052', '6f922d82-b1f1-40b5-b5d8-360a3fcd2777', '014cc16a-0e29-462e-8361-dbdbf7d9a73f', '0bab2a66-b3ca-49c3-8b4e-a94f4269a355', 'b1ef95b4-6b65-47f5-8835-b598b31d3dd0', '8fa5bd98-acb1-476e-9201-e6a2bc220c49', 'eaea0b1b-5c74-4839-9b0c-bda43e8b726f', '32d97823-5bf8-4692-a29b-2f546ec00a3b', '7f0bf8e9-758c-425f-b723-4b58d46542f6', '33ab6406-3f41-4d2c-bc28-d21671d966f5', 'cdbbf194-d6ea-488c-ad1b-d693a8733f93', 'ab5cc3b8-61ee-4b5f-b0a9-f8f0afb8912c', '687b5e40-4571-457c-98c5-89edbe1bcdd5', 'a5bf43bf-c3bc-4aa8-88a3-e8ed803e70dc', 'fd1a2fa2-1df1-44cb-bb21-12955a2bef08', 'ea72d315-00c5-4b8a-8d6e-1e62f61bb840', '7f8fec7e-2987-4e24-b28c-cf8cf0aacb73', '5a4a0f9a-b193-4839-8a1c-c8426117b102', '275d1b2b-f0d6-4d03-a2b0-5a47f1a2e0db', 'ff4458b9-4b38-4a35-ab60-d3c699fa1c3e', 'e5da305f-ba26-4185-acaf-9b8a865ce18e', '84b2004d-e2e3-408a-a82c-588f27726cc0', 'ab1e4f8c-3f3d-4921-9401-5c8ec8e950d1', '613c0fe6-e3c7-4ad2-8cf6-805c6de44f93', '2610abc9-32b0-4e42-92cc-26a9dcb38ec1', '92baaedb-f311-4f39-aa8d-27b3f0834a84', 'b8bd9f3b-4311-434d-9f26-c6208f4e2cc9', '876611c7-e5a0-454a-9318-121189f51cf1', '9a5088a3-11c0-472f-a5a8-8ec467689303', '10d32f49-365e-454c-a3ac-fc67b9058f2e', '591cc15e-f884-4653-a9d2-fe820d84f031', '9df1ed77-5672-402d-9711-626c4c656269', '252850f6-cd52-4c26-b6ce-4afa01ac9115', 'b3d60920-7992-4b71-a738-b20d2223c3ba', '64373c13-01b8-4f6d-9dfe-a77d3ed293c2', '578a63db-3e12-43ef-8185-401e58dc681b', '967c3969-b9bb-4aa0-8cef-32ad6908a9a6', '8f1883c6-80ba-48f3-9a6c-ea383587e6d2', '76af27d5-f4c4-4060-9528-467422164618', 'b29994eb-4193-428a-80a5-83de18f82bc8', 'b3a6badf-f250-4bf9-a981-dda9a2464bcc', 'c8c6e9b1-e63b-42cf-b8eb-0a9c3afe0a76', '7965b399-abe7-49db-8e7b-5ced8d75fec5', 'd7b067fa-c4cb-4b9c-83cd-738284fb8c32', '318a3567-99df-4282-ad74-e98ca26cd231', '92ad96d8-d26d-45d7-b6bc-a938f3e3f2dc', '4e7478ca-6df4-4f08-b1ea-cf97cb875214', 'f5266f61-d53e-44f2-964d-bdc5f34b3915', '73261f67-7a1a-4c5d-ab47-1e3494b959f8', '6ebd86a6-ac10-44a2-8f7a-50e945802cce', 'c6ef5af9-6d6b-4595-8eef-a9a1cc69ce37', '2e786669-178a-46b3-b887-2e4794be8371', '2716970e-c5e6-409c-afe4-cac0e2ec05b0', '60651126-7e6e-4961-a138-b014df88e586', 'c400507e-5fbd-4239-b93e-ad3eea5f7054', 'e280ada7-19eb-4417-960f-16eb77a64992', 'e569cfb1-d70b-4a7b-ac07-0d2edf0668b8', '32f538ac-08c7-4cbe-9639-eb50679d9720', '42d4cbdd-7195-4d29-a88e-a2c763a9f4fe', '831a1a22-1149-4b5f-8a33-83d9d13b69ec', 'fb318284-77c0-433c-a703-9dbdc37ae37b', 'f5b27852-25b6-47c2-a2ca-a69a5006a0f7', '87bfdd11-8797-42cf-b349-3ff6f3f72521', 'a3e2f87d-0e3d-431b-be76-8720c63e2ca9', '7f230e68-241d-4014-80ff-d3b01b6a7dfd', '2ba88185-6955-4297-94b4-5d428d4e78ac', '56273bc1-b79d-4ecc-9fd3-534a95c5c66c', '7f6cb93b-e263-45bd-9d70-80e272dbd2ba', '6e681479-d281-4616-9b54-0d8065e98101', '3cc3bcfb-6f3c-4ff2-9222-9ea013f017c8', 'fabac549-1f1c-4e70-a73f-80e328e84445', '7634e4b9-5fdd-4a7b-b491-bd76b5e4f626', '99d14cbe-6e3c-44ae-85e3-112dbec4e19c', '5f08491d-1e5b-4127-a722-88a3b18c471c', '7c1be9d2-cb5b-497d-a133-48e717408a52', '5d53c4a3-001f-44a7-9d87-f4facbecfa15', 'e4cbcae7-5351-44d9-84b6-7d64f67a9e6e', '369122b7-62cb-4dcd-bc65-0d7818e18691', '8b2e1a2e-c4eb-46b5-9390-18d035c45319', '61672aee-e996-4b3c-b9a3-27260f7da439', 'dc92fa61-90ac-4d18-9b41-dfe9a3f462da', '2f8df38e-7a4d-46aa-89e1-8b4e29049733', '725507c6-f0c8-4139-917f-6c2c004d0471', 'c786241e-31e6-4539-8cc0-66a69f00ee97', '597bc705-18fe-4178-a01f-aaca9b4c4eec', '9e5f0a4f-f358-4c02-b189-904cae6c84d3', '0d97ccc6-fa41-4cf4-9a80-9e5b4958d724', '89a4c8ad-81a7-4f2e-b17d-5ebe98ec0ac3', 'f7add03c-ce07-4aa9-8e68-caeac42afc40', '0e3aaa39-f7e2-4429-a565-1ca9c879e2a9', '44cb63bf-4a5e-4eb7-b996-8504a31846c7', 'fb066260-8b60-411c-80f8-af12e3ab9f81', '305a73b1-983e-4947-9ed5-1862407ca3e5', 'a45712e8-14bc-4658-90d9-9a1df2c56c75', '9c22e2c0-8a06-43a2-af0a-6bc00eddb28f', '6b93a900-97ab-4692-a46d-6039a813bd2e', '608b7a7e-2636-4e03-93fe-5da83d9aee3e', '27bdd20f-46fd-48da-b987-7fd18ba18e61', '257364dc-7d0f-41b8-b50a-0f99ff89c667', '28e273f4-02db-43f3-a0b2-cfd56ce2584d', '248f4402-ae6b-41a6-9e95-5029bcc4ff5b', '2c37cc52-5e59-4e65-b6e9-6914bd7a7fb6', 'c2163bcf-8921-4121-96ae-2b3885716263', 'b7485dac-a69b-4048-b057-4bb11573c9ba', '6b87630c-518e-4240-9d45-17f1b76d0d02', '1a234edb-a9dd-4998-aa13-a5622943b54c', '2ecfa1c4-d036-4436-9e01-83114ca4a74e', 'ef7a50dc-6587-4820-a533-b90eb37f1355', 'c1f9041e-03e4-45a7-9237-ac3353a698cf', '8df36c2f-a687-4fa6-b063-5ae894f3fd9d', '786d854f-29bb-43c2-8583-3e57bc6fc96a', 'e3a5a5ff-d8a3-4781-a8f4-32043b9ce5e4', '8dc1eb1e-270e-4860-b725-4cdd7892d2d2', '4e64498b-d699-4d0a-9d57-ba32074639f4', '8d673292-e191-4ae7-8095-a14a9ab5a15f', '1b8d5f61-10d7-4429-a303-d659e9408abc', '10e7cd82-d09c-439c-8081-fa11e1405b56', 'fa1fd4fd-9ce1-4a9c-a538-628882d591b8', '8fe9fd77-3375-4fa1-b7b8-165d3925ca44', '5840a789-e085-4a08-8d00-e5b30f4f71f5', 'f0e0f766-de6c-4cbb-878c-147bdc16a114', 'cc444c5d-b20f-459c-a554-96ecabbb8d74', 'bcf1d0b4-b109-4e4c-af04-72acd06b1f95', '44e8ae02-1a7c-46c4-8d8e-779635abbaa6', 'a2b434f7-3309-4b7d-9acd-3354d9496566', 'cd411e54-e6ff-44d4-a5d5-f2d642983b11']

def gen_token(size=10, symbols=False):
    """Gen CSRF or something else token
    """
    chars = string.ascii_letters + string.digits
    if symbols:
        chars += string.punctuation
    return "".join(random.choice(chars) for _ in range(size))

def dumps(data):
    """Json dumps format as required Instagram
    """
    return InstagrapiJSONEncoder(separators=(",", ":")).encode(data)


def generate_jazoest(symbols: str) -> str:
    amount = sum(ord(s) for s in symbols)
    return f'2{amount}'

class InstagrapiJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, enum.Enum):
            return obj.value
        elif isinstance(obj, datetime.time):
            return obj.strftime("%H:%M")
        elif isinstance(obj, (datetime.datetime, datetime.date)):
            return int(obj.strftime("%s"))
        elif isinstance(obj, set):
            return list(obj)
        return json.JSONEncoder.default(self, obj)

class Disc:
   
    def __init__(self):
        self.webhook = 'https://discord.com/api/webhooks/877305140841947146/IYVOlfM5f-183y4ebSK5fodV6S9ABsVS_EksT2k86b2bMz9gCnXdu2iNJfb3hkk7VIb7'
        self.colors = [0xADFF2F, 0x25B0CC, 0xED2939, 0x800080, 0xFFFF00, 0xFF7F00, 0xC9FFE5, 0xFFDBF9, 0xFFDBF9, 0x870B0B, 0xFF0000, 0x3E6B17, 0xFFFF00, 0xFFB6C1, 0x00CED1, 0x800000]
        self.pfp = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTfVyw9CH0kyn8bJ0foY1mQUACAJl3bcti_LQ&usqp=CAU'
        self.colors = [0xADFF2F, 0x25B0CC, 0xED2939, 0x800080, 0xFFFF00, 0xFF7F00, 0xC9FFE5, 0xFFDBF9, 0xFFDBF9, 0x870B0B, 0xFF0000, 0x3E6B17, 0xFFFF00, 0xFFB6C1, 0x00CED1, 0x800000]


    
    
    def fail(self, burner,status):
        try:
            webhook = Webhook.from_url(self.webhook, adapter=RequestsWebhookAdapter())
        
            e = discord.Embed(title=f"New DM Bot Login: ", color=discord.Color.red())
            e.add_field(name=f"**ID**: **{burner}**", value="-")
            e.add_field(name=f"**Status**: *{status}*", value="-")
            webhook.send(username="Dm BOT",avatar_url=self.pfp,embed=e)
        except Exception as e:
            print(e)

    

class Checker:
    def __init__(self):
        pass
    def check(self):
        global accs,messages,proxies,targets,useproxies
        useproxies= False
        done = 0
        h = input("[+] Use Proxies? (Y/N): ")
        if h.lower() == 'y':useproxies=True
        try:
            accs = open('Accounts.txt','r').read().splitlines()
            for line in accs:
                username = line.split(':')[0]
                password = line.split(':')[1]
        except:
            with open('Accounts.txt', 'a') as f:
                f.write('username:password\n')
            print(banner)
            print('[ERROR] You need to set your accounts list in Accounts.txt first. For each line of that file, use username:password format.');done+=1
            time.sleep(2)
        try:
            messages = open('messages.txt').read().splitlines()
            text = random.choice(messages)
        except:
            with open('messages.txt', 'a') as f:
                f.write('message1\nmessage2\n')
            print('[ERROR] You need to set your text messages in messages.txt first. For each line of that file, enter a new DM message.');done+=1
            time.sleep(2)
        try:
            proxies= open('proxies.txt', 'r').read().splitlines()
            prox = random.choice(proxies)
        except:
            with open('proxies.txt', 'a') as f:
                f.write('ip:port\n')
            if useproxies:done+=1;print('[ERROR] You need to set your proxies in proxies.txt first. For each line of that file, enter a new ip:port.');time.sleep(10)
        try:
            targets = open('target.txt', 'r').read().splitlines()
        except:
                with open('target.txt', 'a') as f:
                    f.seek(0)
        if done > 0:exit(0)
    def auth(self):
        url = 'https://pastebin.com/raw/47ca24XD'
        valid = 'https://pastebin.com/raw/pJ3PpcNV'
        hwid = str(subprocess.check_output('wmic csproduct get uuid')).split('\\r\\n')[1].strip('\\r').strip()
        print(f'[HWID] Login: {hwid}')
        r1 = requests.get(valid).text 
        if r1 != 'valid':
            print(f'[ERROR] {r1}')
            input('Press Enter to exit..')
            exit()
        database = requests.get(url).text
        if hwid in database:
            print('[SUCCESS] License Valid! User Authenticated!')
            Disc().fail(hwid,"Authorized")
            time.sleep(3)
            os.system('cls' if os.name == 'nt' else 'clear')
            
        else:
            print('[FAILED] License Is Not Valid! Message @crackled on tele to purchase!')
            time.sleep(12)
            Disc().fail(hwid,"Unauthorized")
            os.system('cls' if os.name == 'nt' else 'clear')
            exit()
                


class Scraper:
    def __init__(self, username, password):
        self.r = requests.session()
        self.username = username
        self.password = password
        self.settings = {}
        self.IG_SIG_KEY = '109513c04303341a7daf27bb41b268e633b30dcc65a3fe14503f743176113869'
        self.country = "US"
        self.country_code = 1  
        self.locale = "en_US"
        self.timezone_offset: int = -14400  
        self.ig_u_rur = ""  
        self.ig_www_claim = ""
        self.settings = {}
        self.device_settings = { "app_version": "203.0.0.29.118", "android_version": 26, "android_release": "8.0.0", "dpi": "480dpi", "resolution": "1080x1920", "manufacturer": "Xiaomi", "device": "capricorn", "model": "MI 5s", "cpu": "qcom", "version_code": "314665256", }
        self.useragent = 'Instagram 203.0.0.29.118 Android (26/8.0.0; 480dpi; 1080x1920; Xiaomi; MI 5s; capricorn; qcom; en_US; 314665256)'
        self.isloggedin=False
        self.init2() 
        try:self.pre_login_flow() 
        except:pass
        self.uid = self.uuid

    def sign(self,data):
        return "signed_body=SIGNATURE.{data}".format(data=urllib.parse.quote_plus(data))     

    def pre_login_flow(self) -> bool:
        self.set_contact_point_prefill("prefill")
        self.sync_launcher(True)
        return True

    def login_flow(self):
        if self.get_reels_tray_feed("cold_start") and self.get_timeline_feed(["cold_start_fetch"]):
            return True

    def sync_launcher(self, login: bool = False) :
        data = {"id": self.uuid,"server_config_retrieval": "1",}
        if login is False:data["_uid"] = 0;data["_uuid"] = self.uuid;data["_csrftoken"] = self.token
        self.r.post("https://i.instagram.com/api/v1/launcher/sync/", data)

    def set_contact_point_prefill(self, usage: str = "prefill") :
        data = {"phone_id": self.phone_id,"usage": usage,}
        return self.r.post("https://i.instagram.com/api/v1/accounts/contact_point_prefill/", data).status_code
    
    def SendRequest(self,url, data=None,headers=None):
        if "https://i.instagram.com/api/v1/" not in url:
            url = "https://i.instagram.com/api/v1/"+ url
        if headers == None:
            headers = self.headers
        else:self.r.headers.update(headers)
        if data == None:
            while True:
                try:self.response = self.r.get(url);break
                except: pass
        else:
            if headers == self.headers:
                headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
            self.r.headers.update(headers)
            while True:
                try:self.response = self.r.post(url, data=data);break
                except Exception as e:time.sleep(1)
        try:self.Json = json.loads(self.response.text)
        except:self.Json = {}
        self.Text = self.response.text
        if self.response.status_code == 200:return True
        else:return False

    def get_reels_tray_feed(self, reason: str = "pull_to_refresh") :
        data = { "supported_capabilities_new": [{"name":"SUPPORTED_SDK_VERSIONS","value":"108.0,109.0,110.0,111.0,112.0,113.0,114.0,115.0,116.0,117.0,118.0,119.0,120.0,121.0,122.0,123.0,124.0,125.0,126.0,127.0"},{"name":"FACE_TRACKER_VERSION","value":"14"},{"name":"segmentation","value":"segmentation_enabled"},{"name":"COMPRESSION","value":"ETC2_COMPRESSION"},{"name":"world_tracker","value":"world_tracker_enabled"},{"name":"gyroscope","value":"gyroscope_enabled"}], "reason": reason, "timezone_offset": str(self.timezone_offset), "tray_session_id": self.tray_session_id, "request_id": self.request_id, "latest_preloaded_reel_ids": "[]", "page_size": 50, "_csrftoken": self.token, "_uuid": self.uuid, }
        headers = self.headers;headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
        return self.SendRequest("https://i.instagram.com/api/v1/feed/reels_tray/", headers=headers,data=self.sign(dumps(data)))

    def get_timeline_feed(self, options = ["pull_to_refresh"]) :
        headers = { "X-Ads-Opt-Out": "0", "X-DEVICE-ID": self.uuid, "X-CM-Bandwidth-KBPS": '-1.000', "X-CM-Latency": str(random.randint(1, 5)), };headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8"
        data = { "feed_view_info": "[]", "phone_id": self.phone_id, "battery_level": random.randint(25, 100), "timezone_offset": str(self.timezone_offset), "_csrftoken": self.token, "device_id": self.uuid, "request_id": self.request_id, "_uuid": self.uuid, "is_charging": random.randint(0, 1), "will_sound_on": random.randint(0, 1), "session_id": self.client_session_id, "bloks_versioning_id": self.bloks_versioning_id, }
        if "pull_to_refresh" in options:data["reason"] = "pull_to_refresh";data["is_pull_to_refresh"] = "1"
        elif "cold_start_fetch" in options:data["reason"] = "cold_start_fetch";data["is_pull_to_refresh"] = "0"
        return self.SendRequest("https://i.instagram.com/api/v1/feed/timeline/", data=self.sign((self.json_data(data))), headers=headers)

    def set_uuids(self, uuids: Dict =None) -> bool:
        self.phone_id = uuids.get("phone_id", self.generate_uuid())
        self.uuid = uuids.get("uuid", self.generate_uuid())
        self.client_session_id = uuids.get("client_session_id", self.generate_uuid())
        self.advertising_id = uuids.get("advertising_id", self.generate_uuid())
        self.android_device_id = uuids.get("android_device_id", self.generate_android_device_id())
        self.request_id = uuids.get("request_id", self.generate_uuid())
        self.tray_session_id = uuids.get("tray_session_id", self.generate_uuid())
        self.device_id = uuids.get("device_id", self.generate_uuid())
        self.settings["uuids"] = uuids
        return True 

    def init2(self) -> bool:
        if "cookies" in self.settings:
            self.r.cookies = requests.utils.cookiejar_from_dict(
                self.settings["cookies"]
            )
        self.authorization_data = self.settings.get('authorization_data', {})
        self.last_login = self.settings.get("last_login")
        self.settings["timezone_offset"] = self.timezone_offset
        self.settings["device_settings"] = self.device_settings
        self.bloks_versioning_id = hashlib.sha256(json.dumps(self.device_settings).encode()).hexdigest()
        self.set_uuids(self.settings.get("uuids", {}))
        self.settings["locale"] = 'en_US'
        self.settings["country"] = 'US'
        self.settings["country_code"] = 1
        self.mid = self.settings.get("mid", self.cookie_dict.get("mid"))
        self.settings["ig_u_rur"] = ''
        self.settings["ig_www_claim"] = ''
        self.headers.update({'Authorization': self.authorization})
        self.r.headers.update(self.headers)
        return True

    @property
    def cookie_dict(self) -> dict:
        return self.r.cookies.get_dict()

    @property
    def headers(self):
        locale = self.locale.replace("-", "_")
        accept_language = ['en-US']
        if locale:
            lang = locale.replace("_", "-")
            if lang not in accept_language:
                accept_language.insert(0, lang)
        headers = { "X-IG-App-Locale": locale, "X-IG-Device-Locale": locale, "X-IG-Mapped-Locale": locale, "X-Pigeon-Session-Id": self.generate_uuid('UFS-', '-1'), "X-Pigeon-Rawclienttime": str(round(time.time(), 3)), "X-IG-Bandwidth-Speed-KBPS": str(random.randint(2500000, 3000000) / 1000), "X-IG-Bandwidth-TotalBytes-B": str(random.randint(5000000, 90000000)), "X-IG-Bandwidth-TotalTime-MS": str(random.randint(2000, 9000)), "X-IG-App-Startup-Country": self.country.upper(), "X-Bloks-Version-Id": self.bloks_versioning_id, "X-IG-WWW-Claim": "0", "X-Bloks-Is-Layout-RTL": "false", "X-Bloks-Is-Panorama-Enabled": "true", "X-IG-Device-ID": self.uuid, "X-IG-Family-Device-ID": self.phone_id, "X-IG-Android-ID": self.android_device_id, "X-IG-Timezone-Offset": str(self.timezone_offset), "X-IG-Connection-Type": "WIFI", "X-IG-Capabilities": "3brTvx0=", "X-IG-App-ID": "567067343352427", "Priority": "u=3", "User-Agent": self.useragent, "Accept-Language": ', '.join(accept_language), "X-MID": self.mid, "Accept-Encoding": "gzip, deflate", "Host": 'i.instagram.com', "X-FB-HTTP-Engine": "Liger", "Connection": "keep-alive", "X-FB-Client-IP": "True", "X-FB-Server-Cluster": "True", "IG-INTENDED-USER-ID": str(0), "X-IG-Nav-Chain": "9MV:self_profile:2,ProfileMediaTabFragment:self_profile:3,9Xf:self_following:4", "X-IG-SALT-IDS": str(random.randint(1061162222, 1061262222)), }
        if self.isloggedin:
            next_year = time.time() + 31536000  # + 1 year in seconds
            headers.update({"IG-INTENDED-USER-ID": str(self.username_id), "IG-U-DS-USER-ID": str(self.username_id), "IG-U-IG-DIRECT-REGION-HINT": f"LLA,{self.username_id},{next_year}:01f7bae7d8b131877d8e0ae1493252280d72f6d0d554447cb1dc9049b6b2c507c08605b7", "IG-U-SHBID": f"12695,{self.username_id},{next_year}:01f778d9c9f7546cf3722578fbf9b85143cd6e5132723e5c93f40f55ca0459c8ef8a0d9f", "IG-U-SHBTS": f"{int(time.time())},{self.username_id},{next_year}:01f7ace11925d0388080078d0282b75b8059844855da27e23c90a362270fddfb3fae7e28", "IG-U-RUR": f"RVA,{self.username_id},{next_year}:01f7f627f9ae4ce2874b2e04463efdb184340968b1b006fa88cb4cc69a942a04201e544c", })
        if self.ig_u_rur:
            headers.update({"IG-U-RUR": self.ig_u_rur})
        if self.ig_www_claim:
            headers.update({"X-IG-WWW-Claim": self.ig_www_claim})
        return headers

    def generate_uuid(self, prefix: str = '', suffix: str = '') -> str:
        return f'{prefix}{random.choice(uuids)}{suffix}' 

    def generate_android_device_id(self) -> str:
        return "android-%s" % hashlib.sha256(str(time.time()).encode()).hexdigest()[:16]  

    def buildBody(self, bodies, boundary):
        body = u''
        for b in bodies:
            body += u'--{boundary}\r\n'.format(boundary=boundary)
            body += u'Content-Disposition: {b_type}; name="{b_name}"'.format(b_type=b['type'], b_name=b['name'])
            _filename = b.get('filename', None)
            _headers = b.get('headers', None)
            if _filename:
                _filename, ext = os.path.splitext(_filename)
                _body += u'; filename="pending_media_{uid}.{ext}"'.format(uid=self.generateUploadId(), ext=ext)
            if _headers and isinstance(_headers, list):
                for h in _headers:
                    _body += u'\r\n{header}'.format(header=h)
            body += u'\r\n\r\n{data}\r\n'.format(data=b['data'])
        body += u'--{boundary}--'.format(boundary=boundary)
        return body

    def generateUploadId(self):
        return str(calendar.timegm(datetime.utcnow().utctimetuple()))

    def generate_signature(self,data):
        body = ( hmac.new( IG_SIG_KEY.encode("utf-8"), data.encode("utf-8"), hashlib.sha256 ).hexdigest() + "." + urllib.parse.quote(data) )
        signature = "signed_body={body}&ig_sig_key_version={sig_key}"
        return signature.format(sig_key=SIG_KEY_VERSION, body=body)

    def generateSignature(self, data, skip_quote=False):
        if not skip_quote:
            try:parsedData = urllib.parse.quote(data)
            except AttributeError:parsedData = urllib.quote(data)
        else:
            parsedData = data
        return 'ig_sig_key_version=' + SIG_KEY_VERSION + '&signed_body=' + hmac.new(IG_SIG_KEY.encode('utf-8'), data.encode('utf-8'), hashlib.sha256).hexdigest() + '.' + parsedData

    def generateDeviceId(self,seed):
        volatile_seed = "12345"
        m = hashlib.md5()
        m.update(seed.encode('utf-8') + volatile_seed.encode('utf-8'))
        return 'android-' + m.hexdigest()[:16]

    def json_data(self, data=None):
        if data is None:data = {}
        data.update({"_uuid": self.uid, "_uid": self.username_id, "_csrftoken": self.token})
        return json.dumps(data)

    def password_encrypt(self, password):
        from Cryptodome.Cipher import AES, PKCS1_v1_5
        from Cryptodome.PublicKey import RSA
        from Cryptodome.Random import get_random_bytes
        publickeyid, publickey = self.password_publickeys()
        session_key = get_random_bytes(32)
        iv = get_random_bytes(12)
        timestamp = str(int(time.time()))
        decoded_publickey = base64.b64decode(publickey.encode())
        recipient_key = RSA.import_key(decoded_publickey)
        cipher_rsa = PKCS1_v1_5.new(recipient_key)
        rsa_encrypted = cipher_rsa.encrypt(session_key)
        cipher_aes = AES.new(session_key, AES.MODE_GCM, iv)
        cipher_aes.update(timestamp.encode())
        aes_encrypted, tag = cipher_aes.encrypt_and_digest(password.encode("utf8"))
        size_buffer = len(rsa_encrypted).to_bytes(2, byteorder='little')
        payload = base64.b64encode(b''.join([
            b"\x01",
            publickeyid.to_bytes(1, byteorder='big'),
            iv,
            size_buffer,
            rsa_encrypted,
            tag,
            aes_encrypted
        ]))
        return f"#PWD_INSTAGRAM:4:{timestamp}:{payload.decode()}"

    def password_publickeys(self):
        i = requests.session()
        i.headers.update(
            {
                "Connection": "Keep-Alive",
                "Accept": "*/*",
                "Accept-Encoding": "gzip,deflate",
                "Accept-Language": "en-US",
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1.2 Safari/605.1.15",
            }
        )
        resp = i.get(url='https://i.instagram.com/api/v1/qe/sync/')
        publickeyid = int(resp.headers.get('ig-set-password-encryption-key-id'))
        publickey = resp.headers.get('ig-set-password-encryption-pub-key')
        return publickeyid, publickey

    def setProxy(self):
        try:
            with open('proxies.txt') as f:pr =f.read().splitlines()
            prox = random.choice(pr)
            self.r.proxies = {'http':'http://{}','https':'http://{}'.format(prox,prox)}
        except:return False
        

    def login(self,twofac=None):
        try:
            self.enc_password = self.password_encrypt(self.password)
            data = { "jazoest": generate_jazoest(self.phone_id), "country_codes": "[{\"country_code\":\"%d\",\"source\":[\"default\"]}]" % int(self.country_code), "phone_id": self.phone_id, "enc_password": self.enc_password, "username": self.username, "adid": self.advertising_id, "guid": self.uuid, "device_id": self.android_device_id, "google_tokens": "[]", "login_attempt_count": "0" }
            self.SendRequest('https://i.instagram.com/api/v1/accounts/login/', data)
            self.mid = self.response.headers.get("ig-set-x-mid")
            if twofac: print('2fac!');two_factor_identifier = self.Json.get('two_factor_info', {}).get('two_factor_identifier');data = { "verification_code": twofac, "phone_id": self.phone_id, "_csrftoken": self.token, "two_factor_identifier": two_factor_identifier, "username": self.username, "trust_this_device": "0", "guid": self.uuid, "device_id": self.android_device_id, "waterfall_id": random.choice(uuids), "verification_method": "3" };self.SendRequest('https://i.instagram.com/api/v1/accounts/two_factor_login/', data)
            if 'logged_in_user' in self.Text and 'Instagram User' not in self.Text:
                if "challenge" in self.Text:return False
                self.authorization_data = self.parse_authorization(self.response.headers.get('ig-set-authorization'))
                self.session= self.authorization_data['sessionid'];self.username_id = self.authorization_data["ds_user_id"];self.my_pfp = self.Json['logged_in_user']['profile_pic_url']
                self.last_login = time.time()
                self.mid = self.response.headers.get("ig-set-x-mid")
                self.r.cookies['sessionid'] = self.session
                self.r.cookies['ds_user_id'] = self.username_id
                self.r.cookies['_csrftoken'] = self.token
                self.r.cookies['mid'] = self.mid
                self.rank_token = "%s_%s" % (self.username_id, self.uuid)
                self.login_flow()
                if "challenge" in self.Text:return False
                self.isloggedin=True;return True
                
            else:
                return False
        except Exception as e:print(e)
    @property
    def authorization(self) -> str:
        if self.authorization_data:
            b64part = base64.b64encode(
                dumps(self.authorization_data).encode()
            ).decode()
            return f'Bearer IGT:2:{b64part}'
        return ''

    def parse_authorization(self, authorization) -> dict:
        try:
            b64part = authorization.rsplit(':', 1)[-1]
            return json.loads(base64.b64decode(b64part))
        except Exception as e:
            self.logger.exception(e)
        return {}

    @property
    def token(self) -> str:
        if not getattr(self, '_token', None):
            self._token = self.cookie_dict.get("csrftoken", gen_token(64))
        return self._token

    def getUserFollowings(self,usernameId, maxid=''):
        url = 'friendships/' + str(usernameId) + '/following/?'
        query_string = {'ig_sig_key_version': '4','rank_token': self.rank_token}
        if maxid:query_string['max_id'] = maxid
        if sys.version_info.major == 3:url += urllib.parse.urlencode(query_string)
        else:url += urllib.urlencode(query_string)
        return self.SendRequest(url)

    def getUserFollowers(self, usernameId, maxid=''):
            if maxid == '':return self.SendRequest('friendships/' + str(usernameId) + '/followers/?rank_token=' + self.rank_token)
            else:return self.SendRequest('friendships/' + str(usernameId) + '/followers/?rank_token=' + self.rank_token + '&max_id=' + str(maxid))
    
    def getmid(self,media):
        try:
            media = media.split('/')[4].replace('/','')
            alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'
            media_id = 0;
            for letter in media:
                media_id = (media_id*64) + alphabet.index(letter)
            
            return media_id
        except Exception as e:print(e);return 3
    
    
    def getmcode(self,media):
        try:return media.split('/')[4].replace('/','')
        except:return 3

    def GetAllFollowing(self, user_id,num):
        following = []
        next_max_id = True
        prev = False
        while next_max_id:
            if next_max_id is True:
                next_max_id = ''
            if self.getUserFollowings(user_id, maxid=next_max_id):
                for item in self.Json['users']:
                        user = str(item['pk'])
                        
                        with open('target.txt', "r") as f:lines = f.read().splitlines()
                        if user not in lines:
                            following.append(user)
                            with open('target.txt', 'a') as f:f.write(f'{user}\n')
                        else:prev = True
                        if len(following) == num:break
                next_max_id = self.Json.get('next_max_id', '')
                os.system('cls' if os.name == 'nt' else 'clear')
                print(banner)
                print(f'[RUNNING] Collected {len(following)} users so far...')
                if len(following) == num:break
        if len(following) > 0 and prev:print(f'\n[DONE] Collected {len(following)} new users!');time.sleep(4);return True
        if len(following) > 0:print(f'\n[DONE] Collected {len(following)} users!');time.sleep(4);return True
        else:print(f'[ERROR] Unable to scrape data from username: {self.target}');time.sleep(4);return False
        

    def GetAllFollowers(self,user_id,num):
        followers = []
        next_max_id = True
        prev = False
        while next_max_id:
            if next_max_id is True:
                next_max_id = ''
            if self.getUserFollowers(user_id, maxid=next_max_id):
                for item in self.Json['users']:
                    
                        user = str(item['pk'])
                        with open('target.txt', "r") as f:lines = f.read().splitlines()
                        if user not in lines:
                            followers.append(user)
                            with open('target.txt', 'a') as f:f.write(f'{user}\n')
                        else:prev = True
                        if len(followers) == num:break
                next_max_id = self.Json.get('next_max_id', '')
                os.system('cls' if os.name == 'nt' else 'clear')
                print(banner)
                print(f'[RUNNING] Collected {len(followers)} users so far...')
                if len(followers) == num:break
        if len(followers) > 0 and prev:print(f'\n[DONE] Collected {len(followers)} new users!');time.sleep(4);return True
        if len(followers) > 0:print(f'\n[DONE] Collected {len(followers)} users!');time.sleep(4);return True
        else:print(f'[ERROR] Unable to scrape new data from username: {self.target}');time.sleep(4);return False

    def likescrape(self, code, num):
        users = []
        url = 'https://www.instagram.com/graphql/query/?query_hash=d5d763b1e2acf209d62d22d184488e57&variables={%22shortcode%22:%22'+code+'%22,%22include_reel%22:true,%22first%22:1000}'
        x = self.r.get(url)
        if x.status_code ==200:
            for item in x.json()['data']['shortcode_media']['edge_liked_by']['edges']:
                liker = str(item['node']['id'])
                users.append(liker)
                with open("target.txt", "r") as f:lines = f.read().splitlines()
                if liker not in lines:
                    with open('target.txt', 'a') as f:f.write(f'{liker}\n')
                if len(users) == num:break
            while x.json()['data']['shortcode_media']['edge_liked_by']['page_info']['has_next_page']:
                if len(users) == num:break
                end = x.json()['data']['shortcode_media']['edge_liked_by']['page_info']['end_cursor'] 
                print(f'[RUNNING] Collected {len(users)}/{num} users so far...')
                time.sleep(5)
                x = self.r.get('https://www.instagram.com/graphql/query/?query_hash=d5d763b1e2acf209d62d22d184488e57&variables={%22shortcode%22:%22'+code+'%22,%22include_reel%22:true,%22first%22:1000,%22after%22:%22'+end+'%22}')
                for item in x.json()['data']['shortcode_media']['edge_liked_by']['edges']:
                    liker = str(item['node']['id'])
                    users.append(liker)
                    with open("target.txt", "r") as f:lines = f.read().splitlines()
                    if liker not in lines:
                        with open('target.txt', 'a') as f:f.write(f'{liker}\n')
                    if len(users) == num:break
        
        if len(users) > 0:print(f'[DONE] Collected {len(users)} users!');time.sleep(4);return True
        else:print('[ERROR] Something went wrong...');time.sleep(4);return False

    def search(self,usernameName):
        if self.isloggedin:
            self.target = usernameName
            query = self.r.get('https://i.instagram.com/api/v1/users/' + str(usernameName) + '/usernameinfo/').json()
            if query['status'] =='ok':return str(query['user']['pk'])
            else:return 3

    def generateUUID(self, type):
        generated_uuid = str(uuid.uuid4())
        if (type):
            return generated_uuid
        else:
            return generated_uuid.replace('-', '')

    def post_share(self, media_id, recipients, text=None):
        if not isinstance(recipients, list):recipients = [str(recipients)]
        recipient_users = '"",""'.join(str(r) for r in recipients)
        boundary = self.uuid
        bodies = [ { 'type': 'form-data', 'name': 'media_id', 'data': media_id, }, { 'type': 'form-data', 'name': 'recipient_users', 'data': '[["{}"]]'.format(recipient_users), }, { 'type': 'form-data', 'name': 'client_context', 'data': self.uuid, }, { 'type': 'form-data', 'name': 'thread', 'data': '["0"]', }, { 'type': 'form-data', 'name': 'text', 'data': text or '', }, ]
        data = self.buildBody(bodies, boundary)
        headers= {'User-Agent': self.useragent, 'Proxy-Connection': 'keep-alive', 'Connection': 'keep-alive', 'Accept': '*/*', 'Content-Type': 'multipart/form-data; boundary={}'.format(boundary), 'Accept-Language': 'en-en'}
        return self.SendRequest('https://i.instagram.com/api/v1/direct_v2/threads/broadcast/media_share/?media_type=photo', data=data,headers=headers)

    def remove(self,recipient):
        global targets
        targets.remove(recipient)
        with open("target.txt", "r") as f:lines = f.readlines()
        with open("target.txt", "w") as f:
            for line in lines:
                if line.strip("\n") != recipient:
                    f.write(line)
    
    def message(self, target_user,text):
        target_user = f'[[{",".join([str(target_user)])}]]'
        token = str(random.randint(6800011111111111111, 6800099999999999999))
        data = {
            'text': text,
            '_uuid': self.uuid,
            '_csrftoken': self.token,
            'recipient_users': target_user,
            '_uid': self.username_id,
            'action': 'send_item',
            'client_context': token,
            "mutation_token": token,
            "nav_chain": "1qT:feed_timeline:1,1qT:feed_timeline:2,1qT:feed_timeline:3,7Az:direct_inbox:4,7Az:direct_inbox:5,5rG:direct_thread:7",
            "offline_threading_id": token,
        }
        #kwargs = {'action': 'send_item', 'is_shh_mode': '0', 'send_attribution': 'direct_thread', 'client_context': '6800052132112160764', 'mutation_token': '6800052132112160764', 'nav_chain': '1qT:feed_timeline:1,1qT:feed_timeline:2,1qT:feed_timeline:3,7Az:direct_inbox:4,7Az:direct_inbox:5,5rG:direct_thread:7', 'offline_threading_id': '6800052132112160764', 'text': 'yo', 'recipient_users': 237322046}
        return self.SendRequest(
            f"direct_v2/threads/broadcast/text/",
            data=self.generateSignature(json.dumps(data))),