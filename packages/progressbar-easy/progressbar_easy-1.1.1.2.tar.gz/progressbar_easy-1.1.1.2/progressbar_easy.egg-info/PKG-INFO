Metadata-Version: 2.1
Name: progressbar-easy
Version: 1.1.1.2
Summary: A simple progressbar to track progress with built in timer
Home-page: https://github.com/ThatOneShortGuy/progressbar_easy
Author: Braxton Brown
Author-email: braxton.brown@outlook.com
License: MIT
Keywords: progressbar,progress bar,progressbar_easy,easy progressbar,easy progress bar
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Education
Classifier: Operating System :: Microsoft :: Windows :: Windows 10
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Description-Content-Type: text/markdown
License-File: LICENSE

# Progress Bar
This is a simple progress bar that allows for easy use to display progress.

# Features
- Timer to estimate time remaining
- Timer adjusts to rates
- Learning rate can be changed
- Choice of length of bar
- Choice of character bar is made of
- Option for item count or percentage completed (or both)
- Option for method of computing completion time.

# Installation
Install with pip: `pip install progressbar_easy`

# Usage
Imported with `from progressbar import ProgressBar`

Initialize object with `bar = ProgressBar(number of iterations)`

Use in loop. Inside loop at the end, put `bar.update(K)` or `bar += K` where K is the number of iterations completed since last update.
Prefer `bar.update(K)` if you want to update the bar every iteration.

Defaults to use the Bellman equation to estimate time remaining.
Add `use_average=(True, N)` arguement to use the average of the last N iterations instead of Bellman equation.

Example: `bar = ProgressBar(range(2000), use_average=(True, 420)):`

## Or
Use as an iterator object

```Python
for i in ProgressBar(range(100), lr=.0001):
    ...
```


# Change Log

## 1.1.1 (4/21/2022)
- Added ability to use generators

## 1.1.0 (10/22/2021)
- Added ability to use the average time to estimate future time.
- Added docstrings.
- Improved performance when using "+=" opperator.
- Increased efficiency of object.

## 1.0.4.4 (6/11/2021)
- Bug Fixes

## 1.0.4 (6/11/2021)
- Added "__iter__" attribute to allow for more effective use in loops.

### Example:
```Python
for i in ProgressBar(range(10)):
    ...
```

## 1.0.3.3 (6/8/2021)
- Bug Fixes

## 1.0.3 (6/2/2021)
- Added ability to adjust "learning rate" for the rate of items
- Made "completed" arguement for "update" method default to None, which just means increment by one

## 1.0.2.2 (5/7/2021)
- Bug Fixes

## 1.0.2 (5/6/2021)
- Added support for updating multiple items (timer would update as one item)
- Added ability to adjust the starting rate of items for the timer
- Fixed bugs using "+=" (__iadd__) (caused timer to not work)

## 1.0.1.2 (5/6/2021)
- Bug Fixes

## 1.0.0 (5/6/2021)
- First Release

