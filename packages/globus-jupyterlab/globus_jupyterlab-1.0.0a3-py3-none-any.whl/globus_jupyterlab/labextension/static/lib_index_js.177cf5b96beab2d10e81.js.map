{"version":3,"file":"lib_index_js.177cf5b96beab2d10e81.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAwC;AACW;AACM;AACjB;AACA;AACK;AAC7C;AACA;AACA,oCAAoC,+CAAQ;AAC5C,4CAA4C,+CAAQ,GAAG,UAAU;AACjE,oCAAoC,+CAAQ;AAC5C,kCAAkC,+CAAQ;AAC1C,8DAA8D,+CAAQ;AACtE,sDAAsD,+CAAQ;AAC9D;AACA,mBAAmB,sDAAc,CAAC,sDAAU;AAC5C;AACA,kBAAkB,4DAAU;AAC5B,iBAAiB,2DAAS;AAC1B;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA;AACA,sFAAsF,WAAW;AACjG;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA,yBAAyB,IAAI,QAAQ,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4BAA4B,GAAG,eAAe;AACtF;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4BAA4B,GAAG,UAAU;AACjF;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4BAA4B,GAAG,0BAA0B;AAClG;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAU;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,8EAA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;;;ACjBe;AACjC,mBAAmB,4CAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACM,qBAAqB,4CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;AACL,CAAC;AACM,yBAAyB,gDAAQ;AACxC;AACA,YAAY,KAAK;AACjB;AACA,KAAK;AACL,YAAY,UAAU;AACtB;AACA,kEAAkE;AAClE;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;;;;ACjC8C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BiE;AACH;AACR;AACH;AACX;AACD;AACX;AAC5B;AACA;AACA;AACA;AACA;AACA,kBAAkB,gEAAS;AAC3B;AACA;AACA,mCAAmC,sEAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAU;AAC/C;AACA;AACA,oCAAoC,iDAAY;AAChD,mCAAmC,gEAAc,GAAG,SAAS;AAC7D;AACA,oCAAoC,gEAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oDAAU;AACvD;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,eAAe,wEAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oDAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kEAAkE,OAAO;AACzE;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFuC;AACV;AACA;AACI;AACE;AACD;AACD;AACT;AAC9C;AACA;AACA,4DAA4D,+CAAQ,GAAG,eAAe;AACtF;AACA,sBAAsB,yDAAiB,CAAC,iEAAU;AAClD,IAAI,gDAAS;AACb;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU,6BAA6B,sCAAsC,0DAAmB,CAAC,kEAAc,IAAI,4CAA4C,MAAM,0DAAmB,QAAQ,kCAAkC;AACjQ;AACO,2BAA2B,6DAAW;AAC7C,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,CAAC,wDAAU;AAC9C,YAAY,0DAAmB,CAAC,8CAAU;AAC1C,gBAAgB,0DAAmB,CAAC,oDAAM;AAC1C,oBAAoB,0DAAmB,CAAC,mDAAK,IAAI;AACjD,oCAAoC,0DAAmB,sBAAsB,WAAW,uFAAuF;AAC/K,2BAA2B;AAC3B;AACA","sources":["webpack://globus_jupyterlab/./lib/components/Endpoint.js","webpack://globus_jupyterlab/./lib/components/EndpointSearch.js","webpack://globus_jupyterlab/./lib/components/Endpoints.js","webpack://globus_jupyterlab/./lib/components/GlobusObjects.js","webpack://globus_jupyterlab/./lib/handler.js","webpack://globus_jupyterlab/./lib/index.js","webpack://globus_jupyterlab/./lib/widget.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useRecoilValue } from 'recoil';\nimport { requestAPI } from '../handler';\nimport { ConfigAtom } from './GlobusObjects';\nconst Endpoint = (props) => {\n    // Local State\n    const [apiError, setAPIError] = useState(null);\n    const [endpointList, setEndpointList] = useState({ DATA: [] });\n    const [endpoint, setEndpoint] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [selectedEndpointItems, setSelectedEndpointItems] = useState([]);\n    const [transferDirection, setTransferDirection] = useState(null);\n    // Recoil (global) State\n    const config = useRecoilValue(ConfigAtom);\n    // React Router history and params\n    let history = useHistory();\n    let params = useParams();\n    let endpointID = params.endpointID;\n    let path = params.path;\n    // ComponentDidMount Functions\n    useEffect(() => {\n        getEndpoint(endpointID);\n    }, [endpointID]);\n    useEffect(() => {\n        listEndpointItems(endpointID, path);\n    }, [endpointID, path]);\n    const getEndpoint = async (endpointID) => {\n        try {\n            let response = await fetch(`/globus-jupyterlab/endpoint_detail?endpoint=${endpointID}`, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            });\n            let endpoint = await response.json();\n            if ('error' in endpoint) {\n                throw endpoint;\n            }\n            setEndpoint(endpoint);\n        }\n        catch (error) {\n            setAPIError(error);\n        }\n    };\n    const listEndpointItems = async (endpointID, path = null) => {\n        setAPIError(null);\n        setEndpointList({ DATA: [] });\n        setLoading(true);\n        try {\n            let url = `/globus-jupyterlab/operation_ls?endpoint=${endpointID}`;\n            if (path) {\n                url = `${url}&path=${path}`;\n            }\n            const response = await fetch(url, {\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            });\n            const listItems = await response.json();\n            if ('error' in listItems) {\n                throw listItems;\n            }\n            setEndpointList(listItems);\n        }\n        catch (error) {\n            /* Note: This probably isn't a great UX to simply pop up a login page, but it\n            does demonstrate the base functionality for picking endpoints */\n            if ('login_url' in error) {\n                window.open(error.login_url, 'Globus Login', 'height=600,width=800').focus();\n            }\n            setAPIError(error);\n        }\n        setLoading(false);\n    };\n    // Event Handlers\n    const handleEndpointItemSelect = (event) => {\n        if (event.target.checked) {\n            setSelectedEndpointItems((selectedEndpointItems) => {\n                return [JSON.parse(event.target.value), ...selectedEndpointItems];\n            });\n        }\n        else {\n            const removeItem = JSON.parse(event.target.value);\n            const index = selectedEndpointItems\n                .map((item) => {\n                return item.name;\n            })\n                .indexOf(removeItem.name);\n            if (index > -1) {\n                selectedEndpointItems.splice(index, 1);\n                setSelectedEndpointItems(selectedEndpointItems);\n            }\n        }\n    };\n    const handleTransferDirection = (event) => {\n        setTransferDirection(event.currentTarget.value);\n    };\n    const handleTransferRequest = async (event) => {\n        event.preventDefault();\n        var transferItems = [];\n        var sourceEndpoint = transferDirection == 'transfer-to-endpoint' ? config.collection_id : endpoint.id;\n        var destinationEndpoint = transferDirection == 'transfer-to-endpoint' ? endpoint.id : config.collection_id;\n        console.log(props);\n        if (transferDirection == 'transfer-to-endpoint') {\n            // Loop through selectedJupyterItems from props\n            if (props.selectedJupyterItems.directories.length) {\n                for (let directory of props.selectedJupyterItems.directories) {\n                    transferItems.push({\n                        source_path: `${config.collection_base_path}/${directory.path}`,\n                        destination_path: directory.path,\n                        recursive: true\n                    });\n                }\n                ;\n            }\n            if (props.selectedJupyterItems.files.length) {\n                for (let file of props.selectedJupyterItems.files) {\n                    transferItems.push({\n                        source_path: `${config.collection_base_path}/${file.path}`,\n                        destination_path: file.path,\n                        recursive: false\n                    });\n                }\n            }\n        }\n        else {\n            // Loop through selectedEndpointItems from state\n            for (let selectedEndpointItem of selectedEndpointItems) {\n                transferItems.push({\n                    source_path: selectedEndpointItem.name,\n                    destination_path: `${config.collection_base_path}/${selectedEndpointItem.name}`,\n                    recursive: selectedEndpointItem.type == 'dir' ? true : false,\n                });\n            }\n            ;\n        }\n        let transferRequest = {\n            source_endpoint: sourceEndpoint,\n            destination_endpoint: destinationEndpoint,\n            DATA: transferItems,\n        };\n        console.log(transferRequest);\n        try {\n            const reply = await requestAPI('submit_transfer', {\n                body: JSON.stringify(transferRequest),\n                method: 'POST',\n            });\n            console.log(reply);\n        }\n        catch (reason) {\n            console.log(reason);\n            console.error(`Error on POST /globus-jupyterlab/submit_transfer ${transferRequest}.\\n${reason}`);\n        }\n    };\n    if (apiError) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"button\", { className: 'btn btn-sm btn-primary mb-4 mt-5', onClick: () => history.goBack() }, \"Back\"),\n            React.createElement(\"p\", { className: 'fw-bold mt-3 text-danger' },\n                \"Error: \",\n                apiError['error'],\n                \". Please try again.\")));\n    }\n    if (loading) {\n        return React.createElement(\"h5\", { className: 'mt-5' }, \"Loading\");\n    }\n    return (React.createElement(React.Fragment, null, endpointList['DATA'].length > 0 ? (React.createElement(\"div\", { className: 'mt-5' },\n        React.createElement(\"h5\", null,\n            \"Browsing Collection \",\n            endpoint ? endpoint.display_name : endpointID),\n        React.createElement(\"button\", { className: 'btn btn-sm btn-primary mb-4 mt-2', onClick: () => history.goBack() }, \"Back\"),\n        React.createElement(\"br\", null),\n        endpointList['DATA'].map((listItem) => {\n            return (React.createElement(\"div\", { className: 'form-check' }, listItem['type'] == 'dir' ? (React.createElement(React.Fragment, null,\n                React.createElement(\"input\", { onChange: handleEndpointItemSelect, className: 'form-check-input', type: 'checkbox', value: JSON.stringify(listItem), \"data-list-item-name\": listItem['name'] }),\n                React.createElement(\"label\", null,\n                    React.createElement(Link, { to: `/endpoints/${endpointID}/items/${listItem['name']}` },\n                        React.createElement(\"i\", { className: 'fa-solid fa-folder-open' }),\n                        \" \",\n                        listItem['name'])))) : (React.createElement(React.Fragment, null,\n                React.createElement(\"input\", { onChange: handleEndpointItemSelect, className: 'form-check-input', type: 'checkbox', value: JSON.stringify(listItem), \"data-list-item-name\": listItem['name'] }),\n                React.createElement(\"label\", null,\n                    React.createElement(\"i\", { className: 'fa-solid fa-file' }),\n                    \" \",\n                    listItem['name'])))));\n        }),\n        selectedEndpointItems.length > 0 && (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: 'form-check form-check-inline mt-4' },\n                React.createElement(\"input\", { className: 'form-check-input', onChange: handleTransferDirection, type: 'radio', name: 'transfer-direction', id: 'transfer-to-endpoint', value: 'transfer-to-endpoint' }),\n                React.createElement(\"label\", { className: 'form-check-label', htmlFor: 'transfer-to-endpoint' }, \"Transfer to Collection\")),\n            React.createElement(\"div\", { className: 'form-check form-check-inline' },\n                React.createElement(\"input\", { className: 'form-check-input', onChange: handleTransferDirection, type: 'radio', name: 'transfer-direction', id: 'transfer-from-endpoint', value: 'transfer-from-endpoint' }),\n                React.createElement(\"label\", { className: 'form-check-label', htmlFor: 'transfer-from-endpoint' }, \"Transfer from Collection\")),\n            React.createElement(\"div\", { className: 'form-check form-check-inline pl-0' },\n                React.createElement(\"button\", { className: 'btn btn-sm btn-primary', onClick: handleTransferRequest, type: 'button' }, \"Submit Transfer Request\")))))) : (React.createElement(\"div\", null,\n        React.createElement(\"button\", { className: 'btn btn-sm btn-primary mb-2 mt-3', onClick: () => history.goBack() }, \"Back\"),\n        React.createElement(\"p\", null, \"No files or folders found\")))));\n};\nexport default Endpoint;\n","import React, { useState } from 'react';\nimport { Route, useHistory } from 'react-router-dom';\nimport Endpoint from './Endpoint';\nimport Endpoints from './Endpoints';\nconst EndpointSearch = (props) => {\n    const [apiError, setAPIError] = useState(null);\n    const [endpoints, setEndpoints] = useState({ DATA: [] });\n    const [endpointValue, setEndpointValue] = useState('');\n    const [loading, setLoading] = useState(false);\n    const history = useHistory();\n    // Event Handlers\n    const handleEndpointValueChange = (event) => {\n        setEndpointValue(event.target.value);\n    };\n    const handleSearchEndpointClick = async (event) => {\n        setAPIError(null);\n        setEndpoints({ DATA: [] });\n        setLoading(true);\n        try {\n            let response = await fetch(`/globus-jupyterlab/endpoint_search?filter_fulltext=${endpointValue}`, {\n                headers: {\n                    Allow: 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            });\n            let endpoints = await response.json();\n            if ('error' in endpoints) {\n                throw endpoints;\n            }\n            setEndpoints(endpoints);\n            setLoading(false);\n            history.push('/endpoints');\n        }\n        catch (error) {\n            setLoading(false);\n            setAPIError(error);\n        }\n    };\n    if (apiError) {\n        return React.createElement(\"p\", { className: 'fw-bold text-danger' },\n            \"Error: \",\n            apiError['error'],\n            \". Please try again.\");\n    }\n    if (loading) {\n        return React.createElement(\"h5\", null, \"Loading\");\n    }\n    return (React.createElement(\"div\", { id: 'endpoint-search', className: 'mb-4' },\n        React.createElement(\"h5\", null, \"Search Collections for Transferring\"),\n        React.createElement(\"div\", { className: 'row' },\n            React.createElement(\"div\", { className: 'col-8' },\n                React.createElement(\"input\", { id: 'endpoint-input', className: 'form-control', type: 'text', value: endpointValue, onChange: handleEndpointValueChange })),\n            React.createElement(\"div\", { className: 'col' },\n                React.createElement(\"button\", { className: 'btn btn-primary', onClick: handleSearchEndpointClick }, \"Search Collections\"))),\n        React.createElement(Route, { exact: true, path: '/endpoints', render: (props) => {\n                return React.createElement(Endpoints, Object.assign({}, props, { endpoints: endpoints }));\n            } }),\n        React.createElement(Route, { exact: true, path: '/endpoints/:endpointID' },\n            React.createElement(Endpoint, { selectedJupyterItems: props.selectedJupyterItems })),\n        React.createElement(Route, { path: '/endpoints/:endpointID/items/:path' },\n            React.createElement(Endpoint, { selectedJupyterItems: props.selectedJupyterItems }))));\n};\nexport default EndpointSearch;\n","import { Link } from 'react-router-dom';\nimport React from 'react';\nconst Endpoints = (props) => {\n    return (React.createElement(\"div\", { className: 'row' }, props.endpoints['DATA'].length > 0 && (React.createElement(\"div\", { className: 'col-8' },\n        React.createElement(\"div\", { className: 'list-group' }, props.endpoints['DATA'].map((endpoint) => {\n            return (React.createElement(Link, { to: `/endpoints/${endpoint.id}`, className: 'list-group-item list-group-item-action flex-column align-items-start' },\n                React.createElement(\"h5\", { className: 'mb-1' },\n                    React.createElement(\"i\", { className: 'fa-solid fa-layer-group' }),\n                    \"\\u00A0\",\n                    endpoint.display_name),\n                React.createElement(\"p\", { className: 'mb-0 mt-2 fw-bold' }, \"Owner:\"),\n                React.createElement(\"p\", { className: 'mb-1' }, endpoint.owner_string),\n                endpoint.description && (React.createElement(React.Fragment, null,\n                    React.createElement(\"p\", { className: 'mb-0 mt-2 fw-bold' }, \"Description:\"),\n                    React.createElement(\"p\", { className: 'mb-1' }, endpoint.description)))));\n        }))))));\n};\nexport default Endpoints;\n","import { atom, selector } from 'recoil';\nexport const ConfigAtom = atom({\n    key: 'ConfigAtom',\n    default: {\n        collection_id: '',\n        collection_base_path: '',\n        is_gcp: false,\n        is_logged_in: false,\n        collection_id_owner: ''\n    },\n});\nexport const TransferAtom = atom({\n    key: 'TransferAtom',\n    default: {\n        source_endpoint: '',\n        destination_endpoint: '',\n        transfer_items: [{\n                source_path: '',\n                destination_path: '',\n                recursive: false\n            }],\n    },\n});\nexport const TransferSelector = selector({\n    key: 'TransferSelector',\n    get: ({ get }) => {\n        return get(TransferAtom);\n    },\n    set: ({ get, set }, newTransferObject) => {\n        let oldTransferObject = get(TransferAtom);\n        let updatedTransferObject = Object.assign(Object.assign({}, oldTransferObject), newTransferObject);\n        set(TransferAtom, updatedTransferObject);\n    },\n});\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'globus-jupyterlab', endPoint);\n    let response;\n    try {\n        console.log('making request to: ' + requestUrl);\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n","import { buildIcon, reactIcon } from '@jupyterlab/ui-components';\nimport { IFileBrowserFactory } from \"@jupyterlab/filebrowser\";\nimport { MainAreaWidget } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { GlobusWidget } from './widget';\nimport { requestAPI } from './handler';\nimport '../style/index.css';\nconst addJupyterCommands = (app, factory, commands) => {\n    for (let command of commands) {\n        app.commands.addCommand(command.command, {\n            label: command.label,\n            caption: command.caption,\n            icon: buildIcon,\n            execute: async () => {\n                var files = factory.tracker.currentWidget.selectedItems();\n                var jupyterToken = PageConfig.getToken();\n                var label = 'Globus Jupyterlab Transfer';\n                let jupyterItems = [], fileCheck = true;\n                while (fileCheck) {\n                    let file = files.next();\n                    if (file) {\n                        jupyterItems.push(file);\n                    }\n                    else {\n                        fileCheck = false;\n                    }\n                }\n                // GET config payload which contains basic auth data\n                const config = await requestAPI('config');\n                const isAuthenticated = config.is_logged_in;\n                // Start creating the widget, but don't attach unless authenticated\n                const content = new GlobusWidget(config, jupyterToken, jupyterItems);\n                const widget = new MainAreaWidget({ content });\n                widget.title.label = label;\n                widget.title.icon = reactIcon;\n                if (isAuthenticated) {\n                    app.shell.add(widget, 'main');\n                }\n                else {\n                    // Poll for successful authentication. \n                    let authInterval = window.setInterval(async () => {\n                        const config = await requestAPI('config');\n                        const isAuthenticated = config.is_logged_in;\n                        if (isAuthenticated) {\n                            app.shell.add(widget, 'main');\n                            clearInterval(authInterval);\n                        }\n                    }, 500);\n                    window.open('/globus-jupyterlab/login', '_blank');\n                }\n            },\n        });\n    }\n};\n/**\n * Globus plugin\n */\nexport const globus = {\n    id: '@jupyterlab/globus_jupyterlab',\n    autoStart: true,\n    requires: [IFileBrowserFactory],\n    activate: activateGlobus\n};\nasync function activateGlobus(app, factory) {\n    console.log('Globus Jupyterlab Extension Activated!');\n    // GET request\n    try {\n        const data = await requestAPI('config');\n        console.log('Fetching basic data about the notebook server environment:', data);\n        /*\n        Commands to initiate a Globus Transfer.\n        */\n        let commands = [\n            {\n                command: 'globus-jupyterlab-transfer/context-menu:open',\n                label: 'Initiate Globus Transfer',\n                caption: 'Login with Globus to initiate transfers',\n            },\n        ];\n        addJupyterCommands(app, factory, commands);\n    }\n    catch (reason) {\n        console.error(`Error on GET /globus_jupyterlab/config.\\n${reason}`);\n    }\n}\n/**\n * Export the plugin as default.\n */\nexport default globus;\n","import { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport React, { useEffect, useState } from 'react';\nimport { RecoilRoot, useSetRecoilState } from 'recoil';\nimport EndpointSearch from './components/EndpointSearch';\nimport { ConfigAtom } from './components/GlobusObjects';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst App = (props) => {\n    // Local state values\n    const [selectedJupyterItems, setSelectedJupyterItems] = useState({ isEmpty: true });\n    // Global Recoil state values\n    const setConfig = useSetRecoilState(ConfigAtom);\n    useEffect(() => {\n        setConfig(props.config);\n    }, [props.config]);\n    useEffect(() => {\n        getJupyterItems();\n    }, [props.jupyterItems]);\n    const getJupyterItems = async () => {\n        let directories = [];\n        let files = [];\n        let selectedJupyterItemsTemp = {};\n        for (let file of props.jupyterItems) {\n            try {\n                let response = await fetch(`/api/contents/${file.path}`, {\n                    headers: {\n                        Accept: 'application/json',\n                        Authorization: `token ${props.jupyterToken}`,\n                        'Content-Type': 'application/json',\n                    },\n                });\n                let temp = await response.json();\n                if (temp.type == 'directory') {\n                    directories.push(temp);\n                }\n                else {\n                    files.push(temp);\n                }\n            }\n            catch (error) {\n                console.log(error);\n            }\n        }\n        selectedJupyterItemsTemp['directories'] = directories;\n        selectedJupyterItemsTemp['files'] = files;\n        // If we have any file or folder, the payload is not empty\n        if (directories.length || files.length) {\n            selectedJupyterItemsTemp['isEmpty'] = false;\n        }\n        // Transfer direction inferred from selected files/folders\n        if ((files.length && directories.length) || (files.length && !directories.length)) {\n            selectedJupyterItemsTemp['transferDirection'] = 'toEndpoint';\n        }\n        else {\n            selectedJupyterItemsTemp['transferDirection'] = 'toFromEndpoint';\n        }\n        //@ts-ignore\n        setSelectedJupyterItems(selectedJupyterItemsTemp);\n    };\n    return (React.createElement(\"div\", { className: 'container pt-5' }, !selectedJupyterItems['isEmpty'] ? (React.createElement(EndpointSearch, { selectedJupyterItems: selectedJupyterItems })) : (React.createElement(\"p\", { className: 'fw-bold text-danger' }, \"No files selected\"))));\n};\nexport class GlobusWidget extends ReactWidget {\n    constructor(config = {}, jupyterToken = '', jupyterItems = []) {\n        super();\n        this.config = config;\n        this.jupyterItems = jupyterItems;\n        this.jupyterToken = jupyterToken;\n        this.addClass('jp-ReactWidget');\n    }\n    render() {\n        return (React.createElement(HashRouter, null,\n            React.createElement(RecoilRoot, null,\n                React.createElement(Switch, null,\n                    React.createElement(Route, { path: '/', render: (props) => {\n                            return (React.createElement(App, Object.assign({}, props, { config: this.config, jupyterItems: this.jupyterItems, jupyterToken: this.jupyterToken })));\n                        } })))));\n    }\n}\n"],"names":[],"sourceRoot":""}