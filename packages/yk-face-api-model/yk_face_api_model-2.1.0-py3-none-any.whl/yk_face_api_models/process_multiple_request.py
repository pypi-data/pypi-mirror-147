""" Process Multiple Request Model and Schema """
# coding: utf-8

from __future__ import absolute_import
from typing import List  # noqa: F401
from yk_utils.models import Model, deserialize_model
from yk_face_api_models.process_request_config import ProcessRequestConfig


ProcessMultipleRequestSchema = \
    {
        "description": "Process Multiple Images",
        "type": "object",
        "required": [
            "images"
        ],
        "properties": {
            "images": {
                "title": "Images to process",
			    "type": "array",
                "items": {
                    "type": "string"
                },
                "minItems": 2,
                "uniqueItems": True
            },
            "processings": {
                "description": "Requested biometric processings.",
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "detect",
                        "analyze",
                        "templify",
                        "none"
                    ]
                },
                "default": [
                    "detect",
                    "analyze",
                    "templify"
                ]
            },
            "configuration": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Configuration name"
                        },
                        "value": {
                            "type": "string",
                            "description": "Configuration value"
                        }
                    }
                },
                "description": "Extensible configurations for biometric processing.",
                "default": []
            },
            "minimum_score": {
                "description": "Minimum match score",
                "type": "number",
                "format": "double",
                "minimum": -1,
                "default": -1
            }
        }
    }


class ProcessMultipleRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, images: List[str]=None, processings: List[str]=None, configuration: List[ProcessRequestConfig]=None, minimum_score: float=-1.0):  # noqa: E501
        """ProcessMultipleRequest - a model defined in Swagger

        :param images: The images of this ProcessMultipleRequest.  # noqa: E501
        :type images: List[str]
        :param processings: The processings of this ProcessMultipleRequest.  # noqa: E501
        :type processings: List[str]
        :param configuration: The configuration of this ProcessMultipleRequest.  # noqa: E501
        :type configuration: List[object]
        :param minimum_score: The minimum_score of this ProcessMultipleRequest.  # noqa: E501
        :type minimum_score: float
        """
        self.swagger_types = {
            'images': List[str],
            'processings': List[str],
            'configuration': List[ProcessRequestConfig],
            'minimum_score': float
        }

        self.attribute_map = {
            'images': 'images',
            'processings': 'processings',
            'configuration': 'configuration',
            'minimum_score': 'minimum_score'
        }

        self._images = images
        self._processings = processings
        self._configuration = configuration
        self._minimum_score = minimum_score

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessMultipleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The process_multiple_request of this ProcessMultipleRequest.  # noqa: E501
        :rtype: ProcessMultipleRequest
        """
        return deserialize_model(dikt, cls)

    @property
    def images(self) -> List[str]:
        """Gets the images of this ProcessMultipleRequest.


        :return: The images of this ProcessMultipleRequest.
        :rtype: List[str]
        """
        return self._images

    @images.setter
    def images(self, images: List[str]):
        """Sets the images of this ProcessMultipleRequest.


        :param images: The images of this ProcessMultipleRequest.
        :type images: List[str]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")  # noqa: E501

        self._images = images

    @property
    def processings(self) -> List[str]:
        """Gets the processings of this ProcessMultipleRequest.

        Requested biometric processings.  # noqa: E501

        :return: The processings of this ProcessMultipleRequest.
        :rtype: List[str]
        """
        return self._processings

    @processings.setter
    def processings(self, processings: List[str]):
        """Sets the processings of this ProcessMultipleRequest.

        Requested biometric processings.  # noqa: E501

        :param processings: The processings of this ProcessMultipleRequest.
        :type processings: List[str]
        """
        allowed_values = ["detect", "analyze", "templify", "none"]  # noqa: E501
        if not set(processings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `processings` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(processings) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._processings = processings

    @property
    def configuration(self) -> List[ProcessRequestConfig]:
        """Gets the configuration of this ProcessMultipleRequest.

        Extensible configurations for biometric processing.  # noqa: E501

        :return: The configuration of this ProcessMultipleRequest.
        :rtype: List[object]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: List[ProcessRequestConfig]):
        """Sets the configuration of this ProcessMultipleRequest.

        Extensible configurations for biometric processing.  # noqa: E501

        :param configuration: The configuration of this ProcessMultipleRequest.
        :type configuration: List[object]
        """

        self._configuration = configuration

    @property
    def minimum_score(self) -> float:
        """Gets the minimum_score of this ProcessMultipleRequest.

        Minimum match score  # noqa: E501

        :return: The minimum_score of this ProcessMultipleRequest.
        :rtype: float
        """
        return self._minimum_score

    @minimum_score.setter
    def minimum_score(self, minimum_score: float):
        """Sets the minimum_score of this ProcessMultipleRequest.

        Minimum match score  # noqa: E501

        :param minimum_score: The minimum_score of this ProcessMultipleRequest.
        :type minimum_score: float
        """
        if minimum_score is not None and minimum_score < -1:  # noqa: E501
            raise ValueError("Invalid value for `minimum_score`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._minimum_score = minimum_score
