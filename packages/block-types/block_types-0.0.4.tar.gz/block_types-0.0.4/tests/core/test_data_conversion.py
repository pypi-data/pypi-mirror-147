# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_tests/core/tst.data_conversion.ipynb (unless otherwise specified).

__all__ = ['test_data_converter_functions', 'test_no_converter', 'test_pandas_converter',
           'generate_input_for_window_generator', 'test_window2d_to_3d_converter', 'test_data_converter_factory']

# Cell
import pytest
import os
import joblib
from IPython.display import display
import pandas as pd
import numpy as np

from block_types.core.data_conversion import *
from block_types.core.block_types import Component
from block_types.utils.utils import remove_previous_results
import block_types.config.bt_defaults as dflt

# Cell
#@pytest.fixture (name='example_people_data')
#def example_people_data_fixture():
#    return example_people_data()

# Comes from data_conversion.ipynb, cell
#@pytest.mark.reference_fails
def test_data_converter_functions ():
    X, y = np.array([[1,2,3]]), np.array([0,1,0])

    dc = DataConverter (convert_before=lambda x: x.ravel(),
                        convert_after=lambda x: {'test':x})

    Xr, yr = dc.convert_before_fitting (X, y)
    assert (Xr==X.ravel()).all() and Xr.shape==(3,)
    assert (yr==y).all()

    Xr = dc.convert_before_transforming (X)
    assert (Xr==X.ravel()).all() and Xr.shape==(3,)

    Xr = dc.convert_after_fitting (X)
    assert (Xr['test']==X).all() and Xr['test'].shape==(1,3) and list(Xr.keys())==['test']

    Xr = dc.convert_after_transforming (X)
    assert (Xr['test']==X).all() and Xr['test'].shape==(1,3) and list(Xr.keys())==['test']

    dc = DataConverter (convert_before_fitting=lambda x, y: (x.ravel(), y),
                        convert_after_fitting=lambda x: {'train':x},
                        convert_before_transforming=lambda x: x.tolist(),
                        convert_after_transforming=lambda x: {'test':x})

    Xr, yr = dc.convert_before_fitting (X, y)
    assert (Xr==X.ravel()).all() and Xr.shape==(3,)
    assert (yr==y).all()

    Xr = dc.convert_after_fitting (X)
    assert (Xr['train']==X).all() and Xr['train'].shape==(1,3) and list(Xr.keys())==['train']

    Xr = dc.convert_before_transforming (X)
    assert (Xr==X.tolist()) and type(Xr) is list

    Xr = dc.convert_after_transforming (X)
    assert (Xr['test']==X).all() and Xr['test'].shape==(1,3) and list(Xr.keys())==['test']

    dc = DataConverter (convert_before_fitting=lambda x, y: (x.ravel(), y),
                        convert_after_transforming=lambda x: {'test':x})

    Xr, yr = dc.convert_before_fitting (X, y)
    assert (Xr==X.ravel()).all() and Xr.shape==(3,)
    assert (yr==y).all()

    Xr = dc.convert_after_fitting (X)
    assert Xr is X

    Xr = dc.convert_before_transforming (X)
    assert Xr is X

    Xr = dc.convert_after_transforming (X)
    assert (Xr['test']==X).all() and Xr['test'].shape==(1,3) and list(Xr.keys())==['test']

# Comes from data_conversion.ipynb, cell
#@pytest.mark.reference_fails
def test_no_converter ():
    dc = NoConverter()
    X, y = [1,2,3], [0,1,0]
    Xr, yr = dc.convert_before_fitting (X, y)
    assert X==Xr
    assert y==yr

    # We can pass conversion functions to the NoConverter class.
    # In that case, the NoConverter behaves as the base class DataConverter
    X, y = np.array([[1,2,3]]), np.array([0,1,0])
    dc = NoConverter (convert_before_fitting=lambda x, y: (x.ravel(), y),
                        convert_after_transforming=lambda x: {'test':x})

    Xr, yr = dc.convert_before_fitting (X, y)
    assert (Xr==X.ravel()).all() and Xr.shape==(3,)
    assert (yr==y).all()

    Xr = dc.convert_after_fitting (X)
    assert Xr is X

    Xr = dc.convert_before_transforming (X)
    assert Xr is X

    Xr = dc.convert_after_transforming (X)
    assert (Xr['test']==X).all() and Xr['test'].shape==(1,3) and list(Xr.keys())==['test']

# Comes from data_conversion.ipynb, cell
#@pytest.mark.reference_fails
def test_pandas_converter ():
    dc = PandasConverter()

    # First case: if the input is a DataFrame, the output is a DataFrame,
    # even when the transformer outputs a numpy array
    dc = PandasConverter()
    X, y = pd.DataFrame({'a':[1,2,3],'b':[4,5,6]}), np.array([0,1,0])
    Xr, yr = dc.convert_before_fitting (X, y)
    assert (X==Xr).all().all() and (y==yr).all() and type(Xr)==type(X) and type(yr)==type(y)
    Xr = dc.convert_before_transforming (X)
    assert (X==Xr).all().all() and type(Xr)==type(X)
    Xo = dc.convert_after_transforming (Xr.values)
    assert (X==Xo).all().all() and type(Xo)==type(X)

    # Second case: the transformer outputs a DataFrame
    Xo = dc.convert_after_transforming (Xr)
    assert (X==Xo).all().all()

    # Third case: if the input is a numpy array, the output is a numpy array,
    # when the transformer outputs a numpy array
    X, y = np.array([[1,2,3],[4,5,6]]), np.array([0,1,0])
    Xr, yr = dc.convert_before_fitting (X, y)
    assert (X==Xr).all().all() and (y==yr).all() and type(Xr)==type(X) and type(yr)==type(y)
    Xr = dc.convert_before_transforming (X)
    assert (X==Xr).all().all() and type(Xr)==type(X)
    Xo = dc.convert_after_transforming (Xr)
    assert (X==Xo).all().all() and type(Xo)==type(X)

    # Fourth case: if the transformer outputs a DataFrame, the output is
    # a DataFrame, even if the input was a numpy array.
    # TODO: we might want to have the possibility to output a numpy
    # array in this case.
    Xo = dc.convert_after_transforming (pd.DataFrame(Xr))
    assert (X==Xo).all().all() and type(Xo)==pd.DataFrame

# Comes from data_conversion.ipynb, cell
def generate_input_for_window_generator ():
    index = pd.period_range (start='2022-01-14', end='2022-01-18', freq='H')
    df = pd.DataFrame (index=index.to_timestamp (), columns=['a','b','label'])
    df.index.name = 'timestamp'
    df['a'] = 10
    df['b'] = 20
    df['label'] = 0
    df.loc[('2022-01-15' <= index) & (index < '2022-01-16'),'label'] = 1
    df.loc[('2022-01-15' <= index) & (index < '2022-01-16'),'a'] = 11
    df.loc[('2022-01-15' <= index) & (index < '2022-01-16'),'b'] = 21
    return df

# Comes from data_conversion.ipynb, cell
def test_window2d_to_3d_converter ():
    from block_types.blocks.preprocessing import WindowGenerator

    df = generate_input_for_window_generator ()
    window_generator = WindowGenerator(sequence_length=3, sequence_stride=1, sampling_interval=60)
    window_data = window_generator.transform(df)
    assert window_data.shape==(91, 7)

    dc = Window2Dto3Dconverter (sequence_length=3)
    dfr = dc.convert_before_transforming(window_data)
    assert dfr.shape==(91, 3, 2)

    window_datar = dc.convert_after_transforming(dfr)
    #print (window_datar.shape)
    assert window_datar.shape==(91, 7)

    dfr2,y = dc.convert_before_fitting (window_data)
    assert dfr2.shape==(91, 3, 2) and y.shape==(91,)

    aux = dc.convert_after_fitting (dfr2)
    assert aux.shape==(91, 3, 2)

    assert (np.unique(dfr.sum(axis=1))==[30,33,60,63]).all()
    assert (np.where(dfr.sum(axis=1)[:,0]==33)[0]==range(22,44)).all()
    assert (np.where(dfr.sum(axis=1)[:,1]==63)[0]==range(22,44)).all()

# Comes from data_conversion.ipynb, cell
#@pytest.mark.reference_fails
def test_data_converter_factory ():
    converter = data_converter_factory ('PandasConverter', separate_labels=False)
    assert type(converter) is PandasConverter
    assert converter.separate_labels is False