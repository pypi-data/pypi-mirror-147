# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.applicationmodel.core
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.ui
except Exception:
    pass

try:
    import winsdk.windows.ui.startscreen
except Exception:
    pass

class ShareWindowCommand(enum.IntEnum):
    NONE = 0
    START_SHARING = 1
    STOP_SHARING = 2

class AdaptiveCardBuilder(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> AdaptiveCardBuilder: ...
    @staticmethod
    def create_adaptive_card_from_json(value: str) -> typing.Optional[IAdaptiveCard]: ...

class ShareWindowCommandEventArgs(_winrt.Object, interfaces=[]):
    command: ShareWindowCommand
    window_id: winsdk.windows.ui.WindowId
    @staticmethod
    def _from(obj: _winrt.Object) -> ShareWindowCommandEventArgs: ...

class ShareWindowCommandSource(_winrt.Object, interfaces=[]):
    @staticmethod
    def _from(obj: _winrt.Object) -> ShareWindowCommandSource: ...
    @staticmethod
    def get_for_current_view() -> typing.Optional[ShareWindowCommandSource]: ...
    def report_command_changed(self) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def add_command_invoked(self, handler: winsdk.windows.foundation.TypedEventHandler[ShareWindowCommandSource, ShareWindowCommandEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_command_invoked(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_command_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[ShareWindowCommandSource, ShareWindowCommandEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_command_requested(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class TaskbarManager(_winrt.Object, interfaces=[]):
    is_pinning_allowed: _winrt.Boolean
    is_supported: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> TaskbarManager: ...
    @staticmethod
    def get_default() -> typing.Optional[TaskbarManager]: ...
    def is_app_list_entry_pinned_async(self, app_list_entry: typing.Optional[winsdk.windows.applicationmodel.core.AppListEntry]) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...
    def is_current_app_pinned_async(self) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...
    def is_secondary_tile_pinned_async(self, tile_id: str) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...
    def request_pin_app_list_entry_async(self, app_list_entry: typing.Optional[winsdk.windows.applicationmodel.core.AppListEntry]) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...
    def request_pin_current_app_async(self) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...
    def request_pin_secondary_tile_async(self, secondary_tile: typing.Optional[winsdk.windows.ui.startscreen.SecondaryTile]) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...
    def try_unpin_secondary_tile_async(self, tile_id: str) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...

class IAdaptiveCard(typing.Protocol):
    @staticmethod
    def _from(obj: _winrt.Object) -> IAdaptiveCard: ...
    def to_json(self) -> str: ...

class IAdaptiveCardBuilderStatics(typing.Protocol):
    @staticmethod
    def _from(obj: _winrt.Object) -> IAdaptiveCardBuilderStatics: ...
    def create_adaptive_card_from_json(self, value: str) -> typing.Optional[IAdaptiveCard]: ...

