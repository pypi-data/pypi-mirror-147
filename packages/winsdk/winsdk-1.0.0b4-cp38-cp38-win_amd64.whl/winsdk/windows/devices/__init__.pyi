# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.devices.adc.provider
except Exception:
    pass

try:
    import winsdk.windows.devices.gpio.provider
except Exception:
    pass

try:
    import winsdk.windows.devices.i2c.provider
except Exception:
    pass

try:
    import winsdk.windows.devices.pwm.provider
except Exception:
    pass

try:
    import winsdk.windows.devices.spi.provider
except Exception:
    pass

class LowLevelDevicesAggregateProvider(_winrt.Object, interfaces=[ILowLevelDevicesAggregateProvider]):
    adc_controller_provider: typing.Optional[winsdk.windows.devices.adc.provider.IAdcControllerProvider]
    gpio_controller_provider: typing.Optional[winsdk.windows.devices.gpio.provider.IGpioControllerProvider]
    i2c_controller_provider: typing.Optional[winsdk.windows.devices.i2c.provider.II2cControllerProvider]
    pwm_controller_provider: typing.Optional[winsdk.windows.devices.pwm.provider.IPwmControllerProvider]
    spi_controller_provider: typing.Optional[winsdk.windows.devices.spi.provider.ISpiControllerProvider]
    @staticmethod
    def _from(obj: _winrt.Object) -> LowLevelDevicesAggregateProvider: ...
    def __init__(self, adc: typing.Optional[winsdk.windows.devices.adc.provider.IAdcControllerProvider], pwm: typing.Optional[winsdk.windows.devices.pwm.provider.IPwmControllerProvider], gpio: typing.Optional[winsdk.windows.devices.gpio.provider.IGpioControllerProvider], i2c: typing.Optional[winsdk.windows.devices.i2c.provider.II2cControllerProvider], spi: typing.Optional[winsdk.windows.devices.spi.provider.ISpiControllerProvider]) -> None: ...

class LowLevelDevicesController(_winrt.Object, interfaces=[]):
    default_provider: typing.Optional[ILowLevelDevicesAggregateProvider]
    @staticmethod
    def _from(obj: _winrt.Object) -> LowLevelDevicesController: ...

class ILowLevelDevicesAggregateProvider(typing.Protocol):
    adc_controller_provider: typing.Optional[winsdk.windows.devices.adc.provider.IAdcControllerProvider]
    gpio_controller_provider: typing.Optional[winsdk.windows.devices.gpio.provider.IGpioControllerProvider]
    i2c_controller_provider: typing.Optional[winsdk.windows.devices.i2c.provider.II2cControllerProvider]
    pwm_controller_provider: typing.Optional[winsdk.windows.devices.pwm.provider.IPwmControllerProvider]
    spi_controller_provider: typing.Optional[winsdk.windows.devices.spi.provider.ISpiControllerProvider]
    @staticmethod
    def _from(obj: _winrt.Object) -> ILowLevelDevicesAggregateProvider: ...

