# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.globalization
except Exception:
    pass

try:
    import winsdk.windows.networking
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.web.http
except Exception:
    pass

class HttpCacheDirectiveHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpNameValueHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    shared_max_age: typing.Optional[typing.Optional[winsdk.windows.foundation.TimeSpan]]
    min_fresh: typing.Optional[typing.Optional[winsdk.windows.foundation.TimeSpan]]
    max_stale: typing.Optional[typing.Optional[winsdk.windows.foundation.TimeSpan]]
    max_age: typing.Optional[typing.Optional[winsdk.windows.foundation.TimeSpan]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpCacheDirectiveHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpNameValueHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpNameValueHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpNameValueHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpNameValueHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpNameValueHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpNameValueHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpNameValueHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpNameValueHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpNameValueHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpChallengeHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    parameters: typing.Optional[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    scheme: str
    token: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpChallengeHeaderValue: ...
    @typing.overload
    def __init__(self, scheme: str) -> None: ...
    @typing.overload
    def __init__(self, scheme: str, token: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpChallengeHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpChallengeHeaderValue]]: ...

class HttpChallengeHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpChallengeHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpChallengeHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpChallengeHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpChallengeHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpChallengeHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpChallengeHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpChallengeHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpChallengeHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpChallengeHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpChallengeHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpChallengeHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpChallengeHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpConnectionOptionHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    token: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpConnectionOptionHeaderValue: ...
    def __init__(self, token: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpConnectionOptionHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpConnectionOptionHeaderValue]]: ...

class HttpConnectionOptionHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpConnectionOptionHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpConnectionOptionHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpConnectionOptionHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpConnectionOptionHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpConnectionOptionHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpConnectionOptionHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpConnectionOptionHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpConnectionOptionHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpConnectionOptionHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpConnectionOptionHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpConnectionOptionHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpConnectionOptionHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpContentCodingHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    content_coding: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpContentCodingHeaderValue: ...
    def __init__(self, content_coding: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpContentCodingHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpContentCodingHeaderValue]]: ...

class HttpContentCodingHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpContentCodingHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpContentCodingHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpContentCodingHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpContentCodingHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpContentCodingHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpContentCodingHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpContentCodingHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpContentCodingHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpContentCodingHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpContentCodingHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpContentCodingHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpContentCodingHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpContentCodingWithQualityHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    content_coding: str
    quality: typing.Optional[typing.Optional[_winrt.Double]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpContentCodingWithQualityHeaderValue: ...
    @typing.overload
    def __init__(self, content_coding: str) -> None: ...
    @typing.overload
    def __init__(self, content_coding: str, quality: _winrt.Double) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpContentCodingWithQualityHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpContentCodingWithQualityHeaderValue]]: ...

class HttpContentCodingWithQualityHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpContentCodingWithQualityHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpContentCodingWithQualityHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpContentCodingWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpContentCodingWithQualityHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpContentCodingWithQualityHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpContentCodingWithQualityHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpContentCodingWithQualityHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpContentCodingWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpContentCodingWithQualityHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpContentCodingWithQualityHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpContentCodingWithQualityHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpContentCodingWithQualityHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpContentDispositionHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    size: typing.Optional[typing.Optional[_winrt.UInt64]]
    name: str
    file_name_star: str
    file_name: str
    disposition_type: str
    parameters: typing.Optional[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpContentDispositionHeaderValue: ...
    def __init__(self, disposition_type: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpContentDispositionHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpContentDispositionHeaderValue]]: ...

class HttpContentHeaderCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    last_modified: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    expires: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    content_type: typing.Optional[HttpMediaTypeHeaderValue]
    content_range: typing.Optional[HttpContentRangeHeaderValue]
    content_m_d5: typing.Optional[winsdk.windows.storage.streams.IBuffer]
    content_location: typing.Optional[winsdk.windows.foundation.Uri]
    content_length: typing.Optional[typing.Optional[_winrt.UInt64]]
    content_disposition: typing.Optional[HttpContentDispositionHeaderValue]
    content_encoding: typing.Optional[HttpContentCodingHeaderValueCollection]
    content_language: typing.Optional[HttpLanguageHeaderValueCollection]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpContentHeaderCollection: ...
    def __init__(self) -> None: ...
    def append(self, name: str, value: str) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str) -> _winrt.Boolean: ...
    def insert(self, key: str, value: str) -> _winrt.Boolean: ...
    def lookup(self, key: str) -> str: ...
    def remove(self, key: str) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str) -> _winrt.Boolean: ...

class HttpContentRangeHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    unit: str
    first_byte_position: typing.Optional[typing.Optional[_winrt.UInt64]]
    last_byte_position: typing.Optional[typing.Optional[_winrt.UInt64]]
    length: typing.Optional[typing.Optional[_winrt.UInt64]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpContentRangeHeaderValue: ...
    @typing.overload
    def __init__(self, length: _winrt.UInt64) -> None: ...
    @typing.overload
    def __init__(self, from_: _winrt.UInt64, to: _winrt.UInt64) -> None: ...
    @typing.overload
    def __init__(self, from_: _winrt.UInt64, to: _winrt.UInt64, length: _winrt.UInt64) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpContentRangeHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpContentRangeHeaderValue]]: ...

class HttpCookiePairHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    value: str
    name: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpCookiePairHeaderValue: ...
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, value: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpCookiePairHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpCookiePairHeaderValue]]: ...

class HttpCookiePairHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpCookiePairHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpCookiePairHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpCookiePairHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpCookiePairHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpCookiePairHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpCookiePairHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpCookiePairHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpCookiePairHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpCookiePairHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpCookiePairHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpCookiePairHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpCookiePairHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpCredentialsHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    parameters: typing.Optional[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    scheme: str
    token: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpCredentialsHeaderValue: ...
    @typing.overload
    def __init__(self, scheme: str) -> None: ...
    @typing.overload
    def __init__(self, scheme: str, token: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpCredentialsHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpCredentialsHeaderValue]]: ...

class HttpDateOrDeltaHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    date: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    delta: typing.Optional[typing.Optional[winsdk.windows.foundation.TimeSpan]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpDateOrDeltaHeaderValue: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpDateOrDeltaHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpDateOrDeltaHeaderValue]]: ...

class HttpExpectationHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    value: str
    name: str
    parameters: typing.Optional[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpExpectationHeaderValue: ...
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, value: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpExpectationHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpExpectationHeaderValue]]: ...

class HttpExpectationHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpExpectationHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpExpectationHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpExpectationHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpExpectationHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpExpectationHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpExpectationHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpExpectationHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpExpectationHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpExpectationHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpExpectationHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpExpectationHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpExpectationHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpLanguageHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[winsdk.windows.globalization.Language], winsdk.windows.foundation.collections.IIterable[winsdk.windows.globalization.Language], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpLanguageHeaderValueCollection: ...
    def append(self, value: typing.Optional[winsdk.windows.globalization.Language]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[winsdk.windows.globalization.Language]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[winsdk.windows.globalization.Language]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[winsdk.windows.globalization.Language]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.globalization.Language]]: ...
    def index_of(self, value: typing.Optional[winsdk.windows.globalization.Language]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[winsdk.windows.globalization.Language]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[winsdk.windows.globalization.Language]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[winsdk.windows.globalization.Language]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpLanguageRangeWithQualityHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    language_range: str
    quality: typing.Optional[typing.Optional[_winrt.Double]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpLanguageRangeWithQualityHeaderValue: ...
    @typing.overload
    def __init__(self, language_range: str) -> None: ...
    @typing.overload
    def __init__(self, language_range: str, quality: _winrt.Double) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpLanguageRangeWithQualityHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpLanguageRangeWithQualityHeaderValue]]: ...

class HttpLanguageRangeWithQualityHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpLanguageRangeWithQualityHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpLanguageRangeWithQualityHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpLanguageRangeWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpLanguageRangeWithQualityHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpLanguageRangeWithQualityHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpLanguageRangeWithQualityHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpLanguageRangeWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpLanguageRangeWithQualityHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpLanguageRangeWithQualityHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpMediaTypeHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    media_type: str
    char_set: str
    parameters: typing.Optional[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpMediaTypeHeaderValue: ...
    def __init__(self, media_type: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpMediaTypeHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpMediaTypeHeaderValue]]: ...

class HttpMediaTypeWithQualityHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    quality: typing.Optional[typing.Optional[_winrt.Double]]
    media_type: str
    char_set: str
    parameters: typing.Optional[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpMediaTypeWithQualityHeaderValue: ...
    @typing.overload
    def __init__(self, media_type: str) -> None: ...
    @typing.overload
    def __init__(self, media_type: str, quality: _winrt.Double) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpMediaTypeWithQualityHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpMediaTypeWithQualityHeaderValue]]: ...

class HttpMediaTypeWithQualityHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpMediaTypeWithQualityHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpMediaTypeWithQualityHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpMediaTypeWithQualityHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpMediaTypeWithQualityHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpMediaTypeWithQualityHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpMediaTypeWithQualityHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpMediaTypeWithQualityHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpMediaTypeWithQualityHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpMediaTypeWithQualityHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpMethodHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[winsdk.windows.web.http.HttpMethod], winsdk.windows.foundation.collections.IIterable[winsdk.windows.web.http.HttpMethod], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpMethodHeaderValueCollection: ...
    def append(self, value: typing.Optional[winsdk.windows.web.http.HttpMethod]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[winsdk.windows.web.http.HttpMethod]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[winsdk.windows.web.http.HttpMethod]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[winsdk.windows.web.http.HttpMethod]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.web.http.HttpMethod]]: ...
    def index_of(self, value: typing.Optional[winsdk.windows.web.http.HttpMethod]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[winsdk.windows.web.http.HttpMethod]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[winsdk.windows.web.http.HttpMethod]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[winsdk.windows.web.http.HttpMethod]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpNameValueHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    value: str
    name: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpNameValueHeaderValue: ...
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, value: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpNameValueHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpNameValueHeaderValue]]: ...

class HttpProductHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    name: str
    version: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpProductHeaderValue: ...
    @typing.overload
    def __init__(self, product_name: str) -> None: ...
    @typing.overload
    def __init__(self, product_name: str, product_version: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpProductHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpProductHeaderValue]]: ...

class HttpProductInfoHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    comment: str
    product: typing.Optional[HttpProductHeaderValue]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpProductInfoHeaderValue: ...
    @typing.overload
    def __init__(self, product_comment: str) -> None: ...
    @typing.overload
    def __init__(self, product_name: str, product_version: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpProductInfoHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpProductInfoHeaderValue]]: ...

class HttpProductInfoHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpProductInfoHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpProductInfoHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpProductInfoHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpProductInfoHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpProductInfoHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpProductInfoHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpProductInfoHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpProductInfoHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpProductInfoHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpProductInfoHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpProductInfoHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpProductInfoHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

class HttpRequestHeaderCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    referer: typing.Optional[winsdk.windows.foundation.Uri]
    proxy_authorization: typing.Optional[HttpCredentialsHeaderValue]
    max_forwards: typing.Optional[typing.Optional[_winrt.UInt32]]
    if_unmodified_since: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    if_modified_since: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    host: typing.Optional[winsdk.windows.networking.HostName]
    from_: str
    date: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    authorization: typing.Optional[HttpCredentialsHeaderValue]
    accept: typing.Optional[HttpMediaTypeWithQualityHeaderValueCollection]
    accept_encoding: typing.Optional[HttpContentCodingWithQualityHeaderValueCollection]
    accept_language: typing.Optional[HttpLanguageRangeWithQualityHeaderValueCollection]
    cache_control: typing.Optional[HttpCacheDirectiveHeaderValueCollection]
    connection: typing.Optional[HttpConnectionOptionHeaderValueCollection]
    cookie: typing.Optional[HttpCookiePairHeaderValueCollection]
    expect: typing.Optional[HttpExpectationHeaderValueCollection]
    transfer_encoding: typing.Optional[HttpTransferCodingHeaderValueCollection]
    user_agent: typing.Optional[HttpProductInfoHeaderValueCollection]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpRequestHeaderCollection: ...
    def append(self, name: str, value: str) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str) -> _winrt.Boolean: ...
    def insert(self, key: str, value: str) -> _winrt.Boolean: ...
    def lookup(self, key: str) -> str: ...
    def remove(self, key: str) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str) -> _winrt.Boolean: ...

class HttpResponseHeaderCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    retry_after: typing.Optional[HttpDateOrDeltaHeaderValue]
    location: typing.Optional[winsdk.windows.foundation.Uri]
    date: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    age: typing.Optional[typing.Optional[winsdk.windows.foundation.TimeSpan]]
    allow: typing.Optional[HttpMethodHeaderValueCollection]
    cache_control: typing.Optional[HttpCacheDirectiveHeaderValueCollection]
    connection: typing.Optional[HttpConnectionOptionHeaderValueCollection]
    proxy_authenticate: typing.Optional[HttpChallengeHeaderValueCollection]
    transfer_encoding: typing.Optional[HttpTransferCodingHeaderValueCollection]
    www_authenticate: typing.Optional[HttpChallengeHeaderValueCollection]
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpResponseHeaderCollection: ...
    def append(self, name: str, value: str) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IMapView[str, str]]: ...
    def has_key(self, key: str) -> _winrt.Boolean: ...
    def insert(self, key: str, value: str) -> _winrt.Boolean: ...
    def lookup(self, key: str) -> str: ...
    def remove(self, key: str) -> None: ...
    def to_string(self) -> str: ...
    def try_append_without_validation(self, name: str, value: str) -> _winrt.Boolean: ...

class HttpTransferCodingHeaderValue(_winrt.Object, interfaces=[winsdk.windows.foundation.IStringable]):
    parameters: typing.Optional[winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]]
    value: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpTransferCodingHeaderValue: ...
    def __init__(self, input: str) -> None: ...
    @staticmethod
    def parse(input: str) -> typing.Optional[HttpTransferCodingHeaderValue]: ...
    def to_string(self) -> str: ...
    @staticmethod
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, typing.Optional[HttpTransferCodingHeaderValue]]: ...

class HttpTransferCodingHeaderValueCollection(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IVector[HttpTransferCodingHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpTransferCodingHeaderValue], winsdk.windows.foundation.IStringable]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> HttpTransferCodingHeaderValueCollection: ...
    def append(self, value: typing.Optional[HttpTransferCodingHeaderValue]) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[HttpTransferCodingHeaderValue]]: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[HttpTransferCodingHeaderValue]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[HttpTransferCodingHeaderValue]]]: ...
    def get_view(self) -> typing.Optional[winsdk.windows.foundation.collections.IVectorView[HttpTransferCodingHeaderValue]]: ...
    def index_of(self, value: typing.Optional[HttpTransferCodingHeaderValue]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[HttpTransferCodingHeaderValue]) -> None: ...
    def parse_add(self, input: str) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[HttpTransferCodingHeaderValue]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[HttpTransferCodingHeaderValue]) -> None: ...
    def to_string(self) -> str: ...
    def try_parse_add(self, input: str) -> _winrt.Boolean: ...

