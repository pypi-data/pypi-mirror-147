# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.applicationmodel.appointments.appointmentsprovider
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.background
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.contacts
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.datatransfer.sharetarget
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.search
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.userdataaccounts.provider
except Exception:
    pass

try:
    import winsdk.windows.devices.enumeration
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.media.speechrecognition
except Exception:
    pass

try:
    import winsdk.windows.security.authentication.web
except Exception:
    pass

try:
    import winsdk.windows.security.authentication.web.provider
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.pickers.provider
except Exception:
    pass

try:
    import winsdk.windows.storage.provider
except Exception:
    pass

try:
    import winsdk.windows.storage.search
except Exception:
    pass

try:
    import winsdk.windows.system
except Exception:
    pass

try:
    import winsdk.windows.ui.notifications
except Exception:
    pass

try:
    import winsdk.windows.ui.viewmanagement
except Exception:
    pass

class ActivationKind(enum.IntEnum):
    LAUNCH = 0
    SEARCH = 1
    SHARE_TARGET = 2
    FILE = 3
    PROTOCOL = 4
    FILE_OPEN_PICKER = 5
    FILE_SAVE_PICKER = 6
    CACHED_FILE_UPDATER = 7
    CONTACT_PICKER = 8
    DEVICE = 9
    PRINT_TASK_SETTINGS = 10
    CAMERA_SETTINGS = 11
    RESTRICTED_LAUNCH = 12
    APPOINTMENTS_PROVIDER = 13
    CONTACT = 14
    LOCK_SCREEN_CALL = 15
    VOICE_COMMAND = 16
    LOCK_SCREEN = 17
    PICKER_RETURNED = 1000
    WALLET_ACTION = 1001
    PICK_FILE_CONTINUATION = 1002
    PICK_SAVE_FILE_CONTINUATION = 1003
    PICK_FOLDER_CONTINUATION = 1004
    WEB_AUTHENTICATION_BROKER_CONTINUATION = 1005
    WEB_ACCOUNT_PROVIDER = 1006
    COMPONENT_U_I = 1007
    PROTOCOL_FOR_RESULTS = 1009
    TOAST_NOTIFICATION = 1010
    PRINT3_D_WORKFLOW = 1011
    DIAL_RECEIVER = 1012
    DEVICE_PAIRING = 1013
    USER_DATA_ACCOUNTS_PROVIDER = 1014
    FILE_PICKER_EXPERIENCE = 1015
    LOCK_SCREEN_COMPONENT = 1016
    CONTACT_PANEL = 1017
    PRINT_WORKFLOW_FOREGROUND_TASK = 1018
    GAME_U_I_PROVIDER = 1019
    STARTUP_TASK = 1020
    COMMAND_LINE_LAUNCH = 1021
    BARCODE_SCANNER_PROVIDER = 1022
    PRINT_SUPPORT_JOB_U_I = 1023
    PRINT_SUPPORT_SETTINGS_U_I = 1024
    PHONE_CALL_ACTIVATION = 1025
    VPN_FOREGROUND = 1026

class ApplicationExecutionState(enum.IntEnum):
    NOT_RUNNING = 0
    RUNNING = 1
    SUSPENDED = 2
    TERMINATED = 3
    CLOSED_BY_USER = 4

class AppointmentsProviderAddAppointmentActivatedEventArgs(_winrt.Object, interfaces=[IAppointmentsProviderAddAppointmentActivatedEventArgs, IAppointmentsProviderActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    add_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> AppointmentsProviderAddAppointmentActivatedEventArgs: ...

class AppointmentsProviderRemoveAppointmentActivatedEventArgs(_winrt.Object, interfaces=[IAppointmentsProviderRemoveAppointmentActivatedEventArgs, IAppointmentsProviderActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    remove_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> AppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class AppointmentsProviderReplaceAppointmentActivatedEventArgs(_winrt.Object, interfaces=[IAppointmentsProviderReplaceAppointmentActivatedEventArgs, IAppointmentsProviderActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    replace_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> AppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class AppointmentsProviderShowAppointmentDetailsActivatedEventArgs(_winrt.Object, interfaces=[IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, IAppointmentsProviderActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    instance_start_date: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    local_id: str
    roaming_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> AppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class AppointmentsProviderShowTimeFrameActivatedEventArgs(_winrt.Object, interfaces=[IAppointmentsProviderShowTimeFrameActivatedEventArgs, IAppointmentsProviderActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    duration: winsdk.windows.foundation.TimeSpan
    time_to_show: winsdk.windows.foundation.DateTime
    @staticmethod
    def _from(obj: _winrt.Object) -> AppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class BackgroundActivatedEventArgs(_winrt.Object, interfaces=[IBackgroundActivatedEventArgs]):
    task_instance: typing.Optional[winsdk.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundActivatedEventArgs: ...

class BarcodeScannerPreviewActivatedEventArgs(_winrt.Object, interfaces=[IBarcodeScannerPreviewActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    connection_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> BarcodeScannerPreviewActivatedEventArgs: ...

class CachedFileUpdaterActivatedEventArgs(_winrt.Object, interfaces=[ICachedFileUpdaterActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    cached_file_updater_u_i: typing.Optional[winsdk.windows.storage.provider.CachedFileUpdaterUI]
    @staticmethod
    def _from(obj: _winrt.Object) -> CachedFileUpdaterActivatedEventArgs: ...

class CommandLineActivatedEventArgs(_winrt.Object, interfaces=[ICommandLineActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[CommandLineActivationOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> CommandLineActivatedEventArgs: ...

class CommandLineActivationOperation(_winrt.Object, interfaces=[]):
    exit_code: _winrt.Int32
    arguments: str
    current_directory_path: str
    @staticmethod
    def _from(obj: _winrt.Object) -> CommandLineActivationOperation: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class ContactPanelActivatedEventArgs(_winrt.Object, interfaces=[IContactPanelActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactPanel]
    @staticmethod
    def _from(obj: _winrt.Object) -> ContactPanelActivatedEventArgs: ...

class DeviceActivatedEventArgs(_winrt.Object, interfaces=[IDeviceActivatedEventArgs, IActivatedEventArgs, IApplicationViewActivatedEventArgs, IViewSwitcherProvider, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    device_information_id: str
    verb: str
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: _winrt.Object) -> DeviceActivatedEventArgs: ...

class DevicePairingActivatedEventArgs(_winrt.Object, interfaces=[IDevicePairingActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    device_information: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]
    @staticmethod
    def _from(obj: _winrt.Object) -> DevicePairingActivatedEventArgs: ...

class DialReceiverActivatedEventArgs(_winrt.Object, interfaces=[IDialReceiverActivatedEventArgs, ILaunchActivatedEventArgs, IActivatedEventArgs, IApplicationViewActivatedEventArgs, IViewSwitcherProvider, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    app_name: str
    arguments: str
    tile_id: str
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: _winrt.Object) -> DialReceiverActivatedEventArgs: ...

class FileActivatedEventArgs(_winrt.Object, interfaces=[IFileActivatedEventArgs, IActivatedEventArgs, IFileActivatedEventArgsWithNeighboringFiles, IFileActivatedEventArgsWithCallerPackageFamilyName, IApplicationViewActivatedEventArgs, IViewSwitcherProvider, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    caller_package_family_name: str
    neighboring_files_query: typing.Optional[winsdk.windows.storage.search.StorageFileQueryResult]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: _winrt.Object) -> FileActivatedEventArgs: ...

class FileOpenPickerActivatedEventArgs(_winrt.Object, interfaces=[IFileOpenPickerActivatedEventArgs, IActivatedEventArgs, IFileOpenPickerActivatedEventArgs2, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_open_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileOpenPickerUI]
    caller_package_family_name: str
    @staticmethod
    def _from(obj: _winrt.Object) -> FileOpenPickerActivatedEventArgs: ...

class FileOpenPickerContinuationEventArgs(_winrt.Object, interfaces=[IFileOpenPickerContinuationEventArgs, IContinuationActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]
    @staticmethod
    def _from(obj: _winrt.Object) -> FileOpenPickerContinuationEventArgs: ...

class FileSavePickerActivatedEventArgs(_winrt.Object, interfaces=[IFileSavePickerActivatedEventArgs, IActivatedEventArgs, IFileSavePickerActivatedEventArgs2, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_save_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileSavePickerUI]
    caller_package_family_name: str
    enterprise_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> FileSavePickerActivatedEventArgs: ...

class FileSavePickerContinuationEventArgs(_winrt.Object, interfaces=[IFileSavePickerContinuationEventArgs, IContinuationActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    file: typing.Optional[winsdk.windows.storage.StorageFile]
    @staticmethod
    def _from(obj: _winrt.Object) -> FileSavePickerContinuationEventArgs: ...

class FolderPickerContinuationEventArgs(_winrt.Object, interfaces=[IFolderPickerContinuationEventArgs, IContinuationActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    folder: typing.Optional[winsdk.windows.storage.StorageFolder]
    @staticmethod
    def _from(obj: _winrt.Object) -> FolderPickerContinuationEventArgs: ...

class LaunchActivatedEventArgs(_winrt.Object, interfaces=[ILaunchActivatedEventArgs, IActivatedEventArgs, IApplicationViewActivatedEventArgs, IPrelaunchActivatedEventArgs, IViewSwitcherProvider, ILaunchActivatedEventArgs2, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    arguments: str
    tile_id: str
    tile_activated_info: typing.Optional[TileActivatedInfo]
    prelaunch_activated: _winrt.Boolean
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: _winrt.Object) -> LaunchActivatedEventArgs: ...

class LockScreenActivatedEventArgs(_winrt.Object, interfaces=[ILockScreenActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    info: typing.Optional[_winrt.Object]
    @staticmethod
    def _from(obj: _winrt.Object) -> LockScreenActivatedEventArgs: ...

class LockScreenComponentActivatedEventArgs(_winrt.Object, interfaces=[IActivatedEventArgs]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> LockScreenComponentActivatedEventArgs: ...

class PhoneCallActivatedEventArgs(_winrt.Object, interfaces=[IPhoneCallActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    line_id: uuid.UUID
    @staticmethod
    def _from(obj: _winrt.Object) -> PhoneCallActivatedEventArgs: ...

class PickerReturnedActivatedEventArgs(_winrt.Object, interfaces=[IPickerReturnedActivatedEventArgs, IActivatedEventArgs]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    picker_operation_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> PickerReturnedActivatedEventArgs: ...

class ProtocolActivatedEventArgs(_winrt.Object, interfaces=[IProtocolActivatedEventArgs, IActivatedEventArgs, IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, IApplicationViewActivatedEventArgs, IViewSwitcherProvider, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: _winrt.Object) -> ProtocolActivatedEventArgs: ...

class ProtocolForResultsActivatedEventArgs(_winrt.Object, interfaces=[IProtocolForResultsActivatedEventArgs, IActivatedEventArgs, IProtocolActivatedEventArgs, IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, IApplicationViewActivatedEventArgs, IViewSwitcherProvider, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    protocol_for_results_operation: typing.Optional[winsdk.windows.system.ProtocolForResultsOperation]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: _winrt.Object) -> ProtocolForResultsActivatedEventArgs: ...

class RestrictedLaunchActivatedEventArgs(_winrt.Object, interfaces=[IRestrictedLaunchActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    shared_context: typing.Optional[_winrt.Object]
    @staticmethod
    def _from(obj: _winrt.Object) -> RestrictedLaunchActivatedEventArgs: ...

class SearchActivatedEventArgs(_winrt.Object, interfaces=[ISearchActivatedEventArgs, IActivatedEventArgs, IApplicationViewActivatedEventArgs, ISearchActivatedEventArgsWithLinguisticDetails, IViewSwitcherProvider, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    language: str
    query_text: str
    linguistic_details: typing.Optional[winsdk.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    @staticmethod
    def _from(obj: _winrt.Object) -> SearchActivatedEventArgs: ...

class ShareTargetActivatedEventArgs(_winrt.Object, interfaces=[IShareTargetActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    share_operation: typing.Optional[winsdk.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> ShareTargetActivatedEventArgs: ...

class SplashScreen(_winrt.Object, interfaces=[]):
    image_location: winsdk.windows.foundation.Rect
    @staticmethod
    def _from(obj: _winrt.Object) -> SplashScreen: ...
    def add_dismissed(self, handler: winsdk.windows.foundation.TypedEventHandler[SplashScreen, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_dismissed(self, cookie: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class StartupTaskActivatedEventArgs(_winrt.Object, interfaces=[IStartupTaskActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    task_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> StartupTaskActivatedEventArgs: ...

class TileActivatedInfo(_winrt.Object, interfaces=[]):
    recently_shown_notifications: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.ui.notifications.ShownTileNotification]]
    @staticmethod
    def _from(obj: _winrt.Object) -> TileActivatedInfo: ...

class ToastNotificationActivatedEventArgs(_winrt.Object, interfaces=[IToastNotificationActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser, IApplicationViewActivatedEventArgs]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    argument: str
    user_input: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    @staticmethod
    def _from(obj: _winrt.Object) -> ToastNotificationActivatedEventArgs: ...

class UserDataAccountProviderActivatedEventArgs(_winrt.Object, interfaces=[IUserDataAccountProviderActivatedEventArgs, IActivatedEventArgs]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    operation: typing.Optional[winsdk.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> UserDataAccountProviderActivatedEventArgs: ...

class VoiceCommandActivatedEventArgs(_winrt.Object, interfaces=[IVoiceCommandActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    result: typing.Optional[winsdk.windows.media.speechrecognition.SpeechRecognitionResult]
    @staticmethod
    def _from(obj: _winrt.Object) -> VoiceCommandActivatedEventArgs: ...

class WebAccountProviderActivatedEventArgs(_winrt.Object, interfaces=[IWebAccountProviderActivatedEventArgs, IActivatedEventArgs, IActivatedEventArgsWithUser]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[winsdk.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebAccountProviderActivatedEventArgs: ...

class WebAuthenticationBrokerContinuationEventArgs(_winrt.Object, interfaces=[IWebAuthenticationBrokerContinuationEventArgs, IContinuationActivatedEventArgs, IActivatedEventArgs]):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    web_authentication_result: typing.Optional[winsdk.windows.security.authentication.web.WebAuthenticationResult]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebAuthenticationBrokerContinuationEventArgs: ...

class IActivatedEventArgs(typing.Protocol):
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IActivatedEventArgs: ...

class IActivatedEventArgsWithUser(typing.Protocol):
    user: typing.Optional[winsdk.windows.system.User]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IActivatedEventArgsWithUser: ...

class IApplicationViewActivatedEventArgs(typing.Protocol):
    currently_shown_application_view_id: _winrt.Int32
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IApplicationViewActivatedEventArgs: ...

class IAppointmentsProviderActivatedEventArgs(typing.Protocol):
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IAppointmentsProviderActivatedEventArgs: ...

class IAppointmentsProviderAddAppointmentActivatedEventArgs(typing.Protocol):
    add_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IAppointmentsProviderAddAppointmentActivatedEventArgs: ...

class IAppointmentsProviderRemoveAppointmentActivatedEventArgs(typing.Protocol):
    remove_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IAppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class IAppointmentsProviderReplaceAppointmentActivatedEventArgs(typing.Protocol):
    replace_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IAppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(typing.Protocol):
    instance_start_date: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    local_id: str
    roaming_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class IAppointmentsProviderShowTimeFrameActivatedEventArgs(typing.Protocol):
    duration: winsdk.windows.foundation.TimeSpan
    time_to_show: winsdk.windows.foundation.DateTime
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IAppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class IBackgroundActivatedEventArgs(typing.Protocol):
    task_instance: typing.Optional[winsdk.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: _winrt.Object) -> IBackgroundActivatedEventArgs: ...

class IBarcodeScannerPreviewActivatedEventArgs(typing.Protocol):
    connection_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IBarcodeScannerPreviewActivatedEventArgs: ...

class ICachedFileUpdaterActivatedEventArgs(typing.Protocol):
    cached_file_updater_u_i: typing.Optional[winsdk.windows.storage.provider.CachedFileUpdaterUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> ICachedFileUpdaterActivatedEventArgs: ...

class ICommandLineActivatedEventArgs(typing.Protocol):
    operation: typing.Optional[CommandLineActivationOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> ICommandLineActivatedEventArgs: ...

class IContactPanelActivatedEventArgs(typing.Protocol):
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactPanel]
    @staticmethod
    def _from(obj: _winrt.Object) -> IContactPanelActivatedEventArgs: ...

class IContinuationActivatedEventArgs(typing.Protocol):
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IContinuationActivatedEventArgs: ...

class IDeviceActivatedEventArgs(typing.Protocol):
    device_information_id: str
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IDeviceActivatedEventArgs: ...

class IDevicePairingActivatedEventArgs(typing.Protocol):
    device_information: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IDevicePairingActivatedEventArgs: ...

class IDialReceiverActivatedEventArgs(typing.Protocol):
    app_name: str
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IDialReceiverActivatedEventArgs: ...

class IFileActivatedEventArgs(typing.Protocol):
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileActivatedEventArgs: ...

class IFileActivatedEventArgsWithCallerPackageFamilyName(typing.Protocol):
    caller_package_family_name: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileActivatedEventArgsWithCallerPackageFamilyName: ...

class IFileActivatedEventArgsWithNeighboringFiles(typing.Protocol):
    neighboring_files_query: typing.Optional[winsdk.windows.storage.search.StorageFileQueryResult]
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileActivatedEventArgsWithNeighboringFiles: ...

class IFileOpenPickerActivatedEventArgs(typing.Protocol):
    file_open_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileOpenPickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileOpenPickerActivatedEventArgs: ...

class IFileOpenPickerActivatedEventArgs2(typing.Protocol):
    caller_package_family_name: str
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileOpenPickerActivatedEventArgs2: ...

class IFileOpenPickerContinuationEventArgs(typing.Protocol):
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileOpenPickerContinuationEventArgs: ...

class IFileSavePickerActivatedEventArgs(typing.Protocol):
    file_save_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileSavePickerUI]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileSavePickerActivatedEventArgs: ...

class IFileSavePickerActivatedEventArgs2(typing.Protocol):
    caller_package_family_name: str
    enterprise_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileSavePickerActivatedEventArgs2: ...

class IFileSavePickerContinuationEventArgs(typing.Protocol):
    file: typing.Optional[winsdk.windows.storage.StorageFile]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFileSavePickerContinuationEventArgs: ...

class IFolderPickerContinuationEventArgs(typing.Protocol):
    folder: typing.Optional[winsdk.windows.storage.StorageFolder]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IFolderPickerContinuationEventArgs: ...

class ILaunchActivatedEventArgs(typing.Protocol):
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> ILaunchActivatedEventArgs: ...

class ILaunchActivatedEventArgs2(typing.Protocol):
    tile_activated_info: typing.Optional[TileActivatedInfo]
    arguments: str
    tile_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> ILaunchActivatedEventArgs2: ...

class ILockScreenActivatedEventArgs(typing.Protocol):
    info: typing.Optional[_winrt.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> ILockScreenActivatedEventArgs: ...

class IPhoneCallActivatedEventArgs(typing.Protocol):
    line_id: uuid.UUID
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IPhoneCallActivatedEventArgs: ...

class IPickerReturnedActivatedEventArgs(typing.Protocol):
    picker_operation_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IPickerReturnedActivatedEventArgs: ...

class IPrelaunchActivatedEventArgs(typing.Protocol):
    prelaunch_activated: _winrt.Boolean
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IPrelaunchActivatedEventArgs: ...

class IProtocolActivatedEventArgs(typing.Protocol):
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IProtocolActivatedEventArgs: ...

class IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData(typing.Protocol):
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData: ...

class IProtocolForResultsActivatedEventArgs(typing.Protocol):
    protocol_for_results_operation: typing.Optional[winsdk.windows.system.ProtocolForResultsOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IProtocolForResultsActivatedEventArgs: ...

class IRestrictedLaunchActivatedEventArgs(typing.Protocol):
    shared_context: typing.Optional[_winrt.Object]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IRestrictedLaunchActivatedEventArgs: ...

class ISearchActivatedEventArgs(typing.Protocol):
    language: str
    query_text: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> ISearchActivatedEventArgs: ...

class ISearchActivatedEventArgsWithLinguisticDetails(typing.Protocol):
    linguistic_details: typing.Optional[winsdk.windows.applicationmodel.search.SearchPaneQueryLinguisticDetails]
    @staticmethod
    def _from(obj: _winrt.Object) -> ISearchActivatedEventArgsWithLinguisticDetails: ...

class IShareTargetActivatedEventArgs(typing.Protocol):
    share_operation: typing.Optional[winsdk.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IShareTargetActivatedEventArgs: ...

class IStartupTaskActivatedEventArgs(typing.Protocol):
    task_id: str
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IStartupTaskActivatedEventArgs: ...

class IToastNotificationActivatedEventArgs(typing.Protocol):
    argument: str
    user_input: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IToastNotificationActivatedEventArgs: ...

class IUserDataAccountProviderActivatedEventArgs(typing.Protocol):
    operation: typing.Optional[winsdk.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IUserDataAccountProviderActivatedEventArgs: ...

class IViewSwitcherProvider(typing.Protocol):
    view_switcher: typing.Optional[winsdk.windows.ui.viewmanagement.ActivationViewSwitcher]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IViewSwitcherProvider: ...

class IVoiceCommandActivatedEventArgs(typing.Protocol):
    result: typing.Optional[winsdk.windows.media.speechrecognition.SpeechRecognitionResult]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IVoiceCommandActivatedEventArgs: ...

class IWebAccountProviderActivatedEventArgs(typing.Protocol):
    operation: typing.Optional[winsdk.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IWebAccountProviderActivatedEventArgs: ...

class IWebAuthenticationBrokerContinuationEventArgs(typing.Protocol):
    web_authentication_result: typing.Optional[winsdk.windows.security.authentication.web.WebAuthenticationResult]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    kind: ActivationKind
    previous_execution_state: ApplicationExecutionState
    splash_screen: typing.Optional[SplashScreen]
    @staticmethod
    def _from(obj: _winrt.Object) -> IWebAuthenticationBrokerContinuationEventArgs: ...

