# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.applicationmodel
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.activation
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.appointments.appointmentsprovider
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.background
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.contacts
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.core
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.datatransfer
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.datatransfer.sharetarget
except Exception:
    pass

try:
    import winsdk.windows.applicationmodel.userdataaccounts.provider
except Exception:
    pass

try:
    import winsdk.windows.devices.enumeration
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.media.speechrecognition
except Exception:
    pass

try:
    import winsdk.windows.security.authentication.web
except Exception:
    pass

try:
    import winsdk.windows.security.authentication.web.provider
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.pickers.provider
except Exception:
    pass

try:
    import winsdk.windows.storage.provider
except Exception:
    pass

try:
    import winsdk.windows.storage.search
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.system
except Exception:
    pass

try:
    import winsdk.windows.ui
except Exception:
    pass

try:
    import winsdk.windows.web
except Exception:
    pass

try:
    import winsdk.windows.web.http
except Exception:
    pass

try:
    import winsdk.windows.web.ui
except Exception:
    pass

class PrintContent(enum.IntEnum):
    ALL_PAGES = 0
    CURRENT_PAGE = 1
    CUSTOM_PAGE_RANGE = 2
    CURRENT_SELECTION = 3

class ActivatedDeferral(_winrt.Object, interfaces=[]):
    @staticmethod
    def _from(obj: _winrt.Object) -> ActivatedDeferral: ...
    def complete(self) -> None: ...

class ActivatedOperation(_winrt.Object, interfaces=[]):
    @staticmethod
    def _from(obj: _winrt.Object) -> ActivatedOperation: ...
    def get_deferral(self) -> typing.Optional[ActivatedDeferral]: ...

class BackgroundActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IBackgroundActivatedEventArgs]):
    task_instance: typing.Optional[winsdk.windows.applicationmodel.background.IBackgroundTaskInstance]
    @staticmethod
    def _from(obj: _winrt.Object) -> BackgroundActivatedEventArgs: ...

class EnteredBackgroundEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.IEnteredBackgroundEventArgs]):
    @staticmethod
    def _from(obj: _winrt.Object) -> EnteredBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class HtmlPrintDocumentSource(_winrt.Object, interfaces=[winsdk.windows.graphics.printing.IPrintDocumentSource, winsdk.windows.foundation.IClosable]):
    top_margin: _winrt.Single
    shrink_to_fit: _winrt.Boolean
    right_margin: _winrt.Single
    percent_scale: _winrt.Single
    left_margin: _winrt.Single
    enable_header_footer: _winrt.Boolean
    content: PrintContent
    bottom_margin: _winrt.Single
    page_range: str
    @staticmethod
    def _from(obj: _winrt.Object) -> HtmlPrintDocumentSource: ...
    def close(self) -> None: ...
    def try_set_page_range(self, str_page_range: str) -> _winrt.Boolean: ...

class LeavingBackgroundEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.ILeavingBackgroundEventArgs]):
    @staticmethod
    def _from(obj: _winrt.Object) -> LeavingBackgroundEventArgs: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class NewWebUIViewCreatedEventArgs(_winrt.Object, interfaces=[]):
    activated_event_args: typing.Optional[winsdk.windows.applicationmodel.activation.IActivatedEventArgs]
    has_pending_navigate: _winrt.Boolean
    web_u_i_view: typing.Optional[WebUIView]
    @staticmethod
    def _from(obj: _winrt.Object) -> NewWebUIViewCreatedEventArgs: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.foundation.Deferral]: ...

class SuspendingDeferral(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.ISuspendingDeferral]):
    @staticmethod
    def _from(obj: _winrt.Object) -> SuspendingDeferral: ...
    def complete(self) -> None: ...

class SuspendingEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.ISuspendingEventArgs]):
    suspending_operation: typing.Optional[winsdk.windows.applicationmodel.SuspendingOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> SuspendingEventArgs: ...

class SuspendingOperation(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.ISuspendingOperation]):
    deadline: winsdk.windows.foundation.DateTime
    @staticmethod
    def _from(obj: _winrt.Object) -> SuspendingOperation: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.applicationmodel.SuspendingDeferral]: ...

class WebUIApplication(_winrt.Object):
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIApplication: ...
    @staticmethod
    def enable_prelaunch(value: _winrt.Boolean) -> None: ...
    @staticmethod
    def request_restart_async(launch_arguments: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.applicationmodel.core.AppRestartFailureReason]: ...
    @staticmethod
    def request_restart_for_user_async(user: typing.Optional[winsdk.windows.system.User], launch_arguments: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.applicationmodel.core.AppRestartFailureReason]: ...
    @staticmethod
    def add_background_activated(handler: typing.Optional[BackgroundActivatedEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_background_activated(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @staticmethod
    def add_new_web_u_i_view_created(handler: winsdk.windows.foundation.EventHandler[NewWebUIViewCreatedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_new_web_u_i_view_created(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @staticmethod
    def add_entered_background(handler: typing.Optional[EnteredBackgroundEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_entered_background(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @staticmethod
    def add_leaving_background(handler: typing.Optional[LeavingBackgroundEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_leaving_background(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @staticmethod
    def add_activated(handler: typing.Optional[ActivatedEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_activated(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @staticmethod
    def add_navigated(handler: typing.Optional[NavigatedEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_navigated(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @staticmethod
    def add_resuming(handler: typing.Optional[ResumingEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_resuming(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    @staticmethod
    def add_suspending(handler: typing.Optional[SuspendingEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    @staticmethod
    def remove_suspending(token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IAppointmentsProviderAddAppointmentActivatedEventArgs, winsdk.windows.applicationmodel.activation.IAppointmentsProviderActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    add_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.AddAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIAppointmentsProviderAddAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IAppointmentsProviderRemoveAppointmentActivatedEventArgs, winsdk.windows.applicationmodel.activation.IAppointmentsProviderActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    remove_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.RemoveAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IAppointmentsProviderReplaceAppointmentActivatedEventArgs, winsdk.windows.applicationmodel.activation.IAppointmentsProviderActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    replace_appointment_operation: typing.Optional[winsdk.windows.applicationmodel.appointments.appointmentsprovider.ReplaceAppointmentOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs: ...

class WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, winsdk.windows.applicationmodel.activation.IAppointmentsProviderActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    instance_start_date: typing.Optional[typing.Optional[winsdk.windows.foundation.DateTime]]
    local_id: str
    roaming_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIAppointmentsProviderShowAppointmentDetailsActivatedEventArgs: ...

class WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IAppointmentsProviderShowTimeFrameActivatedEventArgs, winsdk.windows.applicationmodel.activation.IAppointmentsProviderActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    verb: str
    duration: winsdk.windows.foundation.TimeSpan
    time_to_show: winsdk.windows.foundation.DateTime
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs: ...

class WebUIBackgroundTaskInstance(_winrt.Object):
    current: typing.Optional[IWebUIBackgroundTaskInstance]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIBackgroundTaskInstance: ...

class WebUIBackgroundTaskInstanceRuntimeClass(_winrt.Object, interfaces=[IWebUIBackgroundTaskInstance, winsdk.windows.applicationmodel.background.IBackgroundTaskInstance]):
    progress: _winrt.UInt32
    instance_id: uuid.UUID
    suspended_count: _winrt.UInt32
    task: typing.Optional[winsdk.windows.applicationmodel.background.BackgroundTaskRegistration]
    trigger_details: typing.Optional[_winrt.Object]
    succeeded: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIBackgroundTaskInstanceRuntimeClass: ...
    def get_deferral(self) -> typing.Optional[winsdk.windows.applicationmodel.background.BackgroundTaskDeferral]: ...
    def add_canceled(self, cancel_handler: typing.Optional[winsdk.windows.applicationmodel.background.BackgroundTaskCanceledEventHandler]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_canceled(self, cookie: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class WebUIBarcodeScannerPreviewActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IBarcodeScannerPreviewActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    connection_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIBarcodeScannerPreviewActivatedEventArgs: ...

class WebUICachedFileUpdaterActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.ICachedFileUpdaterActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    cached_file_updater_u_i: typing.Optional[winsdk.windows.storage.provider.CachedFileUpdaterUI]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUICachedFileUpdaterActivatedEventArgs: ...

class WebUICommandLineActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.ICommandLineActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[winsdk.windows.applicationmodel.activation.CommandLineActivationOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUICommandLineActivatedEventArgs: ...

class WebUIContactPanelActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IContactPanelActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    contact: typing.Optional[winsdk.windows.applicationmodel.contacts.Contact]
    contact_panel: typing.Optional[winsdk.windows.applicationmodel.contacts.ContactPanel]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIContactPanelActivatedEventArgs: ...

class WebUIDeviceActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IDeviceActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IApplicationViewActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    device_information_id: str
    verb: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIDeviceActivatedEventArgs: ...

class WebUIDevicePairingActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IDevicePairingActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    device_information: typing.Optional[winsdk.windows.devices.enumeration.DeviceInformation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIDevicePairingActivatedEventArgs: ...

class WebUIDialReceiverActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IDialReceiverActivatedEventArgs, winsdk.windows.applicationmodel.activation.ILaunchActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IApplicationViewActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    app_name: str
    arguments: str
    tile_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIDialReceiverActivatedEventArgs: ...

class WebUIFileActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IFileActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IApplicationViewActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IFileActivatedEventArgsWithNeighboringFiles, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]
    verb: str
    neighboring_files_query: typing.Optional[winsdk.windows.storage.search.StorageFileQueryResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIFileActivatedEventArgs: ...

class WebUIFileOpenPickerActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IFileOpenPickerActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IFileOpenPickerActivatedEventArgs2, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_open_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileOpenPickerUI]
    caller_package_family_name: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIFileOpenPickerActivatedEventArgs: ...

class WebUIFileOpenPickerContinuationEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IFileOpenPickerContinuationEventArgs, winsdk.windows.applicationmodel.activation.IContinuationActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    files: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIFileOpenPickerContinuationEventArgs: ...

class WebUIFileSavePickerActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IFileSavePickerActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IFileSavePickerActivatedEventArgs2, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    file_save_picker_u_i: typing.Optional[winsdk.windows.storage.pickers.provider.FileSavePickerUI]
    caller_package_family_name: str
    enterprise_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIFileSavePickerActivatedEventArgs: ...

class WebUIFileSavePickerContinuationEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IFileSavePickerContinuationEventArgs, winsdk.windows.applicationmodel.activation.IContinuationActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    file: typing.Optional[winsdk.windows.storage.StorageFile]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIFileSavePickerContinuationEventArgs: ...

class WebUIFolderPickerContinuationEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IFolderPickerContinuationEventArgs, winsdk.windows.applicationmodel.activation.IContinuationActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    folder: typing.Optional[winsdk.windows.storage.StorageFolder]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIFolderPickerContinuationEventArgs: ...

class WebUILaunchActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.ILaunchActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IPrelaunchActivatedEventArgs, winsdk.windows.applicationmodel.activation.IApplicationViewActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser, winsdk.windows.applicationmodel.activation.ILaunchActivatedEventArgs2]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    arguments: str
    tile_id: str
    tile_activated_info: typing.Optional[winsdk.windows.applicationmodel.activation.TileActivatedInfo]
    prelaunch_activated: _winrt.Boolean
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUILaunchActivatedEventArgs: ...

class WebUILockScreenActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.ILockScreenActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IApplicationViewActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    info: typing.Optional[_winrt.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUILockScreenActivatedEventArgs: ...

class WebUILockScreenComponentActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUILockScreenComponentActivatedEventArgs: ...

class WebUINavigatedDeferral(_winrt.Object, interfaces=[]):
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUINavigatedDeferral: ...
    def complete(self) -> None: ...

class WebUINavigatedEventArgs(_winrt.Object, interfaces=[IWebUINavigatedEventArgs]):
    navigated_operation: typing.Optional[WebUINavigatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUINavigatedEventArgs: ...

class WebUINavigatedOperation(_winrt.Object, interfaces=[]):
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUINavigatedOperation: ...
    def get_deferral(self) -> typing.Optional[WebUINavigatedDeferral]: ...

class WebUIPhoneCallActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IPhoneCallActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    line_id: uuid.UUID
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIPhoneCallActivatedEventArgs: ...

class WebUIPrintWorkflowForegroundTaskActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIPrintWorkflowForegroundTaskActivatedEventArgs: ...

class WebUIProtocolActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IProtocolActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, winsdk.windows.applicationmodel.activation.IApplicationViewActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIProtocolActivatedEventArgs: ...

class WebUIProtocolForResultsActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IProtocolForResultsActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IProtocolActivatedEventArgs, winsdk.windows.applicationmodel.activation.IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, winsdk.windows.applicationmodel.activation.IApplicationViewActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    currently_shown_application_view_id: _winrt.Int32
    uri: typing.Optional[winsdk.windows.foundation.Uri]
    caller_package_family_name: str
    data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    protocol_for_results_operation: typing.Optional[winsdk.windows.system.ProtocolForResultsOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIProtocolForResultsActivatedEventArgs: ...

class WebUIRestrictedLaunchActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IRestrictedLaunchActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    shared_context: typing.Optional[_winrt.Object]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIRestrictedLaunchActivatedEventArgs: ...

class WebUIShareTargetActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IShareTargetActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    share_operation: typing.Optional[winsdk.windows.applicationmodel.datatransfer.sharetarget.ShareOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIShareTargetActivatedEventArgs: ...

class WebUIStartupTaskActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IStartupTaskActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    task_id: str
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIStartupTaskActivatedEventArgs: ...

class WebUIToastNotificationActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IToastNotificationActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    argument: str
    user_input: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIToastNotificationActivatedEventArgs: ...

class WebUIUserDataAccountProviderActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IUserDataAccountProviderActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    operation: typing.Optional[winsdk.windows.applicationmodel.userdataaccounts.provider.IUserDataAccountProviderOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIUserDataAccountProviderActivatedEventArgs: ...

class WebUIView(_winrt.Object, interfaces=[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.IWebViewControl2]):
    ignore_application_content_uri_rules_navigation_restrictions: _winrt.Boolean
    application_view_id: _winrt.Int32
    source: typing.Optional[winsdk.windows.foundation.Uri]
    default_background_color: winsdk.windows.ui.Color
    can_go_back: _winrt.Boolean
    can_go_forward: _winrt.Boolean
    contains_full_screen_element: _winrt.Boolean
    deferred_permission_requests: typing.Optional[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.web.ui.WebViewControlDeferredPermissionRequest]]
    document_title: str
    settings: typing.Optional[winsdk.windows.web.ui.WebViewControlSettings]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIView: ...
    def add_initialize_script(self, script: str) -> None: ...
    def build_local_stream_uri(self, content_identifier: str, relative_path: str) -> typing.Optional[winsdk.windows.foundation.Uri]: ...
    def capture_preview_to_stream_async(self, stream: typing.Optional[winsdk.windows.storage.streams.IRandomAccessStream]) -> typing.Optional[winsdk.windows.foundation.IAsyncAction]: ...
    def capture_selected_content_to_data_package_async(self) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.applicationmodel.datatransfer.DataPackage]: ...
    @typing.overload
    @staticmethod
    def create_async() -> winsdk.windows.foundation.IAsyncOperation[WebUIView]: ...
    @typing.overload
    @staticmethod
    def create_async(uri: typing.Optional[winsdk.windows.foundation.Uri]) -> winsdk.windows.foundation.IAsyncOperation[WebUIView]: ...
    def get_deferred_permission_request_by_id(self, id: _winrt.UInt32) -> typing.Optional[winsdk.windows.web.ui.WebViewControlDeferredPermissionRequest]: ...
    def go_back(self) -> None: ...
    def go_forward(self) -> None: ...
    def invoke_script_async(self, script_name: str, arguments: typing.Iterable[str]) -> winsdk.windows.foundation.IAsyncOperation[str]: ...
    def navigate(self, source: typing.Optional[winsdk.windows.foundation.Uri]) -> None: ...
    def navigate_to_local_stream_uri(self, source: typing.Optional[winsdk.windows.foundation.Uri], stream_resolver: typing.Optional[winsdk.windows.web.IUriToStreamResolver]) -> None: ...
    def navigate_to_string(self, text: str) -> None: ...
    def navigate_with_http_request_message(self, request_message: typing.Optional[winsdk.windows.web.http.HttpRequestMessage]) -> None: ...
    def refresh(self) -> None: ...
    def stop(self) -> None: ...
    def add_activated(self, handler: winsdk.windows.foundation.TypedEventHandler[WebUIView, winsdk.windows.applicationmodel.activation.IActivatedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_activated(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_closed(self, handler: winsdk.windows.foundation.TypedEventHandler[WebUIView, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_closed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_contains_full_screen_element_changed(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_contains_full_screen_element_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_content_loading(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlContentLoadingEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_content_loading(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_d_o_m_content_loaded(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlDOMContentLoadedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_d_o_m_content_loaded(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_frame_content_loading(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlContentLoadingEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_content_loading(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_frame_d_o_m_content_loaded(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlDOMContentLoadedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_d_o_m_content_loaded(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_frame_navigation_completed(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationCompletedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_completed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_frame_navigation_starting(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationStartingEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_frame_navigation_starting(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_long_running_script_detected(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlLongRunningScriptDetectedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_long_running_script_detected(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_navigation_completed(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationCompletedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_completed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_navigation_starting(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNavigationStartingEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_navigation_starting(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_new_window_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlNewWindowRequestedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_new_window_requested(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_permission_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlPermissionRequestedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_permission_requested(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_script_notify(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlScriptNotifyEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_script_notify(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_unsafe_content_warning_displaying(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_unsafe_content_warning_displaying(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_unsupported_uri_scheme_identified(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_unsupported_uri_scheme_identified(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_unviewable_content_identified(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlUnviewableContentIdentifiedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_unviewable_content_identified(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...
    def add_web_resource_requested(self, handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.web.ui.IWebViewControl, winsdk.windows.web.ui.WebViewControlWebResourceRequestedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_web_resource_requested(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class WebUIVoiceCommandActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IVoiceCommandActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    result: typing.Optional[winsdk.windows.media.speechrecognition.SpeechRecognitionResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIVoiceCommandActivatedEventArgs: ...

class WebUIWebAccountProviderActivatedEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IWebAccountProviderActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral, winsdk.windows.applicationmodel.activation.IActivatedEventArgsWithUser]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    user: typing.Optional[winsdk.windows.system.User]
    operation: typing.Optional[winsdk.windows.security.authentication.web.provider.IWebAccountProviderOperation]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIWebAccountProviderActivatedEventArgs: ...

class WebUIWebAuthenticationBrokerContinuationEventArgs(_winrt.Object, interfaces=[winsdk.windows.applicationmodel.activation.IWebAuthenticationBrokerContinuationEventArgs, winsdk.windows.applicationmodel.activation.IContinuationActivatedEventArgs, winsdk.windows.applicationmodel.activation.IActivatedEventArgs, IActivatedEventArgsDeferral]):
    kind: winsdk.windows.applicationmodel.activation.ActivationKind
    previous_execution_state: winsdk.windows.applicationmodel.activation.ApplicationExecutionState
    splash_screen: typing.Optional[winsdk.windows.applicationmodel.activation.SplashScreen]
    continuation_data: typing.Optional[winsdk.windows.foundation.collections.ValueSet]
    web_authentication_result: typing.Optional[winsdk.windows.security.authentication.web.WebAuthenticationResult]
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> WebUIWebAuthenticationBrokerContinuationEventArgs: ...

class IActivatedEventArgsDeferral(typing.Protocol):
    activated_operation: typing.Optional[ActivatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> IActivatedEventArgsDeferral: ...

class IWebUIBackgroundTaskInstance(typing.Protocol):
    succeeded: _winrt.Boolean
    @staticmethod
    def _from(obj: _winrt.Object) -> IWebUIBackgroundTaskInstance: ...

class IWebUINavigatedEventArgs(typing.Protocol):
    navigated_operation: typing.Optional[WebUINavigatedOperation]
    @staticmethod
    def _from(obj: _winrt.Object) -> IWebUINavigatedEventArgs: ...

ActivatedEventHandler = typing.Callable[[typing.Optional[_winrt.Object], typing.Optional[winsdk.windows.applicationmodel.activation.IActivatedEventArgs]], None]

BackgroundActivatedEventHandler = typing.Callable[[typing.Optional[_winrt.Object], typing.Optional[winsdk.windows.applicationmodel.activation.IBackgroundActivatedEventArgs]], None]

EnteredBackgroundEventHandler = typing.Callable[[typing.Optional[_winrt.Object], typing.Optional[winsdk.windows.applicationmodel.IEnteredBackgroundEventArgs]], None]

LeavingBackgroundEventHandler = typing.Callable[[typing.Optional[_winrt.Object], typing.Optional[winsdk.windows.applicationmodel.ILeavingBackgroundEventArgs]], None]

NavigatedEventHandler = typing.Callable[[typing.Optional[_winrt.Object], typing.Optional[IWebUINavigatedEventArgs]], None]

ResumingEventHandler = typing.Callable[[typing.Optional[_winrt.Object]], None]

SuspendingEventHandler = typing.Callable[[typing.Optional[_winrt.Object], typing.Optional[winsdk.windows.applicationmodel.ISuspendingEventArgs]], None]

