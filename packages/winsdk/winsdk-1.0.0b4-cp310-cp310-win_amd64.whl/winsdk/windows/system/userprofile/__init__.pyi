# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.globalization
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.system
except Exception:
    pass

class AdvertisingManager(_winrt.Object):
    advertising_id: str
    @staticmethod
    def _from(obj: _winrt.Object) -> AdvertisingManager: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winsdk.windows.system.User]) -> typing.Optional[AdvertisingManagerForUser]: ...

class AdvertisingManagerForUser(_winrt.Object, interfaces=[]):
    advertising_id: str
    user: typing.Optional[winsdk.windows.system.User]
    @staticmethod
    def _from(obj: _winrt.Object) -> AdvertisingManagerForUser: ...

class AssignedAccessSettings(_winrt.Object, interfaces=[]):
    is_enabled: _winrt.Boolean
    is_single_app_kiosk_mode: _winrt.Boolean
    user: typing.Optional[winsdk.windows.system.User]
    @staticmethod
    def _from(obj: _winrt.Object) -> AssignedAccessSettings: ...
    @staticmethod
    def get_default() -> typing.Optional[AssignedAccessSettings]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winsdk.windows.system.User]) -> typing.Optional[AssignedAccessSettings]: ...

class DiagnosticsSettings(_winrt.Object, interfaces=[]):
    can_use_diagnostics_to_tailor_experiences: _winrt.Boolean
    user: typing.Optional[winsdk.windows.system.User]
    @staticmethod
    def _from(obj: _winrt.Object) -> DiagnosticsSettings: ...
    @staticmethod
    def get_default() -> typing.Optional[DiagnosticsSettings]: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winsdk.windows.system.User]) -> typing.Optional[DiagnosticsSettings]: ...

class FirstSignInSettings(_winrt.Object, interfaces=[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, _winrt.Object]]]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> FirstSignInSettings: ...
    def first(self) -> typing.Optional[winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, _winrt.Object]]]: ...
    @staticmethod
    def get_default() -> typing.Optional[FirstSignInSettings]: ...
    def has_key(self, key: str) -> _winrt.Boolean: ...
    def lookup(self, key: str) -> typing.Optional[_winrt.Object]: ...
    def split(self, ) -> typing.Tuple[typing.Optional[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]], typing.Optional[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]]: ...

class GlobalizationPreferences(_winrt.Object):
    calendars: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    clocks: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    currencies: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    home_geographic_region: str
    languages: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    week_starts_on: winsdk.windows.globalization.DayOfWeek
    @staticmethod
    def _from(obj: _winrt.Object) -> GlobalizationPreferences: ...
    @staticmethod
    def get_for_user(user: typing.Optional[winsdk.windows.system.User]) -> typing.Optional[GlobalizationPreferencesForUser]: ...
    @staticmethod
    def try_set_home_geographic_region(region: str) -> _winrt.Boolean: ...
    @staticmethod
    def try_set_languages(language_tags: typing.Iterable[str]) -> _winrt.Boolean: ...

class GlobalizationPreferencesForUser(_winrt.Object, interfaces=[]):
    calendars: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    clocks: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    currencies: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    home_geographic_region: str
    languages: typing.Optional[winsdk.windows.foundation.collections.IVectorView[str]]
    user: typing.Optional[winsdk.windows.system.User]
    week_starts_on: winsdk.windows.globalization.DayOfWeek
    @staticmethod
    def _from(obj: _winrt.Object) -> GlobalizationPreferencesForUser: ...

class UserProfilePersonalizationSettings(_winrt.Object, interfaces=[]):
    current: typing.Optional[UserProfilePersonalizationSettings]
    @staticmethod
    def _from(obj: _winrt.Object) -> UserProfilePersonalizationSettings: ...
    @staticmethod
    def is_supported() -> _winrt.Boolean: ...
    def try_set_lock_screen_image_async(self, image_file: typing.Optional[winsdk.windows.storage.StorageFile]) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...
    def try_set_wallpaper_image_async(self, image_file: typing.Optional[winsdk.windows.storage.StorageFile]) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]: ...

