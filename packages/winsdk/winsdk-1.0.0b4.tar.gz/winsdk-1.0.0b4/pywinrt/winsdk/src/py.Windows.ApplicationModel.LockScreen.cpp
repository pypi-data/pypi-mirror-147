// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

#include "pybase.h"
#include "py.Windows.ApplicationModel.LockScreen.h"

PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenBadge>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>::python_type;

namespace py::cpp::Windows::ApplicationModel::LockScreen
{
    // ----- LockApplicationHost class --------------------
    constexpr const char* const _type_name_LockApplicationHost = "LockApplicationHost";

    static PyObject* _new_LockApplicationHost(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LockApplicationHost);
        return nullptr;
    }

    static void _dealloc_LockApplicationHost(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LockApplicationHost_GetForCurrentView(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost::GetForCurrentView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockApplicationHost_RequestUnlock(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.RequestUnlock();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockApplicationHost_add_Unlocking(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost, winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>>(arg);

            return py::convert(self->obj.Unlocking(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockApplicationHost_remove_Unlocking(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.Unlocking(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LockApplicationHost(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockApplicationHost[] = {
        { "get_for_current_view", reinterpret_cast<PyCFunction>(LockApplicationHost_GetForCurrentView), METH_VARARGS | METH_STATIC, nullptr },
        { "request_unlock", reinterpret_cast<PyCFunction>(LockApplicationHost_RequestUnlock), METH_VARARGS, nullptr },
        { "add_unlocking", reinterpret_cast<PyCFunction>(LockApplicationHost_add_Unlocking), METH_O, nullptr },
        { "remove_unlocking", reinterpret_cast<PyCFunction>(LockApplicationHost_remove_Unlocking), METH_O, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockApplicationHost), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockApplicationHost[] = {
        { }
    };

    static PyType_Slot _type_slots_LockApplicationHost[] = 
    {
        { Py_tp_new, _new_LockApplicationHost },
        { Py_tp_dealloc, _dealloc_LockApplicationHost },
        { Py_tp_methods, _methods_LockApplicationHost },
        { Py_tp_getset, _getset_LockApplicationHost },
        { },
    };

    static PyType_Spec _type_spec_LockApplicationHost =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockApplicationHost",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockApplicationHost),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockApplicationHost
    };

    // ----- LockScreenBadge class --------------------
    constexpr const char* const _type_name_LockScreenBadge = "LockScreenBadge";

    static PyObject* _new_LockScreenBadge(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LockScreenBadge);
        return nullptr;
    }

    static void _dealloc_LockScreenBadge(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LockScreenBadge_LaunchApp(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.LaunchApp();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_AutomationName(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AutomationName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_Glyph(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Glyph());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_Logo(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Logo());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenBadge_get_Number(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Number());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LockScreenBadge(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenBadge>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenBadge[] = {
        { "launch_app", reinterpret_cast<PyCFunction>(LockScreenBadge_LaunchApp), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenBadge), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenBadge[] = {
        { "automation_name", reinterpret_cast<getter>(LockScreenBadge_get_AutomationName), nullptr, nullptr, nullptr },
        { "glyph", reinterpret_cast<getter>(LockScreenBadge_get_Glyph), nullptr, nullptr, nullptr },
        { "logo", reinterpret_cast<getter>(LockScreenBadge_get_Logo), nullptr, nullptr, nullptr },
        { "number", reinterpret_cast<getter>(LockScreenBadge_get_Number), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LockScreenBadge[] = 
    {
        { Py_tp_new, _new_LockScreenBadge },
        { Py_tp_dealloc, _dealloc_LockScreenBadge },
        { Py_tp_methods, _methods_LockScreenBadge },
        { Py_tp_getset, _getset_LockScreenBadge },
        { },
    };

    static PyType_Spec _type_spec_LockScreenBadge =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenBadge",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenBadge),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenBadge
    };

    // ----- LockScreenInfo class --------------------
    constexpr const char* const _type_name_LockScreenInfo = "LockScreenInfo";

    static PyObject* _new_LockScreenInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LockScreenInfo);
        return nullptr;
    }

    static void _dealloc_LockScreenInfo(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LockScreenInfo_get_AlarmIcon(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlarmIcon());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_get_Badges(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Badges());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_get_DetailText(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DetailText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_get_LockScreenImage(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LockScreenImage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_AlarmIconChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.AlarmIconChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_AlarmIconChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.AlarmIconChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_BadgesChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.BadgesChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_BadgesChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.BadgesChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_DetailTextChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.DetailTextChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_DetailTextChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.DetailTextChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_add_LockScreenImageChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::TypedEventHandler<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo, winrt::Windows::Foundation::IInspectable>>(arg);

            return py::convert(self->obj.LockScreenImageChanged(param0));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* LockScreenInfo_remove_LockScreenImageChanged(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo* self, PyObject* arg) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::event_token>(arg);

            self->obj.LockScreenImageChanged(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LockScreenInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenInfo[] = {
        { "add_alarm_icon_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_AlarmIconChanged), METH_O, nullptr },
        { "remove_alarm_icon_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_AlarmIconChanged), METH_O, nullptr },
        { "add_badges_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_BadgesChanged), METH_O, nullptr },
        { "remove_badges_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_BadgesChanged), METH_O, nullptr },
        { "add_detail_text_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_DetailTextChanged), METH_O, nullptr },
        { "remove_detail_text_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_DetailTextChanged), METH_O, nullptr },
        { "add_lock_screen_image_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_add_LockScreenImageChanged), METH_O, nullptr },
        { "remove_lock_screen_image_changed", reinterpret_cast<PyCFunction>(LockScreenInfo_remove_LockScreenImageChanged), METH_O, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenInfo[] = {
        { "alarm_icon", reinterpret_cast<getter>(LockScreenInfo_get_AlarmIcon), nullptr, nullptr, nullptr },
        { "badges", reinterpret_cast<getter>(LockScreenInfo_get_Badges), nullptr, nullptr, nullptr },
        { "detail_text", reinterpret_cast<getter>(LockScreenInfo_get_DetailText), nullptr, nullptr, nullptr },
        { "lock_screen_image", reinterpret_cast<getter>(LockScreenInfo_get_LockScreenImage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LockScreenInfo[] = 
    {
        { Py_tp_new, _new_LockScreenInfo },
        { Py_tp_dealloc, _dealloc_LockScreenInfo },
        { Py_tp_methods, _methods_LockScreenInfo },
        { Py_tp_getset, _getset_LockScreenInfo },
        { },
    };

    static PyType_Spec _type_spec_LockScreenInfo =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenInfo",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenInfo
    };

    // ----- LockScreenUnlockingDeferral class --------------------
    constexpr const char* const _type_name_LockScreenUnlockingDeferral = "LockScreenUnlockingDeferral";

    static PyObject* _new_LockScreenUnlockingDeferral(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LockScreenUnlockingDeferral);
        return nullptr;
    }

    static void _dealloc_LockScreenUnlockingDeferral(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LockScreenUnlockingDeferral_Complete(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Complete();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_LockScreenUnlockingDeferral(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenUnlockingDeferral[] = {
        { "complete", reinterpret_cast<PyCFunction>(LockScreenUnlockingDeferral_Complete), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenUnlockingDeferral), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenUnlockingDeferral[] = {
        { }
    };

    static PyType_Slot _type_slots_LockScreenUnlockingDeferral[] = 
    {
        { Py_tp_new, _new_LockScreenUnlockingDeferral },
        { Py_tp_dealloc, _dealloc_LockScreenUnlockingDeferral },
        { Py_tp_methods, _methods_LockScreenUnlockingDeferral },
        { Py_tp_getset, _getset_LockScreenUnlockingDeferral },
        { },
    };

    static PyType_Spec _type_spec_LockScreenUnlockingDeferral =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenUnlockingDeferral",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenUnlockingDeferral
    };

    // ----- LockScreenUnlockingEventArgs class --------------------
    constexpr const char* const _type_name_LockScreenUnlockingEventArgs = "LockScreenUnlockingEventArgs";

    static PyObject* _new_LockScreenUnlockingEventArgs(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_LockScreenUnlockingEventArgs);
        return nullptr;
    }

    static void _dealloc_LockScreenUnlockingEventArgs(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* LockScreenUnlockingEventArgs_GetDeferral(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetDeferral());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* LockScreenUnlockingEventArgs_get_Deadline(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Deadline());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_LockScreenUnlockingEventArgs(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_LockScreenUnlockingEventArgs[] = {
        { "get_deferral", reinterpret_cast<PyCFunction>(LockScreenUnlockingEventArgs_GetDeferral), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_LockScreenUnlockingEventArgs), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_LockScreenUnlockingEventArgs[] = {
        { "deadline", reinterpret_cast<getter>(LockScreenUnlockingEventArgs_get_Deadline), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_LockScreenUnlockingEventArgs[] = 
    {
        { Py_tp_new, _new_LockScreenUnlockingEventArgs },
        { Py_tp_dealloc, _dealloc_LockScreenUnlockingEventArgs },
        { Py_tp_methods, _methods_LockScreenUnlockingEventArgs },
        { Py_tp_getset, _getset_LockScreenUnlockingEventArgs },
        { },
    };

    static PyType_Spec _type_spec_LockScreenUnlockingEventArgs =
    {
        "_winsdk_Windows_ApplicationModel_LockScreen.LockScreenUnlockingEventArgs",
        sizeof(py::wrapper::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_LockScreenUnlockingEventArgs
    };

    // ----- Windows.ApplicationModel.LockScreen Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::Object>::python_type) };

            py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockApplicationHost>::python_type = py::register_python_type(module, _type_name_LockApplicationHost, &_type_spec_LockApplicationHost, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenBadge>::python_type = py::register_python_type(module, _type_name_LockScreenBadge, &_type_spec_LockScreenBadge, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenInfo>::python_type = py::register_python_type(module, _type_name_LockScreenInfo, &_type_spec_LockScreenInfo, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral>::python_type = py::register_python_type(module, _type_name_LockScreenUnlockingDeferral, &_type_spec_LockScreenUnlockingDeferral, bases.get());
            py::winrt_type<winrt::Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>::python_type = py::register_python_type(module, _type_name_LockScreenUnlockingEventArgs, &_type_spec_LockScreenUnlockingEventArgs, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {{Py_mod_exec, module_exec}, {}};

    PyDoc_STRVAR(module_doc, "Windows.ApplicationModel.LockScreen");

    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_ApplicationModel_LockScreen",
           module_doc,
           0,
           nullptr,
           module_slots,
           nullptr,
           nullptr,
           nullptr};
} // py::cpp::Windows::ApplicationModel::LockScreen

PyMODINIT_FUNC
PyInit__winsdk_Windows_ApplicationModel_LockScreen (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::ApplicationModel::LockScreen::module_def);
}
