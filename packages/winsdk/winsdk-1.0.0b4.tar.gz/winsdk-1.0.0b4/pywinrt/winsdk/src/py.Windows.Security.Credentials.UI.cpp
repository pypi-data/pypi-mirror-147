// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

#include "pybase.h"
#include "py.Windows.Security.Credentials.UI.h"

PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPicker>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Security::Credentials::UI::UserConsentVerifier>::python_type;

namespace py::cpp::Windows::Security::Credentials::UI
{
    // ----- CredentialPicker class --------------------
    constexpr const char* const _type_name_CredentialPicker = "CredentialPicker";

    static PyObject* _new_CredentialPicker(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CredentialPicker);
        return nullptr;
    }

    static PyObject* CredentialPicker_PickAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>(args, 0);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                return py::convert(winrt::Windows::Security::Credentials::UI::CredentialPicker::PickAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPicker[] = {
        { "pick_async", reinterpret_cast<PyCFunction>(CredentialPicker_PickAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPicker[] = {
        { }
    };

    static PyType_Slot _type_slots_CredentialPicker[] = 
    {
        { Py_tp_new, _new_CredentialPicker },
        { Py_tp_methods, _methods_CredentialPicker },
        { Py_tp_getset, _getset_CredentialPicker },
        { },
    };

    static PyType_Spec _type_spec_CredentialPicker =
    {
        "_winsdk_Windows_Security_Credentials_UI.CredentialPicker",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPicker
    };

    // ----- CredentialPickerOptions class --------------------
    constexpr const char* const _type_name_CredentialPickerOptions = "CredentialPickerOptions";

    static PyObject* _new_CredentialPickerOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Security::Credentials::UI::CredentialPickerOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CredentialPickerOptions(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CredentialPickerOptions_get_TargetName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TargetName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_TargetName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.TargetName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_PreviousCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PreviousCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_PreviousCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Storage::Streams::IBuffer>(arg);

            self->obj.PreviousCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_Message(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Message());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_Message(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Message(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.ErrorCode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CustomAuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CustomAuthenticationProtocol());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CustomAuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.CustomAuthenticationProtocol(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CredentialSaveOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::CredentialSaveOption>(arg);

            self->obj.CredentialSaveOption(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_Caption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Caption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_Caption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Caption(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_CallerSavesCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CallerSavesCredential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_CallerSavesCredential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.CallerSavesCredential(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_AuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AuthenticationProtocol());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_AuthenticationProtocol(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Security::Credentials::UI::AuthenticationProtocol>(arg);

            self->obj.AuthenticationProtocol(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CredentialPickerOptions_get_AlwaysDisplayDialog(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlwaysDisplayDialog());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CredentialPickerOptions_put_AlwaysDisplayDialog(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.AlwaysDisplayDialog(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CredentialPickerOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPickerOptions[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_CredentialPickerOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPickerOptions[] = {
        { "target_name", reinterpret_cast<getter>(CredentialPickerOptions_get_TargetName), reinterpret_cast<setter>(CredentialPickerOptions_put_TargetName), nullptr, nullptr },
        { "previous_credential", reinterpret_cast<getter>(CredentialPickerOptions_get_PreviousCredential), reinterpret_cast<setter>(CredentialPickerOptions_put_PreviousCredential), nullptr, nullptr },
        { "message", reinterpret_cast<getter>(CredentialPickerOptions_get_Message), reinterpret_cast<setter>(CredentialPickerOptions_put_Message), nullptr, nullptr },
        { "error_code", reinterpret_cast<getter>(CredentialPickerOptions_get_ErrorCode), reinterpret_cast<setter>(CredentialPickerOptions_put_ErrorCode), nullptr, nullptr },
        { "custom_authentication_protocol", reinterpret_cast<getter>(CredentialPickerOptions_get_CustomAuthenticationProtocol), reinterpret_cast<setter>(CredentialPickerOptions_put_CustomAuthenticationProtocol), nullptr, nullptr },
        { "credential_save_option", reinterpret_cast<getter>(CredentialPickerOptions_get_CredentialSaveOption), reinterpret_cast<setter>(CredentialPickerOptions_put_CredentialSaveOption), nullptr, nullptr },
        { "caption", reinterpret_cast<getter>(CredentialPickerOptions_get_Caption), reinterpret_cast<setter>(CredentialPickerOptions_put_Caption), nullptr, nullptr },
        { "caller_saves_credential", reinterpret_cast<getter>(CredentialPickerOptions_get_CallerSavesCredential), reinterpret_cast<setter>(CredentialPickerOptions_put_CallerSavesCredential), nullptr, nullptr },
        { "authentication_protocol", reinterpret_cast<getter>(CredentialPickerOptions_get_AuthenticationProtocol), reinterpret_cast<setter>(CredentialPickerOptions_put_AuthenticationProtocol), nullptr, nullptr },
        { "always_display_dialog", reinterpret_cast<getter>(CredentialPickerOptions_get_AlwaysDisplayDialog), reinterpret_cast<setter>(CredentialPickerOptions_put_AlwaysDisplayDialog), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CredentialPickerOptions[] = 
    {
        { Py_tp_new, _new_CredentialPickerOptions },
        { Py_tp_dealloc, _dealloc_CredentialPickerOptions },
        { Py_tp_methods, _methods_CredentialPickerOptions },
        { Py_tp_getset, _getset_CredentialPickerOptions },
        { },
    };

    static PyType_Spec _type_spec_CredentialPickerOptions =
    {
        "_winsdk_Windows_Security_Credentials_UI.CredentialPickerOptions",
        sizeof(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPickerOptions
    };

    // ----- CredentialPickerResults class --------------------
    constexpr const char* const _type_name_CredentialPickerResults = "CredentialPickerResults";

    static PyObject* _new_CredentialPickerResults(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_CredentialPickerResults);
        return nullptr;
    }

    static void _dealloc_CredentialPickerResults(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* CredentialPickerResults_get_Credential(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Credential());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialDomainName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CredentialDomainName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialPassword(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CredentialPassword());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialSaveOption(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CredentialSaveOption());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialSaved(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CredentialSaved());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_CredentialUserName(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CredentialUserName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CredentialPickerResults_get_ErrorCode(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ErrorCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_CredentialPickerResults(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CredentialPickerResults[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_CredentialPickerResults), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CredentialPickerResults[] = {
        { "credential", reinterpret_cast<getter>(CredentialPickerResults_get_Credential), nullptr, nullptr, nullptr },
        { "credential_domain_name", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialDomainName), nullptr, nullptr, nullptr },
        { "credential_password", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialPassword), nullptr, nullptr, nullptr },
        { "credential_save_option", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialSaveOption), nullptr, nullptr, nullptr },
        { "credential_saved", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialSaved), nullptr, nullptr, nullptr },
        { "credential_user_name", reinterpret_cast<getter>(CredentialPickerResults_get_CredentialUserName), nullptr, nullptr, nullptr },
        { "error_code", reinterpret_cast<getter>(CredentialPickerResults_get_ErrorCode), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CredentialPickerResults[] = 
    {
        { Py_tp_new, _new_CredentialPickerResults },
        { Py_tp_dealloc, _dealloc_CredentialPickerResults },
        { Py_tp_methods, _methods_CredentialPickerResults },
        { Py_tp_getset, _getset_CredentialPickerResults },
        { },
    };

    static PyType_Spec _type_spec_CredentialPickerResults =
    {
        "_winsdk_Windows_Security_Credentials_UI.CredentialPickerResults",
        sizeof(py::wrapper::Windows::Security::Credentials::UI::CredentialPickerResults),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CredentialPickerResults
    };

    // ----- UserConsentVerifier class --------------------
    constexpr const char* const _type_name_UserConsentVerifier = "UserConsentVerifier";

    static PyObject* _new_UserConsentVerifier(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_UserConsentVerifier);
        return nullptr;
    }

    static PyObject* UserConsentVerifier_CheckAvailabilityAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Security::Credentials::UI::UserConsentVerifier::CheckAvailabilityAsync());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* UserConsentVerifier_RequestVerificationAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Security::Credentials::UI::UserConsentVerifier::RequestVerificationAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_UserConsentVerifier[] = {
        { "check_availability_async", reinterpret_cast<PyCFunction>(UserConsentVerifier_CheckAvailabilityAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "request_verification_async", reinterpret_cast<PyCFunction>(UserConsentVerifier_RequestVerificationAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_UserConsentVerifier[] = {
        { }
    };

    static PyType_Slot _type_slots_UserConsentVerifier[] = 
    {
        { Py_tp_new, _new_UserConsentVerifier },
        { Py_tp_methods, _methods_UserConsentVerifier },
        { Py_tp_getset, _getset_UserConsentVerifier },
        { },
    };

    static PyType_Spec _type_spec_UserConsentVerifier =
    {
        "_winsdk_Windows_Security_Credentials_UI.UserConsentVerifier",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_UserConsentVerifier
    };

    // ----- Windows.Security.Credentials.UI Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::Object>::python_type) };

            py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPicker>::python_type = py::register_python_type(module, _type_name_CredentialPicker, &_type_spec_CredentialPicker, nullptr);
            py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPickerOptions>::python_type = py::register_python_type(module, _type_name_CredentialPickerOptions, &_type_spec_CredentialPickerOptions, bases.get());
            py::winrt_type<winrt::Windows::Security::Credentials::UI::CredentialPickerResults>::python_type = py::register_python_type(module, _type_name_CredentialPickerResults, &_type_spec_CredentialPickerResults, bases.get());
            py::winrt_type<winrt::Windows::Security::Credentials::UI::UserConsentVerifier>::python_type = py::register_python_type(module, _type_name_UserConsentVerifier, &_type_spec_UserConsentVerifier, nullptr);

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {{Py_mod_exec, module_exec}, {}};

    PyDoc_STRVAR(module_doc, "Windows.Security.Credentials.UI");

    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Security_Credentials_UI",
           module_doc,
           0,
           nullptr,
           module_slots,
           nullptr,
           nullptr,
           nullptr};
} // py::cpp::Windows::Security::Credentials::UI

PyMODINIT_FUNC
PyInit__winsdk_Windows_Security_Credentials_UI (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Security::Credentials::UI::module_def);
}
