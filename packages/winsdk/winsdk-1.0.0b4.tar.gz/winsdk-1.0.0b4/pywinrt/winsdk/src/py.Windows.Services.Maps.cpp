// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

#include "pybase.h"
#include "py.Windows.Services.Maps.h"

PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::EnhancedWaypoint>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::ManeuverWarning>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapAddress>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapLocation>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapLocationFinder>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapLocationFinderResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapManager>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapRoute>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapRouteDrivingOptions>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapRouteFinder>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapRouteFinderResult>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapRouteLeg>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapRouteManeuver>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::MapService>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::PlaceInfo>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>::python_type;

namespace py::cpp::Windows::Services::Maps
{
    // ----- EnhancedWaypoint class --------------------
    constexpr const char* const _type_name_EnhancedWaypoint = "EnhancedWaypoint";

    static PyObject* _new_EnhancedWaypoint(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::WaypointKind>(args, 1);

                winrt::Windows::Services::Maps::EnhancedWaypoint instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_EnhancedWaypoint(py::wrapper::Windows::Services::Maps::EnhancedWaypoint* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* EnhancedWaypoint_get_Kind(py::wrapper::Windows::Services::Maps::EnhancedWaypoint* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* EnhancedWaypoint_get_Point(py::wrapper::Windows::Services::Maps::EnhancedWaypoint* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Point());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_EnhancedWaypoint(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::EnhancedWaypoint>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_EnhancedWaypoint[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_EnhancedWaypoint), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_EnhancedWaypoint[] = {
        { "kind", reinterpret_cast<getter>(EnhancedWaypoint_get_Kind), nullptr, nullptr, nullptr },
        { "point", reinterpret_cast<getter>(EnhancedWaypoint_get_Point), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_EnhancedWaypoint[] = 
    {
        { Py_tp_new, _new_EnhancedWaypoint },
        { Py_tp_dealloc, _dealloc_EnhancedWaypoint },
        { Py_tp_methods, _methods_EnhancedWaypoint },
        { Py_tp_getset, _getset_EnhancedWaypoint },
        { },
    };

    static PyType_Spec _type_spec_EnhancedWaypoint =
    {
        "_winsdk_Windows_Services_Maps.EnhancedWaypoint",
        sizeof(py::wrapper::Windows::Services::Maps::EnhancedWaypoint),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_EnhancedWaypoint
    };

    // ----- ManeuverWarning class --------------------
    constexpr const char* const _type_name_ManeuverWarning = "ManeuverWarning";

    static PyObject* _new_ManeuverWarning(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_ManeuverWarning);
        return nullptr;
    }

    static void _dealloc_ManeuverWarning(py::wrapper::Windows::Services::Maps::ManeuverWarning* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* ManeuverWarning_get_Kind(py::wrapper::Windows::Services::Maps::ManeuverWarning* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* ManeuverWarning_get_Severity(py::wrapper::Windows::Services::Maps::ManeuverWarning* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Severity());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_ManeuverWarning(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::ManeuverWarning>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ManeuverWarning[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_ManeuverWarning), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ManeuverWarning[] = {
        { "kind", reinterpret_cast<getter>(ManeuverWarning_get_Kind), nullptr, nullptr, nullptr },
        { "severity", reinterpret_cast<getter>(ManeuverWarning_get_Severity), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ManeuverWarning[] = 
    {
        { Py_tp_new, _new_ManeuverWarning },
        { Py_tp_dealloc, _dealloc_ManeuverWarning },
        { Py_tp_methods, _methods_ManeuverWarning },
        { Py_tp_getset, _getset_ManeuverWarning },
        { },
    };

    static PyType_Spec _type_spec_ManeuverWarning =
    {
        "_winsdk_Windows_Services_Maps.ManeuverWarning",
        sizeof(py::wrapper::Windows::Services::Maps::ManeuverWarning),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ManeuverWarning
    };

    // ----- MapAddress class --------------------
    constexpr const char* const _type_name_MapAddress = "MapAddress";

    static PyObject* _new_MapAddress(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapAddress);
        return nullptr;
    }

    static void _dealloc_MapAddress(py::wrapper::Windows::Services::Maps::MapAddress* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapAddress_get_BuildingFloor(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BuildingFloor());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_BuildingName(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BuildingName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_BuildingRoom(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BuildingRoom());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_BuildingWing(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BuildingWing());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Continent(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Continent());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Country(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Country());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_CountryCode(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.CountryCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_District(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.District());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Neighborhood(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Neighborhood());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_PostCode(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.PostCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Region(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Region());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_RegionCode(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RegionCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Street(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Street());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_StreetNumber(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StreetNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_Town(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Town());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapAddress_get_FormattedAddress(py::wrapper::Windows::Services::Maps::MapAddress* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FormattedAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MapAddress(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapAddress>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapAddress[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapAddress), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapAddress[] = {
        { "building_floor", reinterpret_cast<getter>(MapAddress_get_BuildingFloor), nullptr, nullptr, nullptr },
        { "building_name", reinterpret_cast<getter>(MapAddress_get_BuildingName), nullptr, nullptr, nullptr },
        { "building_room", reinterpret_cast<getter>(MapAddress_get_BuildingRoom), nullptr, nullptr, nullptr },
        { "building_wing", reinterpret_cast<getter>(MapAddress_get_BuildingWing), nullptr, nullptr, nullptr },
        { "continent", reinterpret_cast<getter>(MapAddress_get_Continent), nullptr, nullptr, nullptr },
        { "country", reinterpret_cast<getter>(MapAddress_get_Country), nullptr, nullptr, nullptr },
        { "country_code", reinterpret_cast<getter>(MapAddress_get_CountryCode), nullptr, nullptr, nullptr },
        { "district", reinterpret_cast<getter>(MapAddress_get_District), nullptr, nullptr, nullptr },
        { "neighborhood", reinterpret_cast<getter>(MapAddress_get_Neighborhood), nullptr, nullptr, nullptr },
        { "post_code", reinterpret_cast<getter>(MapAddress_get_PostCode), nullptr, nullptr, nullptr },
        { "region", reinterpret_cast<getter>(MapAddress_get_Region), nullptr, nullptr, nullptr },
        { "region_code", reinterpret_cast<getter>(MapAddress_get_RegionCode), nullptr, nullptr, nullptr },
        { "street", reinterpret_cast<getter>(MapAddress_get_Street), nullptr, nullptr, nullptr },
        { "street_number", reinterpret_cast<getter>(MapAddress_get_StreetNumber), nullptr, nullptr, nullptr },
        { "town", reinterpret_cast<getter>(MapAddress_get_Town), nullptr, nullptr, nullptr },
        { "formatted_address", reinterpret_cast<getter>(MapAddress_get_FormattedAddress), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapAddress[] = 
    {
        { Py_tp_new, _new_MapAddress },
        { Py_tp_dealloc, _dealloc_MapAddress },
        { Py_tp_methods, _methods_MapAddress },
        { Py_tp_getset, _getset_MapAddress },
        { },
    };

    static PyType_Spec _type_spec_MapAddress =
    {
        "_winsdk_Windows_Services_Maps.MapAddress",
        sizeof(py::wrapper::Windows::Services::Maps::MapAddress),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapAddress
    };

    // ----- MapLocation class --------------------
    constexpr const char* const _type_name_MapLocation = "MapLocation";

    static PyObject* _new_MapLocation(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapLocation);
        return nullptr;
    }

    static void _dealloc_MapLocation(py::wrapper::Windows::Services::Maps::MapLocation* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapLocation_get_Address(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Address());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocation_get_Description(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Description());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocation_get_DisplayName(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocation_get_Point(py::wrapper::Windows::Services::Maps::MapLocation* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Point());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MapLocation(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapLocation>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapLocation[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapLocation), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapLocation[] = {
        { "address", reinterpret_cast<getter>(MapLocation_get_Address), nullptr, nullptr, nullptr },
        { "description", reinterpret_cast<getter>(MapLocation_get_Description), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(MapLocation_get_DisplayName), nullptr, nullptr, nullptr },
        { "point", reinterpret_cast<getter>(MapLocation_get_Point), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapLocation[] = 
    {
        { Py_tp_new, _new_MapLocation },
        { Py_tp_dealloc, _dealloc_MapLocation },
        { Py_tp_methods, _methods_MapLocation },
        { Py_tp_getset, _getset_MapLocation },
        { },
    };

    static PyType_Spec _type_spec_MapLocation =
    {
        "_winsdk_Windows_Services_Maps.MapLocation",
        sizeof(py::wrapper::Windows::Services::Maps::MapLocation),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapLocation
    };

    // ----- MapLocationFinder class --------------------
    constexpr const char* const _type_name_MapLocationFinder = "MapLocationFinder";

    static PyObject* _new_MapLocationFinder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapLocationFinder);
        return nullptr;
    }

    static PyObject* MapLocationFinder_FindLocationsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<uint32_t>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapLocationFinder_FindLocationsAtAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAtAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapLocationDesiredAccuracy>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapLocationFinder::FindLocationsAtAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapLocationFinder[] = {
        { "find_locations_async", reinterpret_cast<PyCFunction>(MapLocationFinder_FindLocationsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "find_locations_at_async", reinterpret_cast<PyCFunction>(MapLocationFinder_FindLocationsAtAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapLocationFinder[] = {
        { }
    };

    static PyType_Slot _type_slots_MapLocationFinder[] = 
    {
        { Py_tp_new, _new_MapLocationFinder },
        { Py_tp_methods, _methods_MapLocationFinder },
        { Py_tp_getset, _getset_MapLocationFinder },
        { },
    };

    static PyType_Spec _type_spec_MapLocationFinder =
    {
        "_winsdk_Windows_Services_Maps.MapLocationFinder",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapLocationFinder
    };

    // ----- MapLocationFinderResult class --------------------
    constexpr const char* const _type_name_MapLocationFinderResult = "MapLocationFinderResult";

    static PyObject* _new_MapLocationFinderResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapLocationFinderResult);
        return nullptr;
    }

    static void _dealloc_MapLocationFinderResult(py::wrapper::Windows::Services::Maps::MapLocationFinderResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapLocationFinderResult_get_Locations(py::wrapper::Windows::Services::Maps::MapLocationFinderResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Locations());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapLocationFinderResult_get_Status(py::wrapper::Windows::Services::Maps::MapLocationFinderResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MapLocationFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapLocationFinderResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapLocationFinderResult[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapLocationFinderResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapLocationFinderResult[] = {
        { "locations", reinterpret_cast<getter>(MapLocationFinderResult_get_Locations), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(MapLocationFinderResult_get_Status), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapLocationFinderResult[] = 
    {
        { Py_tp_new, _new_MapLocationFinderResult },
        { Py_tp_dealloc, _dealloc_MapLocationFinderResult },
        { Py_tp_methods, _methods_MapLocationFinderResult },
        { Py_tp_getset, _getset_MapLocationFinderResult },
        { },
    };

    static PyType_Spec _type_spec_MapLocationFinderResult =
    {
        "_winsdk_Windows_Services_Maps.MapLocationFinderResult",
        sizeof(py::wrapper::Windows::Services::Maps::MapLocationFinderResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapLocationFinderResult
    };

    // ----- MapManager class --------------------
    constexpr const char* const _type_name_MapManager = "MapManager";

    static PyObject* _new_MapManager(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapManager);
        return nullptr;
    }

    static PyObject* MapManager_ShowDownloadedMapsUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Services::Maps::MapManager::ShowDownloadedMapsUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapManager_ShowMapsUpdateUI(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Services::Maps::MapManager::ShowMapsUpdateUI();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapManager[] = {
        { "show_downloaded_maps_u_i", reinterpret_cast<PyCFunction>(MapManager_ShowDownloadedMapsUI), METH_VARARGS | METH_STATIC, nullptr },
        { "show_maps_update_u_i", reinterpret_cast<PyCFunction>(MapManager_ShowMapsUpdateUI), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapManager[] = {
        { }
    };

    static PyType_Slot _type_slots_MapManager[] = 
    {
        { Py_tp_new, _new_MapManager },
        { Py_tp_methods, _methods_MapManager },
        { Py_tp_getset, _getset_MapManager },
        { },
    };

    static PyType_Spec _type_spec_MapManager =
    {
        "_winsdk_Windows_Services_Maps.MapManager",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapManager
    };

    // ----- MapRoute class --------------------
    constexpr const char* const _type_name_MapRoute = "MapRoute";

    static PyObject* _new_MapRoute(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapRoute);
        return nullptr;
    }

    static void _dealloc_MapRoute(py::wrapper::Windows::Services::Maps::MapRoute* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapRoute_get_BoundingBox(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_EstimatedDuration(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EstimatedDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_IsTrafficBased(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsTrafficBased());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_Legs(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Legs());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_LengthInMeters(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LengthInMeters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_Path(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Path());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_HasBlockedRoads(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.HasBlockedRoads());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_ViolatedRestrictions(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ViolatedRestrictions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_DurationWithoutTraffic(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DurationWithoutTraffic());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_TrafficCongestion(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TrafficCongestion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRoute_get_IsScenic(py::wrapper::Windows::Services::Maps::MapRoute* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsScenic());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MapRoute(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRoute>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRoute[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRoute), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRoute[] = {
        { "bounding_box", reinterpret_cast<getter>(MapRoute_get_BoundingBox), nullptr, nullptr, nullptr },
        { "estimated_duration", reinterpret_cast<getter>(MapRoute_get_EstimatedDuration), nullptr, nullptr, nullptr },
        { "is_traffic_based", reinterpret_cast<getter>(MapRoute_get_IsTrafficBased), nullptr, nullptr, nullptr },
        { "legs", reinterpret_cast<getter>(MapRoute_get_Legs), nullptr, nullptr, nullptr },
        { "length_in_meters", reinterpret_cast<getter>(MapRoute_get_LengthInMeters), nullptr, nullptr, nullptr },
        { "path", reinterpret_cast<getter>(MapRoute_get_Path), nullptr, nullptr, nullptr },
        { "has_blocked_roads", reinterpret_cast<getter>(MapRoute_get_HasBlockedRoads), nullptr, nullptr, nullptr },
        { "violated_restrictions", reinterpret_cast<getter>(MapRoute_get_ViolatedRestrictions), nullptr, nullptr, nullptr },
        { "duration_without_traffic", reinterpret_cast<getter>(MapRoute_get_DurationWithoutTraffic), nullptr, nullptr, nullptr },
        { "traffic_congestion", reinterpret_cast<getter>(MapRoute_get_TrafficCongestion), nullptr, nullptr, nullptr },
        { "is_scenic", reinterpret_cast<getter>(MapRoute_get_IsScenic), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRoute[] = 
    {
        { Py_tp_new, _new_MapRoute },
        { Py_tp_dealloc, _dealloc_MapRoute },
        { Py_tp_methods, _methods_MapRoute },
        { Py_tp_getset, _getset_MapRoute },
        { },
    };

    static PyType_Spec _type_spec_MapRoute =
    {
        "_winsdk_Windows_Services_Maps.MapRoute",
        sizeof(py::wrapper::Windows::Services::Maps::MapRoute),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRoute
    };

    // ----- MapRouteDrivingOptions class --------------------
    constexpr const char* const _type_name_MapRouteDrivingOptions = "MapRouteDrivingOptions";

    static PyObject* _new_MapRouteDrivingOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Services::Maps::MapRouteDrivingOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_MapRouteDrivingOptions(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapRouteDrivingOptions_get_RouteRestrictions(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RouteRestrictions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_RouteRestrictions(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(arg);

            self->obj.RouteRestrictions(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_RouteOptimization(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RouteOptimization());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_RouteOptimization(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(arg);

            self->obj.RouteOptimization(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_MaxAlternateRouteCount(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.MaxAlternateRouteCount());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_MaxAlternateRouteCount(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.MaxAlternateRouteCount(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_InitialHeading(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InitialHeading());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_InitialHeading(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<double>>(arg);

            self->obj.InitialHeading(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* MapRouteDrivingOptions_get_DepartureTime(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DepartureTime());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int MapRouteDrivingOptions_put_DepartureTime(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime>>(arg);

            self->obj.DepartureTime(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_MapRouteDrivingOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteDrivingOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteDrivingOptions[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteDrivingOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteDrivingOptions[] = {
        { "route_restrictions", reinterpret_cast<getter>(MapRouteDrivingOptions_get_RouteRestrictions), reinterpret_cast<setter>(MapRouteDrivingOptions_put_RouteRestrictions), nullptr, nullptr },
        { "route_optimization", reinterpret_cast<getter>(MapRouteDrivingOptions_get_RouteOptimization), reinterpret_cast<setter>(MapRouteDrivingOptions_put_RouteOptimization), nullptr, nullptr },
        { "max_alternate_route_count", reinterpret_cast<getter>(MapRouteDrivingOptions_get_MaxAlternateRouteCount), reinterpret_cast<setter>(MapRouteDrivingOptions_put_MaxAlternateRouteCount), nullptr, nullptr },
        { "initial_heading", reinterpret_cast<getter>(MapRouteDrivingOptions_get_InitialHeading), reinterpret_cast<setter>(MapRouteDrivingOptions_put_InitialHeading), nullptr, nullptr },
        { "departure_time", reinterpret_cast<getter>(MapRouteDrivingOptions_get_DepartureTime), reinterpret_cast<setter>(MapRouteDrivingOptions_put_DepartureTime), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteDrivingOptions[] = 
    {
        { Py_tp_new, _new_MapRouteDrivingOptions },
        { Py_tp_dealloc, _dealloc_MapRouteDrivingOptions },
        { Py_tp_methods, _methods_MapRouteDrivingOptions },
        { Py_tp_getset, _getset_MapRouteDrivingOptions },
        { },
    };

    static PyType_Spec _type_spec_MapRouteDrivingOptions =
    {
        "_winsdk_Windows_Services_Maps.MapRouteDrivingOptions",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteDrivingOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteDrivingOptions
    };

    // ----- MapRouteFinder class --------------------
    constexpr const char* const _type_name_MapRouteFinder = "MapRouteFinder";

    static PyObject* _new_MapRouteFinder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapRouteFinder);
        return nullptr;
    }

    static PyObject* MapRouteFinder_GetDrivingRouteAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteDrivingOptions>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 3);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 5)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 2);
                auto param3 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 3);
                auto param4 = py::convert_to<double>(args, 4);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteAsync(param0, param1, param2, param3, param4));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetDrivingRouteFromEnhancedWaypointsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Services::Maps::EnhancedWaypoint>>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromEnhancedWaypointsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Services::Maps::EnhancedWaypoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteDrivingOptions>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromEnhancedWaypointsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetDrivingRouteFromWaypointsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 4)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::MapRouteOptimization>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::MapRouteRestrictions>(args, 2);
                auto param3 = py::convert_to<double>(args, 3);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetDrivingRouteFromWaypointsAsync(param0, param1, param2, param3));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetWalkingRouteAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetWalkingRouteAsync(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* MapRouteFinder_GetWalkingRouteFromWaypointsAsync(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::Geopoint>>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::MapRouteFinder::GetWalkingRouteFromWaypointsAsync(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteFinder[] = {
        { "get_driving_route_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetDrivingRouteAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_driving_route_from_enhanced_waypoints_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetDrivingRouteFromEnhancedWaypointsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_driving_route_from_waypoints_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetDrivingRouteFromWaypointsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_walking_route_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetWalkingRouteAsync), METH_VARARGS | METH_STATIC, nullptr },
        { "get_walking_route_from_waypoints_async", reinterpret_cast<PyCFunction>(MapRouteFinder_GetWalkingRouteFromWaypointsAsync), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteFinder[] = {
        { }
    };

    static PyType_Slot _type_slots_MapRouteFinder[] = 
    {
        { Py_tp_new, _new_MapRouteFinder },
        { Py_tp_methods, _methods_MapRouteFinder },
        { Py_tp_getset, _getset_MapRouteFinder },
        { },
    };

    static PyType_Spec _type_spec_MapRouteFinder =
    {
        "_winsdk_Windows_Services_Maps.MapRouteFinder",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteFinder
    };

    // ----- MapRouteFinderResult class --------------------
    constexpr const char* const _type_name_MapRouteFinderResult = "MapRouteFinderResult";

    static PyObject* _new_MapRouteFinderResult(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapRouteFinderResult);
        return nullptr;
    }

    static void _dealloc_MapRouteFinderResult(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapRouteFinderResult_get_Route(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Route());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteFinderResult_get_Status(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Status());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteFinderResult_get_AlternateRoutes(py::wrapper::Windows::Services::Maps::MapRouteFinderResult* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.AlternateRoutes());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MapRouteFinderResult(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteFinderResult>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteFinderResult[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteFinderResult), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteFinderResult[] = {
        { "route", reinterpret_cast<getter>(MapRouteFinderResult_get_Route), nullptr, nullptr, nullptr },
        { "status", reinterpret_cast<getter>(MapRouteFinderResult_get_Status), nullptr, nullptr, nullptr },
        { "alternate_routes", reinterpret_cast<getter>(MapRouteFinderResult_get_AlternateRoutes), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteFinderResult[] = 
    {
        { Py_tp_new, _new_MapRouteFinderResult },
        { Py_tp_dealloc, _dealloc_MapRouteFinderResult },
        { Py_tp_methods, _methods_MapRouteFinderResult },
        { Py_tp_getset, _getset_MapRouteFinderResult },
        { },
    };

    static PyType_Spec _type_spec_MapRouteFinderResult =
    {
        "_winsdk_Windows_Services_Maps.MapRouteFinderResult",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteFinderResult),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteFinderResult
    };

    // ----- MapRouteLeg class --------------------
    constexpr const char* const _type_name_MapRouteLeg = "MapRouteLeg";

    static PyObject* _new_MapRouteLeg(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapRouteLeg);
        return nullptr;
    }

    static void _dealloc_MapRouteLeg(py::wrapper::Windows::Services::Maps::MapRouteLeg* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapRouteLeg_get_BoundingBox(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.BoundingBox());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_EstimatedDuration(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EstimatedDuration());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_LengthInMeters(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LengthInMeters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_Maneuvers(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Maneuvers());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_Path(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Path());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_DurationWithoutTraffic(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DurationWithoutTraffic());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteLeg_get_TrafficCongestion(py::wrapper::Windows::Services::Maps::MapRouteLeg* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.TrafficCongestion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MapRouteLeg(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteLeg>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteLeg[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteLeg), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteLeg[] = {
        { "bounding_box", reinterpret_cast<getter>(MapRouteLeg_get_BoundingBox), nullptr, nullptr, nullptr },
        { "estimated_duration", reinterpret_cast<getter>(MapRouteLeg_get_EstimatedDuration), nullptr, nullptr, nullptr },
        { "length_in_meters", reinterpret_cast<getter>(MapRouteLeg_get_LengthInMeters), nullptr, nullptr, nullptr },
        { "maneuvers", reinterpret_cast<getter>(MapRouteLeg_get_Maneuvers), nullptr, nullptr, nullptr },
        { "path", reinterpret_cast<getter>(MapRouteLeg_get_Path), nullptr, nullptr, nullptr },
        { "duration_without_traffic", reinterpret_cast<getter>(MapRouteLeg_get_DurationWithoutTraffic), nullptr, nullptr, nullptr },
        { "traffic_congestion", reinterpret_cast<getter>(MapRouteLeg_get_TrafficCongestion), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteLeg[] = 
    {
        { Py_tp_new, _new_MapRouteLeg },
        { Py_tp_dealloc, _dealloc_MapRouteLeg },
        { Py_tp_methods, _methods_MapRouteLeg },
        { Py_tp_getset, _getset_MapRouteLeg },
        { },
    };

    static PyType_Spec _type_spec_MapRouteLeg =
    {
        "_winsdk_Windows_Services_Maps.MapRouteLeg",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteLeg),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteLeg
    };

    // ----- MapRouteManeuver class --------------------
    constexpr const char* const _type_name_MapRouteManeuver = "MapRouteManeuver";

    static PyObject* _new_MapRouteManeuver(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapRouteManeuver);
        return nullptr;
    }

    static void _dealloc_MapRouteManeuver(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* MapRouteManeuver_get_ExitNumber(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ExitNumber());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_InstructionText(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.InstructionText());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_Kind(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Kind());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_LengthInMeters(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.LengthInMeters());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_ManeuverNotices(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ManeuverNotices());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_StartingPoint(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartingPoint());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_EndHeading(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.EndHeading());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_StartHeading(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StartHeading());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_StreetName(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.StreetName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapRouteManeuver_get_Warnings(py::wrapper::Windows::Services::Maps::MapRouteManeuver* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Warnings());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_MapRouteManeuver(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::MapRouteManeuver>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapRouteManeuver[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_MapRouteManeuver), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapRouteManeuver[] = {
        { "exit_number", reinterpret_cast<getter>(MapRouteManeuver_get_ExitNumber), nullptr, nullptr, nullptr },
        { "instruction_text", reinterpret_cast<getter>(MapRouteManeuver_get_InstructionText), nullptr, nullptr, nullptr },
        { "kind", reinterpret_cast<getter>(MapRouteManeuver_get_Kind), nullptr, nullptr, nullptr },
        { "length_in_meters", reinterpret_cast<getter>(MapRouteManeuver_get_LengthInMeters), nullptr, nullptr, nullptr },
        { "maneuver_notices", reinterpret_cast<getter>(MapRouteManeuver_get_ManeuverNotices), nullptr, nullptr, nullptr },
        { "starting_point", reinterpret_cast<getter>(MapRouteManeuver_get_StartingPoint), nullptr, nullptr, nullptr },
        { "end_heading", reinterpret_cast<getter>(MapRouteManeuver_get_EndHeading), nullptr, nullptr, nullptr },
        { "start_heading", reinterpret_cast<getter>(MapRouteManeuver_get_StartHeading), nullptr, nullptr, nullptr },
        { "street_name", reinterpret_cast<getter>(MapRouteManeuver_get_StreetName), nullptr, nullptr, nullptr },
        { "warnings", reinterpret_cast<getter>(MapRouteManeuver_get_Warnings), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_MapRouteManeuver[] = 
    {
        { Py_tp_new, _new_MapRouteManeuver },
        { Py_tp_dealloc, _dealloc_MapRouteManeuver },
        { Py_tp_methods, _methods_MapRouteManeuver },
        { Py_tp_getset, _getset_MapRouteManeuver },
        { },
    };

    static PyType_Spec _type_spec_MapRouteManeuver =
    {
        "_winsdk_Windows_Services_Maps.MapRouteManeuver",
        sizeof(py::wrapper::Windows::Services::Maps::MapRouteManeuver),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapRouteManeuver
    };

    // ----- MapService class --------------------
    constexpr const char* const _type_name_MapService = "MapService";

    static PyObject* _new_MapService(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_MapService);
        return nullptr;
    }

    static PyObject* MapService_get_ServiceToken(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::ServiceToken());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapService_put_ServiceToken(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            winrt::Windows::Services::Maps::MapService::ServiceToken(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapService_get_WorldViewRegionCode(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::WorldViewRegionCode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapService_get_DataAttributions(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::DataAttributions());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapService_get_DataUsagePreference(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Services::Maps::MapService::DataUsagePreference());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* MapService_put_DataUsagePreference(PyObject* /*unused*/, PyObject* arg, void* /*unused*/) noexcept
    {
        try
        {
            auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapServiceDataUsagePreference>(arg);

            winrt::Windows::Services::Maps::MapService::DataUsagePreference(param0);
            Py_RETURN_NONE;
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_MapService[] = {
        { "get_service_token", reinterpret_cast<PyCFunction>(MapService_get_ServiceToken), METH_NOARGS | METH_STATIC, nullptr },
        { "put_service_token", reinterpret_cast<PyCFunction>(MapService_put_ServiceToken), METH_O | METH_STATIC, nullptr },
        { "get_world_view_region_code", reinterpret_cast<PyCFunction>(MapService_get_WorldViewRegionCode), METH_NOARGS | METH_STATIC, nullptr },
        { "get_data_attributions", reinterpret_cast<PyCFunction>(MapService_get_DataAttributions), METH_NOARGS | METH_STATIC, nullptr },
        { "get_data_usage_preference", reinterpret_cast<PyCFunction>(MapService_get_DataUsagePreference), METH_NOARGS | METH_STATIC, nullptr },
        { "put_data_usage_preference", reinterpret_cast<PyCFunction>(MapService_put_DataUsagePreference), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_MapService[] = {
        { }
    };

    static PyType_Slot _type_slots_MapService[] = 
    {
        { Py_tp_new, _new_MapService },
        { Py_tp_methods, _methods_MapService },
        { Py_tp_getset, _getset_MapService },
        { },
    };

    static PyType_Spec _type_spec_MapService =
    {
        "_winsdk_Windows_Services_Maps.MapService",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_MapService
    };

    // ----- PlaceInfo class --------------------
    constexpr const char* const _type_name_PlaceInfo = "PlaceInfo";

    static PyObject* _new_PlaceInfo(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_PlaceInfo);
        return nullptr;
    }

    static void _dealloc_PlaceInfo(py::wrapper::Windows::Services::Maps::PlaceInfo* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PlaceInfo_Create(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::Create(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::Create(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_CreateFromAddress(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromAddress(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromAddress(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_CreateFromIdentifier(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromIdentifier(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Devices::Geolocation::Geopoint>(args, 1);
                auto param2 = py::convert_to<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>(args, 2);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromIdentifier(param0, param1, param2));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_CreateFromMapLocation(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Services::Maps::MapLocation>(args, 0);

                return py::convert(winrt::Windows::Services::Maps::PlaceInfo::CreateFromMapLocation(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_Show(py::wrapper::Windows::Services::Maps::PlaceInfo* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);

                self->obj.Show(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Rect>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::UI::Popups::Placement>(args, 1);

                self->obj.Show(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_DisplayAddress(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_DisplayName(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_Geoshape(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Geoshape());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_Identifier(py::wrapper::Windows::Services::Maps::PlaceInfo* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Identifier());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PlaceInfo_get_IsShowSupported(PyObject* /*unused*/, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(winrt::Windows::Services::Maps::PlaceInfo::IsShowSupported());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_PlaceInfo(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::PlaceInfo>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlaceInfo[] = {
        { "create", reinterpret_cast<PyCFunction>(PlaceInfo_Create), METH_VARARGS | METH_STATIC, nullptr },
        { "create_from_address", reinterpret_cast<PyCFunction>(PlaceInfo_CreateFromAddress), METH_VARARGS | METH_STATIC, nullptr },
        { "create_from_identifier", reinterpret_cast<PyCFunction>(PlaceInfo_CreateFromIdentifier), METH_VARARGS | METH_STATIC, nullptr },
        { "create_from_map_location", reinterpret_cast<PyCFunction>(PlaceInfo_CreateFromMapLocation), METH_VARARGS | METH_STATIC, nullptr },
        { "show", reinterpret_cast<PyCFunction>(PlaceInfo_Show), METH_VARARGS, nullptr },
        { "get_is_show_supported", reinterpret_cast<PyCFunction>(PlaceInfo_get_IsShowSupported), METH_NOARGS | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PlaceInfo), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlaceInfo[] = {
        { "display_address", reinterpret_cast<getter>(PlaceInfo_get_DisplayAddress), nullptr, nullptr, nullptr },
        { "display_name", reinterpret_cast<getter>(PlaceInfo_get_DisplayName), nullptr, nullptr, nullptr },
        { "geoshape", reinterpret_cast<getter>(PlaceInfo_get_Geoshape), nullptr, nullptr, nullptr },
        { "identifier", reinterpret_cast<getter>(PlaceInfo_get_Identifier), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlaceInfo[] = 
    {
        { Py_tp_new, _new_PlaceInfo },
        { Py_tp_dealloc, _dealloc_PlaceInfo },
        { Py_tp_methods, _methods_PlaceInfo },
        { Py_tp_getset, _getset_PlaceInfo },
        { },
    };

    static PyType_Spec _type_spec_PlaceInfo =
    {
        "_winsdk_Windows_Services_Maps.PlaceInfo",
        sizeof(py::wrapper::Windows::Services::Maps::PlaceInfo),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlaceInfo
    };

    // ----- PlaceInfoCreateOptions class --------------------
    constexpr const char* const _type_name_PlaceInfoCreateOptions = "PlaceInfoCreateOptions";

    static PyObject* _new_PlaceInfoCreateOptions(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Services::Maps::PlaceInfoCreateOptions instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PlaceInfoCreateOptions(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* PlaceInfoCreateOptions_get_DisplayName(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayName());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlaceInfoCreateOptions_put_DisplayName(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayName(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PlaceInfoCreateOptions_get_DisplayAddress(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.DisplayAddress());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PlaceInfoCreateOptions_put_DisplayAddress(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.DisplayAddress(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PlaceInfoCreateOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PlaceInfoCreateOptions[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_PlaceInfoCreateOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PlaceInfoCreateOptions[] = {
        { "display_name", reinterpret_cast<getter>(PlaceInfoCreateOptions_get_DisplayName), reinterpret_cast<setter>(PlaceInfoCreateOptions_put_DisplayName), nullptr, nullptr },
        { "display_address", reinterpret_cast<getter>(PlaceInfoCreateOptions_get_DisplayAddress), reinterpret_cast<setter>(PlaceInfoCreateOptions_put_DisplayAddress), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PlaceInfoCreateOptions[] = 
    {
        { Py_tp_new, _new_PlaceInfoCreateOptions },
        { Py_tp_dealloc, _dealloc_PlaceInfoCreateOptions },
        { Py_tp_methods, _methods_PlaceInfoCreateOptions },
        { Py_tp_getset, _getset_PlaceInfoCreateOptions },
        { },
    };

    static PyType_Spec _type_spec_PlaceInfoCreateOptions =
    {
        "_winsdk_Windows_Services_Maps.PlaceInfoCreateOptions",
        sizeof(py::wrapper::Windows::Services::Maps::PlaceInfoCreateOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PlaceInfoCreateOptions
    };

    // ----- Windows.Services.Maps Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::Object>::python_type) };

            py::winrt_type<winrt::Windows::Services::Maps::EnhancedWaypoint>::python_type = py::register_python_type(module, _type_name_EnhancedWaypoint, &_type_spec_EnhancedWaypoint, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::ManeuverWarning>::python_type = py::register_python_type(module, _type_name_ManeuverWarning, &_type_spec_ManeuverWarning, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapAddress>::python_type = py::register_python_type(module, _type_name_MapAddress, &_type_spec_MapAddress, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapLocation>::python_type = py::register_python_type(module, _type_name_MapLocation, &_type_spec_MapLocation, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapLocationFinder>::python_type = py::register_python_type(module, _type_name_MapLocationFinder, &_type_spec_MapLocationFinder, nullptr);
            py::winrt_type<winrt::Windows::Services::Maps::MapLocationFinderResult>::python_type = py::register_python_type(module, _type_name_MapLocationFinderResult, &_type_spec_MapLocationFinderResult, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapManager>::python_type = py::register_python_type(module, _type_name_MapManager, &_type_spec_MapManager, nullptr);
            py::winrt_type<winrt::Windows::Services::Maps::MapRoute>::python_type = py::register_python_type(module, _type_name_MapRoute, &_type_spec_MapRoute, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapRouteDrivingOptions>::python_type = py::register_python_type(module, _type_name_MapRouteDrivingOptions, &_type_spec_MapRouteDrivingOptions, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapRouteFinder>::python_type = py::register_python_type(module, _type_name_MapRouteFinder, &_type_spec_MapRouteFinder, nullptr);
            py::winrt_type<winrt::Windows::Services::Maps::MapRouteFinderResult>::python_type = py::register_python_type(module, _type_name_MapRouteFinderResult, &_type_spec_MapRouteFinderResult, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapRouteLeg>::python_type = py::register_python_type(module, _type_name_MapRouteLeg, &_type_spec_MapRouteLeg, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapRouteManeuver>::python_type = py::register_python_type(module, _type_name_MapRouteManeuver, &_type_spec_MapRouteManeuver, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::MapService>::python_type = py::register_python_type(module, _type_name_MapService, &_type_spec_MapService, nullptr);
            py::winrt_type<winrt::Windows::Services::Maps::PlaceInfo>::python_type = py::register_python_type(module, _type_name_PlaceInfo, &_type_spec_PlaceInfo, bases.get());
            py::winrt_type<winrt::Windows::Services::Maps::PlaceInfoCreateOptions>::python_type = py::register_python_type(module, _type_name_PlaceInfoCreateOptions, &_type_spec_PlaceInfoCreateOptions, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {{Py_mod_exec, module_exec}, {}};

    PyDoc_STRVAR(module_doc, "Windows.Services.Maps");

    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Services_Maps",
           module_doc,
           0,
           nullptr,
           module_slots,
           nullptr,
           nullptr,
           nullptr};
} // py::cpp::Windows::Services::Maps

PyMODINIT_FUNC
PyInit__winsdk_Windows_Services_Maps (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Services::Maps::module_def);
}
