// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

#include "pybase.h"
#include "py.Windows.Data.Json.h"

PyTypeObject* py::winrt_type<winrt::Windows::Data::Json::JsonArray>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Json::JsonError>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Json::JsonObject>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Json::JsonValue>::python_type;
PyTypeObject* py::winrt_type<winrt::Windows::Data::Json::IJsonValue>::python_type;

namespace py::cpp::Windows::Data::Json
{
    // ----- JsonArray class --------------------
    constexpr const char* const _type_name_JsonArray = "JsonArray";

    static PyObject* _new_JsonArray(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Data::Json::JsonArray instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_JsonArray(py::wrapper::Windows::Data::Json::JsonArray* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* JsonArray_Append(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Data::Json::IJsonValue>(args, 0);

                self->obj.Append(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_Clear(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_First(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetArray(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetArray());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetArrayAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetArrayAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetBoolean(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetBoolean());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetBooleanAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetBooleanAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetMany(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1_count = py::convert_to<winrt::com_array<winrt::Windows::Data::Json::IJsonValue>::size_type>(args, 1);
                winrt::com_array<winrt::Windows::Data::Json::IJsonValue> param1 ( param1_count, py::empty_instance<winrt::Windows::Data::Json::IJsonValue>::get() );

                auto return_value = self->obj.GetMany(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetNumber(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetNumber());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetNumberAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetNumberAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetObject(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetObject());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetObjectAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetObjectAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetString(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetStringAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.GetStringAt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_GetView(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_IndexOf(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Data::Json::IJsonValue>(args, 0);
                uint32_t param1 {  };

                auto return_value = self->obj.IndexOf(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_InsertAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Json::IJsonValue>(args, 1);

                self->obj.InsertAt(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_Parse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Data::Json::JsonArray::Parse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_RemoveAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                self->obj.RemoveAt(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_RemoveAtEnd(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.RemoveAtEnd();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_ReplaceAll(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::array_view<winrt::Windows::Data::Json::IJsonValue>>(args, 0);

                self->obj.ReplaceAll(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_SetAt(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Json::IJsonValue>(args, 1);

                self->obj.SetAt(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_Stringify(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Stringify());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_ToString(py::wrapper::Windows::Data::Json::JsonArray* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ToString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_TryParse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                winrt::Windows::Data::Json::JsonArray param1 { nullptr };

                auto return_value = winrt::Windows::Data::Json::JsonArray::TryParse(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonArray_get_ValueType(py::wrapper::Windows::Data::Json::JsonArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ValueType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* JsonArray_get_Size(py::wrapper::Windows::Data::Json::JsonArray* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_JsonArray(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Json::JsonArray>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _str_JsonArray(py::wrapper::Windows::Data::Json::JsonArray* self) noexcept
    {
        try
        {
            return py::convert(self->obj.ToString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_JsonArray(py::wrapper::Windows::Data::Json::JsonArray* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static Py_ssize_t _seq_length_JsonArray(py::wrapper::Windows::Data::Json::JsonArray* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _seq_item_JsonArray(py::wrapper::Windows::Data::Json::JsonArray* self, Py_ssize_t i) noexcept
    {
        try
        {
            return py::convert(self->obj.GetAt(static_cast<uint32_t>(i)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _seq_assign_JsonArray(py::wrapper::Windows::Data::Json::JsonArray* self, Py_ssize_t i, PyObject* value) noexcept
    {
        try
        {
            if (value == nullptr) { self->obj.RemoveAt(static_cast<uint32_t>(i)); }
            else { self->obj.SetAt(static_cast<uint32_t>(i), py::convert_to<winrt::Windows::Data::Json::IJsonValue>(value)); }
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_JsonArray[] = {
        { "append", reinterpret_cast<PyCFunction>(JsonArray_Append), METH_VARARGS, nullptr },
        { "clear", reinterpret_cast<PyCFunction>(JsonArray_Clear), METH_VARARGS, nullptr },
        { "first", reinterpret_cast<PyCFunction>(JsonArray_First), METH_VARARGS, nullptr },
        { "get_array", reinterpret_cast<PyCFunction>(JsonArray_GetArray), METH_VARARGS, nullptr },
        { "get_array_at", reinterpret_cast<PyCFunction>(JsonArray_GetArrayAt), METH_VARARGS, nullptr },
        { "get_at", reinterpret_cast<PyCFunction>(JsonArray_GetAt), METH_VARARGS, nullptr },
        { "get_boolean", reinterpret_cast<PyCFunction>(JsonArray_GetBoolean), METH_VARARGS, nullptr },
        { "get_boolean_at", reinterpret_cast<PyCFunction>(JsonArray_GetBooleanAt), METH_VARARGS, nullptr },
        { "get_many", reinterpret_cast<PyCFunction>(JsonArray_GetMany), METH_VARARGS, nullptr },
        { "get_number", reinterpret_cast<PyCFunction>(JsonArray_GetNumber), METH_VARARGS, nullptr },
        { "get_number_at", reinterpret_cast<PyCFunction>(JsonArray_GetNumberAt), METH_VARARGS, nullptr },
        { "get_object", reinterpret_cast<PyCFunction>(JsonArray_GetObject), METH_VARARGS, nullptr },
        { "get_object_at", reinterpret_cast<PyCFunction>(JsonArray_GetObjectAt), METH_VARARGS, nullptr },
        { "get_string", reinterpret_cast<PyCFunction>(JsonArray_GetString), METH_VARARGS, nullptr },
        { "get_string_at", reinterpret_cast<PyCFunction>(JsonArray_GetStringAt), METH_VARARGS, nullptr },
        { "get_view", reinterpret_cast<PyCFunction>(JsonArray_GetView), METH_VARARGS, nullptr },
        { "index_of", reinterpret_cast<PyCFunction>(JsonArray_IndexOf), METH_VARARGS, nullptr },
        { "insert_at", reinterpret_cast<PyCFunction>(JsonArray_InsertAt), METH_VARARGS, nullptr },
        { "parse", reinterpret_cast<PyCFunction>(JsonArray_Parse), METH_VARARGS | METH_STATIC, nullptr },
        { "remove_at", reinterpret_cast<PyCFunction>(JsonArray_RemoveAt), METH_VARARGS, nullptr },
        { "remove_at_end", reinterpret_cast<PyCFunction>(JsonArray_RemoveAtEnd), METH_VARARGS, nullptr },
        { "replace_all", reinterpret_cast<PyCFunction>(JsonArray_ReplaceAll), METH_VARARGS, nullptr },
        { "set_at", reinterpret_cast<PyCFunction>(JsonArray_SetAt), METH_VARARGS, nullptr },
        { "stringify", reinterpret_cast<PyCFunction>(JsonArray_Stringify), METH_VARARGS, nullptr },
        { "to_string", reinterpret_cast<PyCFunction>(JsonArray_ToString), METH_VARARGS, nullptr },
        { "try_parse", reinterpret_cast<PyCFunction>(JsonArray_TryParse), METH_VARARGS | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_JsonArray), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_JsonArray[] = {
        { "value_type", reinterpret_cast<getter>(JsonArray_get_ValueType), nullptr, nullptr, nullptr },
        { "size", reinterpret_cast<getter>(JsonArray_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_JsonArray[] = 
    {
        { Py_tp_new, _new_JsonArray },
        { Py_tp_dealloc, _dealloc_JsonArray },
        { Py_tp_methods, _methods_JsonArray },
        { Py_tp_getset, _getset_JsonArray },
        { Py_tp_str, _str_JsonArray },
        { Py_tp_iter, _iterator_JsonArray },
        { Py_sq_length, _seq_length_JsonArray },
        { Py_sq_item, _seq_item_JsonArray },
        { Py_sq_ass_item, _seq_assign_JsonArray },
        { },
    };

    static PyType_Spec _type_spec_JsonArray =
    {
        "_winsdk_Windows_Data_Json.JsonArray",
        sizeof(py::wrapper::Windows::Data::Json::JsonArray),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_JsonArray
    };

    // ----- JsonError class --------------------
    constexpr const char* const _type_name_JsonError = "JsonError";

    static PyObject* _new_JsonError(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_JsonError);
        return nullptr;
    }

    static PyObject* JsonError_GetJsonStatus(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(winrt::Windows::Data::Json::JsonError::GetJsonStatus(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyMethodDef _methods_JsonError[] = {
        { "get_json_status", reinterpret_cast<PyCFunction>(JsonError_GetJsonStatus), METH_VARARGS | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_JsonError[] = {
        { }
    };

    static PyType_Slot _type_slots_JsonError[] = 
    {
        { Py_tp_new, _new_JsonError },
        { Py_tp_methods, _methods_JsonError },
        { Py_tp_getset, _getset_JsonError },
        { },
    };

    static PyType_Spec _type_spec_JsonError =
    {
        "_winsdk_Windows_Data_Json.JsonError",
        0,
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_JsonError
    };

    // ----- JsonObject class --------------------
    constexpr const char* const _type_name_JsonObject = "JsonObject";

    static PyObject* _new_JsonObject(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Data::Json::JsonObject instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_JsonObject(py::wrapper::Windows::Data::Json::JsonObject* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* JsonObject_Clear(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                self->obj.Clear();
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_First(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.First());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetArray(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetArray());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetBoolean(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetBoolean());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetNamedArray(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetNamedArray(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Json::JsonArray>(args, 1);

                return py::convert(self->obj.GetNamedArray(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetNamedBoolean(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetNamedBoolean(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<bool>(args, 1);

                return py::convert(self->obj.GetNamedBoolean(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetNamedNumber(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetNamedNumber(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<double>(args, 1);

                return py::convert(self->obj.GetNamedNumber(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetNamedObject(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetNamedObject(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Json::JsonObject>(args, 1);

                return py::convert(self->obj.GetNamedObject(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetNamedString(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetNamedString(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                return py::convert(self->obj.GetNamedString(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetNamedValue(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.GetNamedValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Json::JsonValue>(args, 1);

                return py::convert(self->obj.GetNamedValue(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetNumber(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetNumber());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetObject(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetObject());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetString(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_GetView(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetView());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_HasKey(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.HasKey(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_Insert(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Json::IJsonValue>(args, 1);

                return py::convert(self->obj.Insert(param0, param1));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_Lookup(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.Lookup(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_Parse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Data::Json::JsonObject::Parse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_Remove(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                self->obj.Remove(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_SetNamedValue(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Data::Json::IJsonValue>(args, 1);

                self->obj.SetNamedValue(param0, param1);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_Stringify(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Stringify());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_ToString(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ToString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_TryParse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                winrt::Windows::Data::Json::JsonObject param1 { nullptr };

                auto return_value = winrt::Windows::Data::Json::JsonObject::TryParse(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonObject_get_ValueType(py::wrapper::Windows::Data::Json::JsonObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ValueType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* JsonObject_get_Size(py::wrapper::Windows::Data::Json::JsonObject* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_JsonObject(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Json::JsonObject>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _str_JsonObject(py::wrapper::Windows::Data::Json::JsonObject* self) noexcept
    {
        try
        {
            return py::convert(self->obj.ToString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _iterator_JsonObject(py::wrapper::Windows::Data::Json::JsonObject* self) noexcept
    {
        try
        {
            return py::convert(self->obj.First());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_contains_JsonObject(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* key) noexcept
    {
        try
        {
            return static_cast<int>(self->obj.HasKey(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static Py_ssize_t _map_length_JsonObject(py::wrapper::Windows::Data::Json::JsonObject* self) noexcept
    {
        try
        {
            return static_cast<Py_ssize_t>(self->obj.Size());
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _map_subscript_JsonObject(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* key) noexcept
    {
        try
        {
            return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int _map_assign_JsonObject(py::wrapper::Windows::Data::Json::JsonObject* self, PyObject* key, PyObject* value) noexcept
    {
        try
        {
            auto _key = py::convert_to<winrt::hstring>(key);
            if (value == nullptr) { self->obj.Remove(_key); }
            else { self->obj.Insert(_key, py::convert_to<winrt::Windows::Data::Json::IJsonValue>(value)); }
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyMethodDef _methods_JsonObject[] = {
        { "clear", reinterpret_cast<PyCFunction>(JsonObject_Clear), METH_VARARGS, nullptr },
        { "first", reinterpret_cast<PyCFunction>(JsonObject_First), METH_VARARGS, nullptr },
        { "get_array", reinterpret_cast<PyCFunction>(JsonObject_GetArray), METH_VARARGS, nullptr },
        { "get_boolean", reinterpret_cast<PyCFunction>(JsonObject_GetBoolean), METH_VARARGS, nullptr },
        { "get_named_array", reinterpret_cast<PyCFunction>(JsonObject_GetNamedArray), METH_VARARGS, nullptr },
        { "get_named_boolean", reinterpret_cast<PyCFunction>(JsonObject_GetNamedBoolean), METH_VARARGS, nullptr },
        { "get_named_number", reinterpret_cast<PyCFunction>(JsonObject_GetNamedNumber), METH_VARARGS, nullptr },
        { "get_named_object", reinterpret_cast<PyCFunction>(JsonObject_GetNamedObject), METH_VARARGS, nullptr },
        { "get_named_string", reinterpret_cast<PyCFunction>(JsonObject_GetNamedString), METH_VARARGS, nullptr },
        { "get_named_value", reinterpret_cast<PyCFunction>(JsonObject_GetNamedValue), METH_VARARGS, nullptr },
        { "get_number", reinterpret_cast<PyCFunction>(JsonObject_GetNumber), METH_VARARGS, nullptr },
        { "get_object", reinterpret_cast<PyCFunction>(JsonObject_GetObject), METH_VARARGS, nullptr },
        { "get_string", reinterpret_cast<PyCFunction>(JsonObject_GetString), METH_VARARGS, nullptr },
        { "get_view", reinterpret_cast<PyCFunction>(JsonObject_GetView), METH_VARARGS, nullptr },
        { "has_key", reinterpret_cast<PyCFunction>(JsonObject_HasKey), METH_VARARGS, nullptr },
        { "insert", reinterpret_cast<PyCFunction>(JsonObject_Insert), METH_VARARGS, nullptr },
        { "lookup", reinterpret_cast<PyCFunction>(JsonObject_Lookup), METH_VARARGS, nullptr },
        { "parse", reinterpret_cast<PyCFunction>(JsonObject_Parse), METH_VARARGS | METH_STATIC, nullptr },
        { "remove", reinterpret_cast<PyCFunction>(JsonObject_Remove), METH_VARARGS, nullptr },
        { "set_named_value", reinterpret_cast<PyCFunction>(JsonObject_SetNamedValue), METH_VARARGS, nullptr },
        { "stringify", reinterpret_cast<PyCFunction>(JsonObject_Stringify), METH_VARARGS, nullptr },
        { "to_string", reinterpret_cast<PyCFunction>(JsonObject_ToString), METH_VARARGS, nullptr },
        { "try_parse", reinterpret_cast<PyCFunction>(JsonObject_TryParse), METH_VARARGS | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_JsonObject), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_JsonObject[] = {
        { "value_type", reinterpret_cast<getter>(JsonObject_get_ValueType), nullptr, nullptr, nullptr },
        { "size", reinterpret_cast<getter>(JsonObject_get_Size), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_JsonObject[] = 
    {
        { Py_tp_new, _new_JsonObject },
        { Py_tp_dealloc, _dealloc_JsonObject },
        { Py_tp_methods, _methods_JsonObject },
        { Py_tp_getset, _getset_JsonObject },
        { Py_tp_str, _str_JsonObject },
        { Py_tp_iter, _iterator_JsonObject },
        { Py_sq_contains, _map_contains_JsonObject },
        { Py_mp_length, _map_length_JsonObject },
        { Py_mp_subscript, _map_subscript_JsonObject },
        { Py_mp_ass_subscript, _map_assign_JsonObject },
        { },
    };

    static PyType_Spec _type_spec_JsonObject =
    {
        "_winsdk_Windows_Data_Json.JsonObject",
        sizeof(py::wrapper::Windows::Data::Json::JsonObject),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_JsonObject
    };

    // ----- JsonValue class --------------------
    constexpr const char* const _type_name_JsonValue = "JsonValue";

    static PyObject* _new_JsonValue(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        py::set_invalid_activation_error(_type_name_JsonValue);
        return nullptr;
    }

    static void _dealloc_JsonValue(py::wrapper::Windows::Data::Json::JsonValue* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* JsonValue_CreateBooleanValue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<bool>(args, 0);

                return py::convert(winrt::Windows::Data::Json::JsonValue::CreateBooleanValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_CreateNullValue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(winrt::Windows::Data::Json::JsonValue::CreateNullValue());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_CreateNumberValue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(winrt::Windows::Data::Json::JsonValue::CreateNumberValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_CreateStringValue(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Data::Json::JsonValue::CreateStringValue(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_GetArray(py::wrapper::Windows::Data::Json::JsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetArray());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_GetBoolean(py::wrapper::Windows::Data::Json::JsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetBoolean());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_GetNumber(py::wrapper::Windows::Data::Json::JsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetNumber());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_GetObject(py::wrapper::Windows::Data::Json::JsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetObject());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_GetString(py::wrapper::Windows::Data::Json::JsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_Parse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(winrt::Windows::Data::Json::JsonValue::Parse(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_Stringify(py::wrapper::Windows::Data::Json::JsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Stringify());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_ToString(py::wrapper::Windows::Data::Json::JsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.ToString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_TryParse(PyObject* /*unused*/, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                winrt::Windows::Data::Json::JsonValue param1 { nullptr };

                auto return_value = winrt::Windows::Data::Json::JsonValue::TryParse(param0, param1);

                py::pyobj_handle out_return_value{ py::convert(return_value) };
                if (!out_return_value)
                {
                    return nullptr;
                }
                py::pyobj_handle out1{ py::convert(param1) };
                if (!out1)
                {
                    return nullptr;
                }
                return PyTuple_Pack(2, out_return_value.get(), out1.get());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* JsonValue_get_ValueType(py::wrapper::Windows::Data::Json::JsonValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ValueType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_JsonValue(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Json::JsonValue>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _str_JsonValue(py::wrapper::Windows::Data::Json::JsonValue* self) noexcept
    {
        try
        {
            return py::convert(self->obj.ToString());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_JsonValue[] = {
        { "create_boolean_value", reinterpret_cast<PyCFunction>(JsonValue_CreateBooleanValue), METH_VARARGS | METH_STATIC, nullptr },
        { "create_null_value", reinterpret_cast<PyCFunction>(JsonValue_CreateNullValue), METH_VARARGS | METH_STATIC, nullptr },
        { "create_number_value", reinterpret_cast<PyCFunction>(JsonValue_CreateNumberValue), METH_VARARGS | METH_STATIC, nullptr },
        { "create_string_value", reinterpret_cast<PyCFunction>(JsonValue_CreateStringValue), METH_VARARGS | METH_STATIC, nullptr },
        { "get_array", reinterpret_cast<PyCFunction>(JsonValue_GetArray), METH_VARARGS, nullptr },
        { "get_boolean", reinterpret_cast<PyCFunction>(JsonValue_GetBoolean), METH_VARARGS, nullptr },
        { "get_number", reinterpret_cast<PyCFunction>(JsonValue_GetNumber), METH_VARARGS, nullptr },
        { "get_object", reinterpret_cast<PyCFunction>(JsonValue_GetObject), METH_VARARGS, nullptr },
        { "get_string", reinterpret_cast<PyCFunction>(JsonValue_GetString), METH_VARARGS, nullptr },
        { "parse", reinterpret_cast<PyCFunction>(JsonValue_Parse), METH_VARARGS | METH_STATIC, nullptr },
        { "stringify", reinterpret_cast<PyCFunction>(JsonValue_Stringify), METH_VARARGS, nullptr },
        { "to_string", reinterpret_cast<PyCFunction>(JsonValue_ToString), METH_VARARGS, nullptr },
        { "try_parse", reinterpret_cast<PyCFunction>(JsonValue_TryParse), METH_VARARGS | METH_STATIC, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_JsonValue), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_JsonValue[] = {
        { "value_type", reinterpret_cast<getter>(JsonValue_get_ValueType), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_JsonValue[] = 
    {
        { Py_tp_new, _new_JsonValue },
        { Py_tp_dealloc, _dealloc_JsonValue },
        { Py_tp_methods, _methods_JsonValue },
        { Py_tp_getset, _getset_JsonValue },
        { Py_tp_str, _str_JsonValue },
        { },
    };

    static PyType_Spec _type_spec_JsonValue =
    {
        "_winsdk_Windows_Data_Json.JsonValue",
        sizeof(py::wrapper::Windows::Data::Json::JsonValue),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_JsonValue
    };

    // ----- IJsonValue interface --------------------
    constexpr const char* const _type_name_IJsonValue = "IJsonValue";

    static PyObject* _new_IJsonValue(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(_type_name_IJsonValue);
        return nullptr;
    }

    static void _dealloc_IJsonValue(py::wrapper::Windows::Data::Json::IJsonValue* self)
    {
        auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
        py::wrapped_instance(hash_value, nullptr);
        self->obj = nullptr;
    }

    static PyObject* IJsonValue_GetArray(py::wrapper::Windows::Data::Json::IJsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetArray());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IJsonValue_GetBoolean(py::wrapper::Windows::Data::Json::IJsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetBoolean());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IJsonValue_GetNumber(py::wrapper::Windows::Data::Json::IJsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetNumber());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IJsonValue_GetObject(py::wrapper::Windows::Data::Json::IJsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetObject());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IJsonValue_GetString(py::wrapper::Windows::Data::Json::IJsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.GetString());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IJsonValue_Stringify(py::wrapper::Windows::Data::Json::IJsonValue* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 0)
        {
            try
            {
                return py::convert(self->obj.Stringify());
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IJsonValue_get_ValueType(py::wrapper::Windows::Data::Json::IJsonValue* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ValueType());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_IJsonValue(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Data::Json::IJsonValue>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IJsonValue[] = {
        { "get_array", reinterpret_cast<PyCFunction>(IJsonValue_GetArray), METH_VARARGS, nullptr },
        { "get_boolean", reinterpret_cast<PyCFunction>(IJsonValue_GetBoolean), METH_VARARGS, nullptr },
        { "get_number", reinterpret_cast<PyCFunction>(IJsonValue_GetNumber), METH_VARARGS, nullptr },
        { "get_object", reinterpret_cast<PyCFunction>(IJsonValue_GetObject), METH_VARARGS, nullptr },
        { "get_string", reinterpret_cast<PyCFunction>(IJsonValue_GetString), METH_VARARGS, nullptr },
        { "stringify", reinterpret_cast<PyCFunction>(IJsonValue_Stringify), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IJsonValue), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IJsonValue[] = {
        { "value_type", reinterpret_cast<getter>(IJsonValue_get_ValueType), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IJsonValue[] = 
    {
        { Py_tp_new, _new_IJsonValue },
        { Py_tp_dealloc, _dealloc_IJsonValue },
        { Py_tp_methods, _methods_IJsonValue },
        { Py_tp_getset, _getset_IJsonValue },
        { },
    };

    static PyType_Spec _type_spec_IJsonValue =
    {
        "_winsdk_Windows_Data_Json.IJsonValue",
        sizeof(py::wrapper::Windows::Data::Json::IJsonValue),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IJsonValue
    };

    // ----- Windows.Data.Json Initialization --------------------
    static int module_exec(PyObject* module) noexcept
    {
        try
        {
            py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::Object>::python_type) };

            py::winrt_type<winrt::Windows::Data::Json::JsonArray>::python_type = py::register_python_type(module, _type_name_JsonArray, &_type_spec_JsonArray, bases.get());
            py::winrt_type<winrt::Windows::Data::Json::JsonError>::python_type = py::register_python_type(module, _type_name_JsonError, &_type_spec_JsonError, nullptr);
            py::winrt_type<winrt::Windows::Data::Json::JsonObject>::python_type = py::register_python_type(module, _type_name_JsonObject, &_type_spec_JsonObject, bases.get());
            py::winrt_type<winrt::Windows::Data::Json::JsonValue>::python_type = py::register_python_type(module, _type_name_JsonValue, &_type_spec_JsonValue, bases.get());
            py::winrt_type<winrt::Windows::Data::Json::IJsonValue>::python_type = py::register_python_type(module, _type_name_IJsonValue, &_type_spec_IJsonValue, bases.get());

            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyModuleDef_Slot module_slots[] = {{Py_mod_exec, module_exec}, {}};

    PyDoc_STRVAR(module_doc, "Windows.Data.Json");

    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Data_Json",
           module_doc,
           0,
           nullptr,
           module_slots,
           nullptr,
           nullptr,
           nullptr};
} // py::cpp::Windows::Data::Json

PyMODINIT_FUNC
PyInit__winsdk_Windows_Data_Json (void) noexcept
{
    return PyModuleDef_Init(&py::cpp::Windows::Data::Json::module_def);
}
