# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.4

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

class CollectionChange(enum.IntEnum):
    RESET = 0
    ITEM_INSERTED = 1
    ITEM_REMOVED = 2
    ITEM_CHANGED = 3

class PropertySet(_winrt.Object, interfaces=[IPropertySet, IObservableMap[str, _winrt.Object], IMap[str, _winrt.Object], IIterable[IKeyValuePair[str, _winrt.Object]]]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> PropertySet: ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[IIterator[IKeyValuePair[str, _winrt.Object]]]: ...
    def get_view(self) -> typing.Optional[IMapView[str, _winrt.Object]]: ...
    def has_key(self, key: str) -> _winrt.Boolean: ...
    def insert(self, key: str, value: typing.Optional[_winrt.Object]) -> _winrt.Boolean: ...
    def lookup(self, key: str) -> typing.Optional[_winrt.Object]: ...
    def remove(self, key: str) -> None: ...
    def add_map_changed(self, vhnd: MapChangedEventHandler[str, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_map_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class StringMap(_winrt.Object, interfaces=[IMap[str, str], IIterable[IKeyValuePair[str, str]], IObservableMap[str, str]]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> StringMap: ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[IIterator[IKeyValuePair[str, str]]]: ...
    def get_view(self) -> typing.Optional[IMapView[str, str]]: ...
    def has_key(self, key: str) -> _winrt.Boolean: ...
    def insert(self, key: str, value: str) -> _winrt.Boolean: ...
    def lookup(self, key: str) -> str: ...
    def remove(self, key: str) -> None: ...
    def add_map_changed(self, vhnd: MapChangedEventHandler[str, str]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_map_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class ValueSet(_winrt.Object, interfaces=[IPropertySet, IObservableMap[str, _winrt.Object], IMap[str, _winrt.Object], IIterable[IKeyValuePair[str, _winrt.Object]]]):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> ValueSet: ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def first(self) -> typing.Optional[IIterator[IKeyValuePair[str, _winrt.Object]]]: ...
    def get_view(self) -> typing.Optional[IMapView[str, _winrt.Object]]: ...
    def has_key(self, key: str) -> _winrt.Boolean: ...
    def insert(self, key: str, value: typing.Optional[_winrt.Object]) -> _winrt.Boolean: ...
    def lookup(self, key: str) -> typing.Optional[_winrt.Object]: ...
    def remove(self, key: str) -> None: ...
    def add_map_changed(self, vhnd: MapChangedEventHandler[str, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_map_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

T = typing.TypeVar('T')

class IIterable(typing.Protocol[T]):
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __iter__(self) -> typing.Iterator[T]: ...
    def first(self) -> typing.Optional[IIterator[T]]: ...

T = typing.TypeVar('T')

class IIterator(typing.Protocol[T]):
    current: typing.Optional[T]
    has_current: _winrt.Boolean
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __iter__(self) -> typing.Iterator[T]: ...
    def __next__(self) -> T: ...
    def get_many(self, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[T]]]: ...
    def move_next(self) -> _winrt.Boolean: ...

K = typing.TypeVar('K')

V = typing.TypeVar('V')

class IKeyValuePair(typing.Protocol[K, V]):
    key: typing.Optional[K]
    value: typing.Optional[V]
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...

K = typing.TypeVar('K')

class IMapChangedEventArgs(typing.Protocol[K]):
    collection_change: CollectionChange
    key: typing.Optional[K]
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...

K = typing.TypeVar('K')

V = typing.TypeVar('V')

class IMapView(typing.Protocol[K, V]):
    size: _winrt.UInt32
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __contains__(self, key: K) -> bool:...
    def __len__(self) -> int: ...
    def __getitem__(self, key: K) -> V: ...
    def has_key(self, key: typing.Optional[K]) -> _winrt.Boolean: ...
    def lookup(self, key: typing.Optional[K]) -> typing.Optional[V]: ...
    def split(self, ) -> typing.Tuple[typing.Optional[IMapView[K, V]], typing.Optional[IMapView[K, V]]]: ...
    def first(self) -> typing.Optional[IIterator[IKeyValuePair[K, V]]]: ...

K = typing.TypeVar('K')

V = typing.TypeVar('V')

class IMap(typing.Protocol[K, V]):
    size: _winrt.UInt32
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __contains__(self, key: K) -> bool:...
    def __len__(self) -> int: ...
    def __getitem__(self, key: K) -> V: ...
    def __setitem__(self, key: K, value: V) -> None: ...
    def __delitem__(self, key: K) -> None: ...
    def clear(self) -> None: ...
    def get_view(self) -> typing.Optional[IMapView[K, V]]: ...
    def has_key(self, key: typing.Optional[K]) -> _winrt.Boolean: ...
    def insert(self, key: typing.Optional[K], value: typing.Optional[V]) -> _winrt.Boolean: ...
    def lookup(self, key: typing.Optional[K]) -> typing.Optional[V]: ...
    def remove(self, key: typing.Optional[K]) -> None: ...
    def first(self) -> typing.Optional[IIterator[IKeyValuePair[K, V]]]: ...

K = typing.TypeVar('K')

V = typing.TypeVar('V')

class IObservableMap(typing.Protocol[K, V]):
    size: _winrt.UInt32
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def clear(self) -> None: ...
    def get_view(self) -> typing.Optional[IMapView[K, V]]: ...
    def has_key(self, key: typing.Optional[K]) -> _winrt.Boolean: ...
    def insert(self, key: typing.Optional[K], value: typing.Optional[V]) -> _winrt.Boolean: ...
    def lookup(self, key: typing.Optional[K]) -> typing.Optional[V]: ...
    def remove(self, key: typing.Optional[K]) -> None: ...
    def first(self) -> typing.Optional[IIterator[IKeyValuePair[K, V]]]: ...
    def add_map_changed(self, vhnd: MapChangedEventHandler[K, V]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_map_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

T = typing.TypeVar('T')

class IObservableVector(typing.Protocol[T]):
    size: _winrt.UInt32
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def append(self, value: typing.Optional[T]) -> None: ...
    def clear(self) -> None: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[T]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[T]]]: ...
    def get_view(self) -> typing.Optional[IVectorView[T]]: ...
    def index_of(self, value: typing.Optional[T]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[T]) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[T]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[T]) -> None: ...
    def first(self) -> typing.Optional[IIterator[T]]: ...
    def add_vector_changed(self, vhnd: VectorChangedEventHandler[T]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_vector_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class IPropertySet(typing.Protocol):
    size: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> IPropertySet: ...
    def clear(self) -> None: ...
    def get_view(self) -> typing.Optional[IMapView[str, _winrt.Object]]: ...
    def has_key(self, key: typing.Optional[str]) -> _winrt.Boolean: ...
    def insert(self, key: typing.Optional[str], value: typing.Optional[_winrt.Object]) -> _winrt.Boolean: ...
    def lookup(self, key: typing.Optional[str]) -> typing.Optional[_winrt.Object]: ...
    def remove(self, key: typing.Optional[str]) -> None: ...
    def first(self) -> typing.Optional[IIterator[IKeyValuePair[str, _winrt.Object]]]: ...
    def add_map_changed(self, vhnd: MapChangedEventHandler[str, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken: ...
    def remove_map_changed(self, token: winsdk.windows.foundation.EventRegistrationToken) -> None: ...

class IVectorChangedEventArgs(typing.Protocol):
    collection_change: CollectionChange
    index: _winrt.UInt32
    @staticmethod
    def _from(obj: _winrt.Object) -> IVectorChangedEventArgs: ...

T = typing.TypeVar('T')

class IVectorView(typing.Protocol[T]):
    size: _winrt.UInt32
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> T: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[T]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[T]]]: ...
    def index_of(self, value: typing.Optional[T]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def first(self) -> typing.Optional[IIterator[T]]: ...

T = typing.TypeVar('T')

class IVector(typing.Protocol[T]):
    size: _winrt.UInt32
    if sys.version_info >= (3, 9):
        def __class_getitem__(cls, key: typing.Any) -> types.GenericAlias: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> T: ...
    def __setitem__(self, index: int, value: T) -> None: ...
    def __delitem__(self, index: int) -> None: ...
    def append(self, value: typing.Optional[T]) -> None: ...
    def clear(self) -> None: ...
    def get_at(self, index: _winrt.UInt32) -> typing.Optional[T]: ...
    def get_many(self, start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[typing.Optional[T]]]: ...
    def get_view(self) -> typing.Optional[IVectorView[T]]: ...
    def index_of(self, value: typing.Optional[T]) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]: ...
    def insert_at(self, index: _winrt.UInt32, value: typing.Optional[T]) -> None: ...
    def remove_at(self, index: _winrt.UInt32) -> None: ...
    def remove_at_end(self) -> None: ...
    def replace_all(self, items: typing.Sequence[typing.Optional[T]]) -> None: ...
    def set_at(self, index: _winrt.UInt32, value: typing.Optional[T]) -> None: ...
    def first(self) -> typing.Optional[IIterator[T]]: ...

K = typing.TypeVar('K')

V = typing.TypeVar('V')

MapChangedEventHandler = typing.Callable[[IObservableMap[K, V], IMapChangedEventArgs[K]], None]

T = typing.TypeVar('T')

VectorChangedEventHandler = typing.Callable[[IObservableVector[T], typing.Optional[IVectorChangedEventArgs]], None]

