# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cookiecutter_poetry']

package_data = \
{'': ['*']}

install_requires = \
['cookiecutter>=1.7.3,<2.0.0']

entry_points = \
{'console_scripts': ['ccp = cookiecutter_poetry.cli:main']}

setup_kwargs = {
    'name': 'cookiecutter-poetry',
    'version': '0.0.13',
    'description': 'A python cookiecutter application to create a new python project that uses poetry to manage its dependencies.',
    'long_description': '====================\nCookiecutter Poetry\n====================\n\n.. image:: https://img.shields.io/github/v/release/fpgmaas/cookiecutter-poetry\n\t:target: https://pypi.org/project/cookiecutter-poetry/\n\t:alt: Release\n\n.. image:: https://img.shields.io/github/workflow/status/fpgmaas/cookiecutter-poetry/merge-to-main\n\t:target: https://img.shields.io/github/workflow/status/fpgmaas/cookiecutter-poetry/merge-to-main\n\t:alt: Build status\n\n.. image:: https://img.shields.io/pypi/pyversions/cookiecutter-poetry\n    :target: https://pypi.org/project/cookiecutter-poetry/\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/badge/docs-gh--pages-blue\n    :target: https://fpgmaas.github.io/cookiecutter-poetry/\n    :alt: Docs\n\n.. image:: https://img.shields.io/github/commit-activity/m/fpgmaas/cookiecutter-poetry\n    :target: https://img.shields.io/github/commit-activity/m/fpgmaas/cookiecutter-poetry\n    :alt: Commit activity\n\n.. image:: https://img.shields.io/github/license/fpgmaas/cookiecutter-poetry\n\t:target: https://img.shields.io/github/license/fpgmaas/cookiecutter-poetry\n\t:alt: License\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n\t:target: https://github.com/psf/black\n\t:alt: Code style with black\n\n.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1\n\t:target: https://pycqa.github.io/isort/\n\t:alt: Imports with isort\n\nThis is a `cookiecutter <https://github.com/cookiecutter/cookiecutter>`_ repository to generate the file structure for a Python project that uses `Poetry <https://python-poetry.org/>`_ for its dependency management.\n\n+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+\n| **Documentation**             | `https://fpgmaas.github.io/cookiecutter-poetry/ <https://fpgmaas.github.io/cookiecutter-poetry/>`_                                   |\n+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+\n| **Example Repository**        | `https://github.com/fpgmaas/cookiecutter-poetry-example/ <https://github.com/fpgmaas/cookiecutter-poetry-example/>`_                 |\n+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+\n| **Pypi**                      | `https://pypi.org/project/cookiecutter-poetry/ <https://pypi.org/project/cookiecutter-poetry//>`_                                    |\n+-------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+\n\n\nFeatures\n--------\n\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Feature                                      | Description                                                                                                                                                |\n+==============================================+============================================================================================================================================================+\n| **Poetry**                                   | Generates a `poetry <https://python-poetry.org/>`_ environment file, ready to be installed with a single command.                                          |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Makefile**                                 | A makefile with pre-configured commands, type `make help` to list the options.                                                                             |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Pytest**                                   | Adds a `pytest <https://docs.pytest.org/en/7.1.x/>`_ template.                                                                                             |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Formatting**                               | Adds code formatting with `isort <https://github.com/PyCQA/isort>`_ and `black <https://pypi.org/project/black/>`_.                                        |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **CI/CD with Github actions**                | Adds Github actions that run the formatting checks and unittests for pull requests and when merged to `main`.                                              |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Release to Pypi**                          | Release to `Pypi <https://pypi.org>`_ by creating a new release on Github.                                                                                 |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Release to Artifactory**                   | Release to `Artifactory <https://jfrog.com/artifactory>`_ by creating a new release on Github.                                                             |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Documentation with MkDocs**                | Automatically add documentation to your project and its code with `MkDocs <https://www.mkdocs.org/>`_.                                                     |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Tox testing**                              | Setup and CI/CD integration to easily test for different Python versions with `Tox <https://tox.wiki/>`_.                                                  |\n+----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n\nExample CI/CD Pipeline\n--------------------------\n\n.. image:: https://raw.githubusercontent.com/fpgmaas/cookiecutter-poetry/main/static/images/pipeline.png\n\t:target: https://raw.githubusercontent.com/fpgmaas/cookiecutter-poetry/main/static/images/pipeline.png\n\t:alt: Example pipeline\n    \nQuickstart\n------------\n\nOn your local machine, navigate to the directory in which you want to create a project directory, and run the following two commands:\n\n.. code-block:: bash\n\n    pip install cookiecutter-poetry \n    ccp\n\nAlternatively, install ``cookiecutter`` and directly pass the URL to this Github repository to the ``cookiecutter`` command:\n\n.. code-block:: bash\n\n    pip install cookiecutter\n    cookiecutter https://github.com/fpgmaas/cookiecutter-poetry.git\n\nThen run the following commands, replacing ``<project-name>``, with the name that you also gave the Github repository and ``<github_author_handle>`` with your Github username.\n\n.. code-block:: bash\n    \n    cd <project_name>\n    git init -b main\n    git add .\n    git commit -m "Init commit"\n    git remote add origin git@github.com:<github_author_handle>/<project_name>.git\n    git push -u origin main\n\n\nFinally, install the environment with `make install`. \n\nYou are now ready to start development on your project! The CI/CD pipeline will be triggered when you open a pull\nrequest, merge to main, or when you create a new release.\n\nTo finalize the set-up for publishing to PyPi or Artifactory through CI/CD, see `here <https://fpgmaas.github.io/cookiecutter-poetry/features/publishing/#set-up-for-pypi>`_. \nFor activating the automatic documentation with MkDocs, see `here <https://fpgmaas.github.io/cookiecutter-poetry/features/mkdocs/#enabling-the-documentation-on-github>`__.\n\n\nAcknowledgements\n-----------------\n\nThis project is partially based on \n`Audrey Feldroy\'s <https://github.com/audreyfeldroy>`_\'s great `cookiecutter-pypackage <https://github.com/audreyfeldroy/cookiecutter-pypackage>`_ repository.\n\n\n\n',
    'author': 'Florian Maas',
    'author_email': 'fpgmaas@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/fpgmaas/cookiecutter-poetry',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
