# Python code obfuscated by www.development-tools.net


import base64, codecs

magic = ""
love = "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"
god = ""
destiny = ""
joy = "\x72\x6f\x74\x31\x33"
trust = (
    eval("\x6d\x61\x67\x69\x63")
    + eval(
        "\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29"
    )
    + eval("\x67\x6f\x64")
    + eval(
        "\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29"
    )
)
eval(compile(base64.b64decode(eval("\x74\x72\x75\x73\x74")), "<string>", "exec"))
