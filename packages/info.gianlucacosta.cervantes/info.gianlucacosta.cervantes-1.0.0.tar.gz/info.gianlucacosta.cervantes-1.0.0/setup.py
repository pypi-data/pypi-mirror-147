# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['info', 'info.gianlucacosta.cervantes', 'info.gianlucacosta.cervantes.sqlite']

package_data = \
{'': ['*']}

install_requires = \
['info.gianlucacosta.wikiprism>=1.0.0,<2.0.0']

setup_kwargs = {
    'name': 'info.gianlucacosta.cervantes',
    'version': '1.0.0',
    'description': 'Extract a compact Spanish dictionary from Wikcionario, with elegance',
    'long_description': "# Cervantes\n\n_Extract a compact Spanish dictionary from Wikcionario, with elegance_\n\nIn Spanish literature - and all over the world - the works of [Miguel de Cervantes](https://en.wikipedia.org/wiki/Miguel_de_Cervantes) are considered an _obra maestra_ because of their stylistic ðŸ¦‹elegance, witty remarks and _humanistic_ depth of thought...\n\n...which is why I wish to dedicate this project to his memory: more precisely, this is my library for creating _a customized, Wiktionary-based corpus of the Spanish language_.\n\n**Cervantes** is a type-checked library for Python, built on top of [WikiPrism](https://github.com/giancosta86/WikiPrism), focusing on:\n\n- _Parsing_ an [XML dump](https://dumps.wikimedia.org/eswiktionary/latest/eswiktionary-latest-pages-articles.xml.bz2) of [Wikcionario](https://es.wiktionary.org/) and extracting _Spanish terms_ from each wiki page\n\n- _Classifying_ each term according to a set of _grammar categories_\n\n- Providing _a Spanish-related Dictionary_, backed by a SQLite db, that can be used for custom analysis via _SQL queries_\n\nDespite its sophisticated _regex-based engine_, Cervantes has a minimalist programming interface; furthermore, it is designed to be a core plugin of [Jardinero](https://github.com/giancosta86/Jardinero) - which makes it extremely simple to use, via a web-application user interface.\n\nNo matter the scenario, it is essential to explore the SQL schema of its underlying database: for details, please consult the sections below.\n\n## Installation\n\nTo install **Cervantes**, just run:\n\n> pip install info.gianlucacosta.cervantes\n\nor, if you are using Poetry:\n\n> poetry add info.gianlucacosta.cervantes\n\n## Extracting a custom dictionary from Wikcionario\n\nOnce Cervantes is installed in your Python environment, you can import it just like any other Python library - or you can run it within Jardinero's infrastructure!\n\nIn the latter case, make sure [Jardinero](https://github.com/giancosta86/Jardinero) is installed, then run:\n\n> python \\[-OO\\] -m info.gianlucacosta.jardinero info.gianlucacosta.cervantes\n\nIf you start Jardinero with the **-OO** flag:\n\n- the process will run slightly faster, but with less logging\n\n- Jardinero will download the very latest dump from Wikcionario's official download website\n\nOn the other hand, if you omit the flag:\n\n- you'll be able to see more logging messages\n\n- Jardinero will use your local copy of Wikcionario's dump - that **must** be a BZ2 archive residing at the following address: **http://localhost:8000/eswiktionary-latest-pages-articles.xml.bz2**. In particular, this address becomes accessible once you run:\n\n  > python -m http.server\n\n  from the directory containing your downloaded - and maybe customized - [Wikcionario dump file](https://dumps.wikimedia.org/eswiktionary/latest/eswiktionary-latest-pages-articles.xml.bz2).\n\n## Database schema\n\nEvery single table in the database created by Cervantes has two fields:\n\n- **entry** (TEXT NOT NULL) - denoting the term within the dictionary\n\n- **pronunciation** (TEXT) - the IPA pronunciation, with an ASCII apostrophe character (and not a more sophisticated Unicode symbol) before the syllable having the primary stress\n\nGiven the nature of the extraction process, there are no foreign keys enforcing consistency between tables (for example, between **verbs** and **verb_forms**) - but one can still perform JOINs according to one's needs.\n\n### Table: prepositions\n\n| Field         | Type | Required | Primary key |\n| ------------- | ---- | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n\n### Table: interjections\n\n| Field         | Type | Required | Primary key |\n| ------------- | :--: | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n\n### Table: conjunctions\n\n| Field         | Type | Required | Primary key |\n| ------------- | :--: | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n\n### Table: adverbs\n\n| Field         | Type | Required | Primary key |\n| ------------- | :--: | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n| kind          | TEXT |          |     \\*      |\n\n### Table: verbs\n\n| Field         | Type | Required | Primary key |\n| ------------- | :--: | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n| kind          | TEXT |          |     \\*      |\n\n### Table: pronouns\n\n| Field         | Type | Required | Primary key |\n| ------------- | :--: | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n| kind          | TEXT |          |     \\*      |\n\n### Table: articles\n\n| Field         | Type | Required | Primary key |\n| ------------- | :--: | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n| kind          | TEXT |          |     \\*      |\n\n### Table: adjectives\n\n| Field           | Type | Required | Primary key |\n| --------------- | :--: | :------: | :---------: |\n| entry           | TEXT |    \\*    |     \\*      |\n| pronunciation   | TEXT |          |             |\n| reference_entry | TEXT |          |     \\*      |\n\n### Table: nouns\n\n| Field           | Type | Required | Primary key |\n| --------------- | :--: | :------: | :---------: |\n| entry           | TEXT |    \\*    |     \\*      |\n| pronunciation   | TEXT |          |             |\n| gender          | TEXT |    \\*    |     \\*      |\n| number_trait    | TEXT |          |             |\n| reference_entry | TEXT |          |     \\*      |\n\n### Table: verb_forms\n\n| Field         | Type | Required | Primary key |\n| ------------- | :--: | :------: | :---------: |\n| entry         | TEXT |    \\*    |     \\*      |\n| pronunciation | TEXT |          |             |\n| infinitive    | TEXT |    \\*    |     \\*      |\n| mode          | TEXT |    \\*    |     \\*      |\n| tense         | TEXT |          |     \\*      |\n| person        | TEXT |          |     \\*      |\n\n## The API\n\nEven though this library is designed for [Jardinero](https://github.com/giancosta86/Jardinero), one can still use its functions in other Python programs - mostly in a custom subclass of [WikiPrism](https://github.com/giancosta86/WikiPrism)'s **PipelineStrategy**.\n\nAs a matter of fact, one just needs a few functions from the **info.gianlucacosta.cervantes** namespace:\n\n- **extract_terms(page: Page) -> list\\[SpanishTerm\\]**: given a page, returns a list of Spanish terms from the page - and whose types can be imported from the **info.gianlucacosta.cervantes.terms** namespace. In WikiPrism's model, this function is a **TermExtractor\\[SpanishTerm\\]**\n\n* **create_sqlite_dictionary(connection: Connection) -> SpanishSqliteDictionary**: given a SQLite connection, creates a **SqliteDictionary** (from WikiPrism) that will become its owner and that can be used to read and write Spanish terms. Consequently, it is a **SqliteDictionaryFactory\\[SpanishTerm\\]**\n\n## Parting thoughts\n\n**Cervantes** is a project that I created because I definitely needed to further explore Spanish morphology: actually, it was the initial kernel of [Jardinero](https://github.com/giancosta86/Jardinero), which I later refactored into a separate library, as well as [WikiPrism](https://github.com/giancosta86/WikiPrism).\n\nSince it relies on a very dynamic source like Wikcionario, and despite the carefully-crafted parsing regular expressions, its output cannot be 100% accurate.\n\nFurthermore, it focuses on the linguistic aspects that I felt more appealing according to my own needs - which means that I had to discard information during the parsing, or even to include aspects that may be unnecessary in a different context.\n\nConsequently... feel free to experiment, and maybe to create your own library! ^\\_\\_^\n\nActually, one can even adopt Cervantes's patterns to create a linguistic module for Jardinero dedicated to another language! ðŸ¤©\n\n## Further references\n\n- [Jardinero](https://github.com/giancosta86/Jardinero) - Python/TypeScript React web app for exploring natural languages\n\n- [WikiPrism](https://github.com/giancosta86/WikiPrism) - Parse wiki pages and create dictionaries, fast, with Python\n\n* [Eos-core](https://github.com/giancosta86/Eos-core) - Type-checked, dependency-free utility library for modern Python\n\n* [Miguel de Cervantes](https://en.wikipedia.org/wiki/Miguel_de_Cervantes)\n",
    'author': 'Gianluca Costa',
    'author_email': 'gianluca@gianlucacosta.info',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/giancosta86/Cervantes',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
