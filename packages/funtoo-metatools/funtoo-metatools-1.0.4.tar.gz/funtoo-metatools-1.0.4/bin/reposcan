#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import yaml

from dict_tools.data import NamespaceDict
from subpop.hub import Hub

hub = Hub()

import dyne.org.funtoo.metatools.merge as merge

logging.basicConfig(level=logging.INFO)


async def main_thread(repo_plus_overlays):
	pos = 0

	for kit_dict in repo_plus_overlays:
		ctx = NamespaceDict()
		ctx["kit"] = NamespaceDict(kit_dict)
		out_tree = await merge.kit.checkout_kit(ctx)

		if pos == 0:
			merge.model.ECLASS_ROOT = out_tree.root
			merge.model.ECLASS_HASHES = merge.metadata.get_eclass_hashes(
					merge.model.ECLASS_ROOT
			)

		merge.metadata.fetch_kit(out_tree)
		merge.metadata.gen_cache(out_tree)
		merge.metadata.flush_kit(out_tree)
		pos += 1


def load_specs(specs):
	ans = []
	m = {}
	for f in specs:
		if not os.path.exists(f):
			logging.error("File %s not found." % f)
			sys.exit(1)

		with open(f) as yf:
			data = yaml.load(yf, Loader=yaml.FullLoader)

		if 'name' not in data or 'url' not in data:
			logging.error("Invalid file %s." % f)
			sys.exit(1)

		if "commit_sha1" not in data:
			data["commit_sha1"] = None

		# Get only last repository of the specified name.
		m[data['name']] = data

	for k, v in m.items():
		ans.append(v)

	return ans


def parse_args():
	parser = argparse.ArgumentParser(
		description="Funtoo Reposcan tool",
		formatter_class=argparse.RawDescriptionHelpFormatter
	)

	parser.add_argument(
		"-s", "--specs",
		nargs='+',
		action='store',
		default=[],
		help="Reposcan specs file"
	)

	return parser.parse_args()


if __name__ == "__main__":
	merge.metadata.cleanup_error_logs()
	hub.OPT = parse_args()

	if hub.OPT.specs is None or len(hub.OPT.specs) == 0:
		logging.error("Missing mandatory --specs option")
		sys.exit(1)

	repo_plus_overlays = load_specs(hub.OPT.specs)

	for kit in repo_plus_overlays:

		logging.info(
				'Repo %s:\n'
				'Url: %s\n'
				'Branch: %s\n'
				'Kind: %s\n'
				'Commit/Sha1: %s\n' % (
					kit['name'],
					kit['url'],
					kit['branch'] if 'branch' in kit else "n/a",
					kit['kind'] if 'kind' in kit else "n/a",
					kit['commit_sha1'],
				)
		)

	hub.LOOP.run_until_complete(main_thread(repo_plus_overlays))

# vim: ts=4 sw=4 noet
